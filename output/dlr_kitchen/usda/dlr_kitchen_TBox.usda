#usda 1.0

class "_class_SOMA_namespace" (
    prepend apiSchemas = ["RdfAPI"]
)
{
    string rdf:namespace = "http://www.ease-crc.org/ont/SOMA.owl#"
}

def "SOMA"
{
    class "_class_AgentRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AgentRole"
        string rdf:definition = """A role classifying an Agent responsible for performing an Action.

The entity playing an AgentRole is endowed with sentience and the capacity to deliberately choose actions in pursuit of goals. This distinguishes Agents from other causes that could bring an event about."""
    }

    class "_class_Appliance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Appliance"
        string rdf:definition = "A device designed to perform a specific task, and that can be operated in some way."
    }

    class "_class_Arranging" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Arranging"
        string rdf:definition = "A task in which an Agent places a collection of objects at some set of relative poses to each other."
    }

    class "_class_Assembling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Assembling"
        string rdf:definition = "A task in which an Agent connects some objects such that they form a cohesive whole, and which also imposes constraints on the objects' relative motions. Often, the objects that make up an assemblage can also be separated again."
    }

    class "_class_BeneficiaryRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BeneficiaryRole"
        string rdf:definition = "A role classifying an agent for whose benefit an action is performed."
    }

    class "_class_Graspability" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Graspability"
        string rdf:definition = "The disposition of an object (e.g. the handle) to afford grasping the object."
    }

    class "_class_Connectivity" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Connectivity"
        string rdf:definition = "The disposition of an object (the connected object) to establish a connection with others."
    }

    class "_class_Disposition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Disposition"
        string rdf:definition = "The tendency of an object (the bearer) to make certain events happen with others (the triggers)."
    }

    class "_class_CanCut" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CanCut"
        string rdf:definition = "The disposition of an object (the tool) to cut other objects. Such as a knife has cutting ability to cut a cucumber into pieces."
    }

    class "_class_CausativeRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CausativeRole"
        string rdf:definition = """A role classifying objects that are responsible in bringing about an event.

The paradigmatic example is the Agent performing an Action -- the Agent is the effective cause of the Action it performs. However, not all objects causing events are agents."""
    }

    class "_class_Cleaning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cleaning"
        string rdf:definition = "This task in which an agent restores all the objects to their destined locations, wiping a specific object"
    }

    class "_class_Closing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Closing"
        string rdf:definition = "A task in which an Agent manipulates a container so as to block access to its interior."
    }

    class "_class_CommunicationTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CommunicationTopic"
        string rdf:definition = """A role that appears in communication tasks, and indicates what the communication is about.

CommunicationTopic can only classify a Social object that participates in an Action that is classified as (the execution of) a CommunicationTask.

Note that classifies here is used in the plays-role sense. This isn't to say that the social object, ie the information exchanged in the communication, is an instance of the topic. Rather, the topic role refers to what the information is about.

For example, if the topic of a communication is flowers, this does not mean the words themselves are flowers, merely that, in some sense, they are about flowers."""
    }

    class "_class_Constructing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Constructing"
        string rdf:definition = "A task in which an Agent creates a new physical object."
    }

    class "_class_Containment" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Containment"
        string rdf:definition = "Classifies States in which an object is placed inside another."
    }

    class "_class_Cuttability" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cuttability"
        string rdf:definition = "The disposition of an object (the barrier) which makes it able to be cut down (into pieces) usually by some other object with role as a Cutter. Such as a cucumber has cuttability disposition which can be cut by a knife."
    }

    class "_class_Cutting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cutting"
        string rdf:definition = "The goal of this task is to separate one or more pieces from some target object by means of cutting into its constituent material. Unlike a disassembly, a cut is usually not easily reversible."
    }

    class "_class_Delivering" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Delivering"
        string rdf:definition = "A task in which an Agent brings an item that the Agent already carries to a specified target."
    }

    class "_class_DesignedComponent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedComponent"
        string rdf:definition = "An object designed to be part or element of a larger whole."
    }

    class "_class_DesignedContainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedContainer"
        string rdf:definition = "An item designed to be able to hold some other items, preventing their free movement and/or protecting them from outside influence. Containers may be used for storage, or to obtain control over items that are otherwise hard to manipulate directly (e.g. liquids)."
    }

    class "_class_DesignedFurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedFurniture"
        string rdf:definition = "An object used to make a room or building suitable for living or working."
    }

    class "_class_Destination" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Destination"
        string rdf:definition = "A role classifying the location where an event or object is directed towards."
    }

    class "_class_Dicing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dicing"
        string rdf:definition = 'A particular kind of cutting where the goal is to produce small pieces out of some object or material. Unlike slices, the pieces to be obtained do not have one or two dimensions being more prominent than others. "Dice", the pieces dicing results in, are approximately cubic.'
    }

    class "_class_Purification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Purification"
        string rdf:definition = "The disposition of an object (the tool) to change the cleanliness of others."
    }

    class "_class_Variability" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Variability"
        string rdf:definition = "The disposition of an object (the tool) to change some aspect of others."
    }

    class "_class_Linkage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Linkage"
        string rdf:definition = "The disposition of an object (the linked object) to establish a connection with others by being linked together."
    }

    class "_class_Dropping" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dropping"
        string rdf:definition = """The dropped object falls mainly under the influence of gravity. However, an agent may also drop something during navigation. The difference to 'Throwing' is that there is no 'Limb motion' which is a constitiuent of the action.

'Dropping' is intentional. Dropping by accident may not has a phase to release the grasp. It could be that the grasp was not strong enough and the objects \"slips\" away."""
    }

    class "_class_Enclosing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Enclosing"
        string rdf:definition = "The disposition of an object (the container) to contain other objects by enclosing them to prevent their free movement."
    }

    class "_class_EventAdjacentRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "EventAdjacentRole"
        string rdf:definition = """A role classifying a participant in an event.

In linguistics, this is also known as a thematic role."""
    }

    class "_class_ExperiencerRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExperiencerRole"
        string rdf:definition = "A role used in frame semantics to classify agents performing perception actions, or being the subjects affected by some biological process."
    }

    class "_class_Fetching" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Fetching"
        string rdf:definition = "A task in which an Agent retrieves an object from a particular location, which puts the object under the Agent's control, who can now e.g. transport the object somewhere else; this task may include repositioning the Agent to better reach the object. Note that while in normal linguistic use fetch can mean transport, we use it here to refer only to (a part of) the first stage of transport."
    }

    class "_class_Flipping" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Flipping"
        string rdf:definition = "The task in which the agent turns an object over by using a tool or by manipulating"
    }

    class "_class_Fluid" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Fluid"
        string rdf:definition = "A substance with a consistency such that it can flow or diffuse."
    }

    class "_class_FunctionalPart" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FunctionalPart"
        string rdf:definition = "Parts of an agent or an artifact are considered as functional parts."
    }

    class "_class_Grasping" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Grasping"
        string rdf:definition = "A task in which an Agent uses its end effectors to grasp an object, thus gaining kinematic control over it."
    }

    class "_class_Instrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Instrument"
        string rdf:definition = "An object used to carry out the event."
    }

    class "_class_Lifting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Lifting"
        string rdf:definition = "todo: how to distinguish from e.g. 'pushing from the table'"
    }

    class "_class_Location" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Location"
        string rdf:definition = "A role classifying a location of interest, often specified as a spatial relation between several objects, themselves usually classified by spatial relation roles."
    }

    class "_class_Mixing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Mixing"
        string rdf:definition = "A task by which an Agent combines several entities, such that the combination is difficult or in practice impossible to reverse."
    }

    class "_class_Opening" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Opening"
        string rdf:definition = "A task in which an Agent manipulates a container so as to expose its interior."
    }

    class "_class_Origin" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Origin"
        string rdf:definition = "A role classifying the location where an event or object originated."
    }

    class "_class_Patient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Patient"
        string rdf:definition = "A role classifying an object that undergoes/is the primary object affected by the event."
    }

    class "_class_PickingUp" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PickingUp"
        string rdf:definition = "A task in which the Agent uses one or more of its grippers to grasp a usually stationary object."
    }

    class "_class_Placing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Placing"
        string rdf:definition = "Distinguished from Positioning in that this task is more about placing an object at a functionally specified location (e.g., place the cup on the table) as opposed to positioning an object at a location defined by coordinates or a region of coordinates (position the cup at xyz)."
    }

    class "_class_Pourable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pourable"
        string rdf:definition = "The disposition of a fluid or substance which makes it possible to pour it out of a container and into or onto other objects."
    }

    class "_class_Pouring" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pouring"
        string rdf:definition = "A task in which an agent lets liquid substance to flow out of an object. The agent has a kinematic control over the object."
    }

    class "_class_Pulling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pulling"
        string rdf:definition = "A task in which an Agent moves an object in a direction loosely from the object's center of mass towards the contact point between agent and object."
    }

    class "_class_Pushing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pushing"
        string rdf:definition = "A task in which an Agent moves an object in a direction loosely from the the contact point between agent and object towards object's center of mass. todo: define subclass 'PushingOver'? Would we expect two distinct contacts with the same surface then?"
    }

    class "_class_RecipientRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RecipientRole"
        string rdf:definition = "A role which classifies an agent who receives an object modified or created by an action."
    }

    class "_class_ResourceRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ResourceRole"
        string rdf:definition = """A role classifying objects that are useful or even necessary to sustain the unfolding of an event.

Resources are usually not agentive; a different set of roles classifies the agentive participants in actions. Likewise, typically resources do not play causative or goal roles for the event.

Resources are often consumed by their participation in an event, but this need not always be the case. An instrument and capital are examples of resources that are reusable."""
    }

    class "_class_ResultRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ResultRole"
        string rdf:definition = "A role classifying the object that is the outcome of a creation or modification action or process."
    }

    class "_class_Room" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Room"
        string rdf:definition = "Space that can be occupied or where something can be done."
    }

    class "_class_Shaping" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Shaping"
        string rdf:definition = "The disposition of an object (the tool) to change the shape of others."
    }

    class "_class_Slicing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Slicing"
        string rdf:definition = "A particular kind of cutting where the goal is to produce slices from some solid object."
    }

    class "_class_StimulusRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StimulusRole"
        string rdf:definition = "A role classifying an object that is perceived by some agent and thus triggers some reaction (e.g., a perception event)."
    }

    class "_class_Stirring" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Stirring"
        string rdf:definition = "A task in which an agent dissolves small particles like sugar or salt in fluid"
    }

    class "_class_Transporting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Transporting"
        string rdf:definition = "A task by which an Agent carries an item from a source to a destination location."
    }

    class "_class_Affordance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Affordance"
        string rdf:definition = "A relation between an object (the bearer) and others (the triggers) that describes the disposition of the bearer to be involved in an action execution that also involves some trigger object."
    }

    class "_class_Setpoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Setpoint"
        string rdf:definition = "Classifies some dedicated goal region."
    }

    class "_class_Answer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Answer"
        string rdf:definition = "A role that is played by an Information Realization answering some query."
    }

    class "_class_Message" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Message"
        string rdf:definition = """A message is a discrete unit of communication intended by the source for consumption by some recipient or group of recipients (Source: https://en.wikipedia.org/wiki/Message).

Note that the Role Message classifies the Information Realization, not the content."""
    }

    class "_class_ProcessType" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ProcessType"
        string rdf:definition = "An EventType that classifies Processes."
    }

    class "_class_OrderedElement" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "OrderedElement"
        string rdf:definition = "A 'Singleton' of an entity that 'is ordered by' some 'Order'. An 'Order item' can only 'precede' or 'follow' another 'Order item', encoding the sortation of the entities contained within the 'Order items'. Different 'Order's need to use different 'Order item's."
    }

    class "_class_MotionProcess" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MotionProcess"
        string rdf:definition = "A class that classifies motion processes. This class is used to represent any process involving motion, encompassing a wide range of activities such as walking, running, jumping, and any other form of physical movement."
    }

    class "_class_Motion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Motion"
        string rdf:definition = "An EventType that classifies motion Processes."
    }

    class "_class_System" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "System"
        string rdf:definition = """A system is a group of interacting or interrelated elements that act according to a set of rules to form a unified whole.

From Wikipedia: https://en.wikipedia.org/wiki/System"""
    }

    class "_class_Binding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Binding"
        string rdf:definition = """A Relation between Roles/Parameters and their fillers that holds in a particular descriptive context, such as a Workflow or Narrative.

It covers two conceptually related, but somewhat ontologically distinct situations:

-- a binding between two Roles, or two Parameters, with the meaning that in the particular descriptive context where the Binding holds, a filler for one Role/Parameter is also a filler for the other
-- a binding between a Role/Parameter and an Entity able to fill that Role/Parameter, with the meaning that in the particular descriptive context where the Binding holds, the Entity fills the Role/Parameter.

Note: in the second case, the Entity filling the Role/Parameter may be a Role or Parameter itself. This however does NOT reduce to the first case. Consider these examples:

-- (first situation) The accountant is also the lawyer. In this case, there are two roles, and there is a person filling both of them. This is a factual, role-role binding.
-- (second situation, linking to a generic Entity) The accountant is Bob. In this case, there is a factual, role-filler binding asserting who fills the accountant role.
-- (second situation, linking to a role) The newly opened job is accountant. In this case, there is a factual, role-filler binding asserting that some role is filled by another, without making any assertion about the filler of this second role. It is not known, and not important, whether an accountant exists at this time.

There is a further, orthogonal distinction made between:
-- factual: the Binding is asserted to hold in the descriptive context
-- counterfactual: the Binding is used to express conditions in the descriptive context. A counterfactual Binding is not meant as an assertion that the Binding actually holds."""
    }

    class "_class_Joint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Joint"
        string rdf:definition = "An object that is used to articulate links in a kinematic structure."
    }

    class "_class_Color" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Color"
        string rdf:definition = "The color of an object. Color regions encode the color value in some space such as RGB or HSV, and may further be used to classify the color as red, dark, etc. The color of an object may have different facets, e.g. a red and blue color."
    }

    class "_class_ExecutionStateRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExecutionStateRegion"
        string rdf:definition = "A region containing labels that describe different states in the evolution/completion of a task execution."
    }

    class "_class_Feature" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Feature"
        string rdf:definition = "Features are 'parasitic' entities that only exist insofar their host exists. Typical examples are holes, bumps, boundaries, or spots of color."
    }

    class "_class_FrictionAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FrictionAttribute"
        string rdf:definition = "The resistance that one surface or object encounters when moving over another."
    }

    class "_class_StateTransition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StateTransition"
        string rdf:definition = "A transition between two states brought about by the Action of some Agent."
    }

    class "_class_Scene" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Scene"
        string rdf:definition = "Scenes are Situations which interpret a State in terms of its conformance to some qualitative, image schematic description. I.e., the scene is described in terms of qualitative functional and spatial relations existing between participating objects."
    }

    class "_class_SituationTransition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SituationTransition"
        string rdf:definition = "A transition between two situations, usually brought about by the Action of some Agent."
    }

    class "_class_NonmanifestedSituation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "NonmanifestedSituation"
        string rdf:definition = """A Situation which does not manifest in any event.

The main use case for this is to represent expectations that are not met, e.g. unfulfilled post-conditions of an action. An action with unmet postconditions is then a failure.

Because of open world semantics of DL, the default assumption for a Situation individual with no \"manifests in\" relations is simply that we don't know yet whether that Situation is manifested and if so by what Event.

As such, an explicit assertion is needed to make a Situation a nonmanifested one: either declare that individual's type NonmanifestedSituation, or assert that it has 0 manifestsIn relations."""
    }

    class "_class_JointLimit" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "JointLimit"
        string rdf:definition = "The physical limits of a joint."
    }

    class "_class_JointState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "JointState"
        string rdf:definition = "The state of a joint in terms of position, velocity of the joint and effort applied to it."
    }

    class "_class_Localization" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Localization"
        string rdf:definition = "The localization of an object. The region of this quality encodes values to localize the object in a dimensional space, e.g. Euclidean positions that localize the object in Euclidean space."
    }

    class "_class_MassAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MassAttribute"
        string rdf:definition = "The quantity of matter which a body contains, as measured by its acceleration under given force or by the force exerted on it by a gravitational field."
    }

    class "_class_NetForce" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "NetForce"
        string rdf:definition = "The accumulated force acting upon an object."
    }

    class "_class_State" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "State"
        string rdf:definition = """States are stative and homeomeric events.

For stative events, the mereological sum of two instances has the same type as both instances. This is, for example, the state of sitting on a chair, or the process of a pendulum swinging around.

The difference between states and processes is that states are, in addition, homeomeric, and processes are not.  This means that, when considering time slices  of an event, for states, these time slices always have the same type as the state, but for processes this is not the case."""
    }

    class "_class_Succedence" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Succedence"
        string rdf:definition = """A relation that holds in some descriptive context such as a Workflow, between two TaskInvocations belonging to that same Workflow. It means that one task invocation should follow the other.

Note: a successor relation implemented as an OWL object property is sometimes enough, but not in general; in particular, when there are conditions imposed on the succession.

As a result, a reification pattern was applied here."""
    }

    class "_class_Preference" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Preference"
        string rdf:definition = """A 'Preference' is a 'Quality' of an 'Agent' that orders 'Situation's by some heuristic based on the happiness, satisfaction, gratification, morality, enjoyment, and utility (see alse https://en.wikipedia.org/wiki/Preference) they provide to their bearing Agent.

The pattern is as follows: A 'Preference' 'is described by' a 'Predilection', which also 'describes' an 'Order' that 'orders' 'Order item's that contain only 'Situation's. The 'Situation's then are modeled according to what the preference entails.

That a 'Preference' orders 'Situation's might be unintuitive, but makes the model very general. A few examples:

Example 1

\"Peter likes coffee and dislikes tea\".
Here, between different hypothetical situations where he plays the role of a performer in a drinking task, Peter prefers the situations in which role of the drunken object is played by some coffee (vs. some tea). Note that the coffe and tea are hypothetical objects as well and could, for example, be represented via reified Concepts.

Example 2

\"Would you like this pot of coffee, or this pot of tea, Peter?\"
Here, as opposed to Example 1, the pot of coffee and the pot of tea are not hypothetical, but concrete.

Example 3

\"Would you like this pot of coffee, or should I brew you some tea?\"
Here, the pot of coffee is concrete and the tea is not.

Example 4

Situations are not restricted to Tasks; other event types are possible as well.
For example, Peter might prefer the Containment State of a tiger being inside a cage vs. the Containment State of the tiger being outside of the cage."""
    }

    class "_class_Shape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Shape"
        string rdf:definition = "The external form, contours, or outline of an object."
    }

    class "_class_ShapeRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ShapeRegion"
        string rdf:definition = """Encodes the shape of an object.

Note that sometimes the shape as actually used for some purpose may be displaced. This is the case, e.g., for robot links which use a mesh file to describe their shape, but the reference pose of the link uses the mesh translated/rotated in the link's local coordinate frame."""
    }

    class "_class_SoftwareInstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SoftwareInstance"
        string rdf:definition = """A Software instance is an entity to represent the agent that emerges from and while executing software: Some object, that can perform actions and communicate via some interfaces.
In this view, we see the of an Agent required intentionality its intentionality as bestowed upon the Software instance from the agents who started the program or gave an input (e.g., via a mouse click) to achieve some goal.

Another apporach might be to not model this entity at all and only see Execution of Software as a Process (see, e.g., https://en.wikipedia.org/wiki/Execution_(computing)). However, this would complicate modeling communication between running Software processes."""
    }

    class "_class_StateType" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StateType"
        string rdf:definition = "An EventType that classifies States."
    }

    class "_class_PhysicalEffector" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalEffector"
        string rdf:definition = "A functional part belonging to an Agent and which allows that Agent to act upon its surroundings."
    }

    class "_class_QueryingTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "QueryingTask"
        string rdf:definition = "An Illocutionary act where the Sender of the Message does so to trigger the Receiver to return some information that is specified within the content of the Message."
    }

    class "_class_MotionDescription" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MotionDescription"
        string rdf:definition = "A Description of a Motion process, e.g. moving the arm into a specific location"
    }

    class "_class_Order" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Order"
        string rdf:definition = "An 'Order' sorts two or more 'Order item's via the relations 'precedes' and 'follows'."
    }

    class "_class_Transient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Transient"
        string rdf:definition = """Objects may undergo changes during Processes; however, while the change Process is in operation, one cannot strictly say either the input of the Process still exists, nor that the result exists yet.

A prototypical example is making a pancake on a heater. When PancakeMix is put on the hot plate, it ceases to be PancakeMix-- already, the chemical structure of the substance gets altered-- however it is only after sufficient heating that this object becomes a Pancake.

Transients are the objects undergoing such change processes; they are no longer the initial objects fed into the process, nor are they the objects produced as results.

Instead, a Transient transitionsFrom some initial Object that was fed into a change Process. Typically, a Transient may transitionTo some resulting Object (though not always, some processes simply destroy objects).

It is also possible that a Transient transitionsBack to the initial object. An example is the catalyst in a chemical reaction; another example is a loaf of bread after a slice has been cut off."""
    }

    class "_class_ColorRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ColorRegion"
        string rdf:definition = "Encodes the color of an object."
    }

    class "_class_ForceAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ForceAttribute"
        string rdf:definition = "The value of a force dynamical characteristic. An example is the force exerted on another object when pushing it."
    }

    class "_class_API_Specification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "API_Specification"
        string rdf:definition = """An application programming interface (API) is a way for two or more computer programs to communicate with each other. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use an API is called an API specification.

Source: https://en.wikipedia.org/wiki/API"""
    }

    class "_class_InterfaceSpecification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InterfaceSpecification"
        string rdf:definition = """The Specification of an Interface between software, computer hardware, peripheral devices, humans and combinations of these.

Source: https://en.wikipedia.org/wiki/Interface_(computing)"""
    }

    class "_class_AbductiveReasoning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AbductiveReasoning"
        string rdf:definition = "A task in which the Agent proceeds from some set of statements about a world, and attempts to obtain an explanation for these statements. This explanation is often an inferred cause, such as a final cause or intention. Further, it is often required that there be some guarantees that the explanation produced by AbductiveReasoning have some desirable property, such as being the simplest or most likely given the set of statements to explain."
    }

    class "_class_Reasoning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Reasoning"
        string rdf:definition = "A Mental task in which an Agent endeavours to obtain new knowledge from knowledge it already possesses."
    }

    class "_class_Accessor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Accessor"
        string rdf:definition = "A role classifying an object used to gain access to some other entity."
    }

    class "_class_Accident" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Accident"
        string rdf:definition = """An Event for which causes are unknown and/or considered irrelevant. This is true also for \"final causes\" (that is, intentions) of Agents participating in the Accident: it is not the intentions of these Agents to bring about the Accident.

Note a distinction between this definition and some informal, everyday uses of \"accident\" which require a causal structure and responsibility to be ascertained. An accident, in the informal sense, may require an explanation as to who made a mistake in bringing about the event; a \"traffic accident\", where we want to know who's responsible, is an example of this.

Such an event does NOT fall under the definition of Accident here. An example of Accident would be a fair coin landing Heads: the causal chain for why this exact face landed is not important, all that matters is the brute fact that the coin landed Heads."""
    }

    class "_class_ActionExecutionPlan" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ActionExecutionPlan"
        string rdf:definition = "idea: steps in workflows assert that they are defined by action execution plans."
    }

    class "_class_Status" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Status"
        string rdf:definition = "A role that can be played by some parameter which indicates the state of affairs of some entity, e.g. a flag describing the outcome of an action in terms of success or failure, or an indicator of whether a device is turned on or off."
    }

    class "_class_Actuating" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Actuating"
        string rdf:definition = """Tasks where the goal is to move an object.

Usually, an agent will use their prehensile effectors, ie. hands, for this purpose, so there is a lot of conceptual overlap between Actuating and Manipulating.

However, these categories are nonetheless distinguished in that there are more ways to actuate objects than simply manipulating them; for example, some tool like a net or frying pan might be used to catch an object.

Another way to look at the difference between Actuating and Manipulating is in what they \"profile\", ie. focus on as important.

For Actuating, it is the object's motion that is paramount.

For Manipulating, it is the movement of the hand(s) and the change in functional relationships (such as kinematic control) between the hand(s) and the manipulated object(s)."""
    }

    class "_class_PhysicalTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalTask"
        string rdf:definition = "A task in which a PhysicalAgent affects some physical object."
    }

    class "_class_AestheticDesign" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AestheticDesign"
        string rdf:definition = """A design that describes an aesthetic quality of an object.

Aesthetics is the philosophical study of beauty and taste. The term stems from the Greek word 'aisthetikos', meaning 'of sense perception', and is related to the study of sensory values. From design point of view, aesthetics refers to the visual attractiveness of an object. Visual aesthetics have these key elements: Color, Shape, Pattern, Line, Texture, Visual weight, Balance, Scale, Proximity and Movement."""
    }

    class "_class_Agonist" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Agonist"
        string rdf:definition = "A role that classifies entities with a tendency to either cause an alteration or to preserve some state."
    }

    class "_class_Algorithm" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Algorithm"
        string rdf:definition = """An Algorithm is a finite sequence of well-defined instructions, typically used to solve a class of specific problems or to perform a computation.

From Wikipedia: https://en.wikipedia.org/wiki/Algorithm"""
    }

    class "_class_Alteration" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Alteration"
        string rdf:definition = "A process by which an aspect of some object changes such as ice cream melting in the sun."
    }

    class "_class_AlterativeInteraction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AlterativeInteraction"
        string rdf:definition = "A force interaction where the agonist has the tendency to set another object into motion. An example is 'opening a door' where some object interacts with the door such that it moves out of its frame."
    }

    class "_class_ForceInteraction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ForceInteraction"
        string rdf:definition = 'Classifies events in which two entities interact with each other with a reference to force. One of the entities, the agonist, has a tendency to either set the other entity (the antagonist) into motion, or to keep it still under the influence of some other force. The tendency only manifests in case the agonist is the "stronger entity".'
    }

    class "_class_PreservativeInteraction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PreservativeInteraction"
        string rdf:definition = "A force interaction where the agonist has a tendency to keep another object still. An example is 'holding a door closed' where some object interacts with the door to neutralize forces that could set the door into motion."
    }

    class "_class_AlteredObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AlteredObject"
        string rdf:definition = "An object undergoing modifications."
    }

    class "_class_Amateurish" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Amateurish"
        string rdf:definition = "A description of amateurish behavior."
    }

    class "_class_DexterityDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DexterityDiagnosis"
        string rdf:definition = "A description of the dexterity of a system, possibly in comparison to another system."
    }

    class "_class_Masterful" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Masterful"
        string rdf:definition = "A description of masterful behavior."
    }

    class "_class_AnsweringTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AnsweringTask"
        string rdf:definition = "An Illocutionary act where the Sender emits some Message to the Receiver as a reaction to some previous Communication task where the Roles where switched, i.e., the Sender (Receiver) of the Answering task has been the Sender (Sender) for the cause."
    }

    class "_class_CommandingTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CommandingTask"
        string rdf:definition = "An Illocutionary act where the Sender emits some Message with the intent to cause the Receiver to perform some action."
    }

    class "_class_IllocutionaryTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "IllocutionaryTask"
        string rdf:definition = '''A task which is executed by a Locution action: A Locution is what was said and meant, Illocution is what was done.

When somebody says "Is there any salt?" at the dinner table, the illocutionary act is a request: "please give me some salt" even though the locutionary act (the literal sentence) was to ask a question about the presence of salt.

Source: https://en.wikipedia.org/wiki/Illocutionary_act'''
    }

    class "_class_Antagonist" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Antagonist"
        string rdf:definition = "A role that classifies entities that are opposed to the tendency of some agonist."
    }

    class "_class_Approaching" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Approaching"
        string rdf:definition = "A process type to classify motions by which a body approaches some object or location."
    }

    class "_class_Locomotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Locomotion"
        string rdf:definition = """Conceptually related to Navigation, but distinguishable from it because of the profile, ie. the focus of the task.

Navigation is about reaching some goal.

Locomotion is concerned more with the actual motion."""
    }

    class "_class_ArchiveFile" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ArchiveFile"
        string rdf:definition = """An archive file is a computer file that is composed of one or more files along with metadata.

Source: https://en.wikipedia.org/wiki/Archive_file"""
    }

    class "_class_ArchiveText" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ArchiveText"
        string rdf:definition = """An Archive is a Structured Text that is composed of one or more Structured Texts along with metadata. Archives are used to collect multiple texts together into a single text for easier portability and storage as Archive Files, or simply to compress text to use less storage space as Computer Files. Archive often store directory structures, error detection and correction information, arbitrary comments, and sometimes use built-in encryption.

Source: https://en.wikipedia.org/wiki/Archive_file"""
    }

    class "_class_Digital_File" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Digital_File"
        string rdf:definition = "Any file that exists as a digital resource (but not its content), e.g., a text file actually laying on some hard drive, but not the contained text."
    }

    class "_class_ArchiveFormat" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ArchiveFormat"
        string rdf:definition = """An Archive Format is the file format of an archive file.

Source: https://en.wikipedia.org/wiki/Archive_file#Archive_formats"""
    }

    class "_class_File_format" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "File_format"
        string rdf:definition = """A File Format is a standard way that information is encoded for storage in a computer file. It specifies how bits are used to encode information in a digital storage medium.

From Wikipedia: https://en.wikipedia.org/wiki/File_format"""
    }

    class "_class_FileConfiguration" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FileConfiguration"
        string rdf:definition = "A configuration whose members are all files. Used to model, e.g., concrete collections of zip- and jar-files (and so on)."
    }

    class "_class_Structured_Text" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Structured_Text"
        string rdf:definition = "Any Text that adheres to some rules that are in any way more specific than natural language and that cannot be made sense of without knowing said rules."
    }

    class "_class_AreaSurveying" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AreaSurveying"
        string rdf:definition = "A task in which an Agent uses its perception apparatus to gain information about some location."
    }

    class "_class_Perceiving" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Perceiving"
        string rdf:definition = "A task in which the Agent gathers and interprets sensor information about its surroundings."
    }

    class "_class_Arm" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Arm"
        string rdf:definition = "A limb used to reach for objects."
    }

    class "_class_Limb" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Limb"
        string rdf:definition = "An arm or leg of an embodied agent."
    }

    class "_class_ArtificialAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ArtificialAgent"
        string rdf:definition = """A physical object with artificial characteristics, which can perform actions to achieve desired goals, and typically has sensors and/or actuators.

There can be non-physical artificial agents such as software programs but they are not considered here in the scope of artificial agent."""
    }

    class "_class_AssertionTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AssertionTask"
        string rdf:definition = "An Illocutionary Act where the Sender emits some Message with the intent to change what the Receiver believes to be true in some context. Often, assertions are of facts about the real world, but this need not be the case. Assertions can communicate what someone believes, or refer to a world that is entirely fictional. In all these cases however, assertions are intended to update the listener's model (of the real world, or of the speaker's beliefs, or of the fictional world etc.)."
    }

    class "_class_DeclarativeClause" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DeclarativeClause"
        string rdf:definition = "A clause which makes an assertion or declaration."
    }

    class "_class_AssumingArmPose" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AssumingArmPose"
        string rdf:definition = "A task by which an Agent arranges one/some/all of its arms according to some configuration."
    }

    class "_class_AssumingPose" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AssumingPose"
        string rdf:definition = "A task by which an Agent arranges its body, or part of it, according to some configuration."
    }

    class "_class_AttentionShift" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AttentionShift"
        string rdf:definition = "A mental task in which the executing Agent shifts his attention from some Information to another."
    }

    class "_class_MentalTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MentalTask"
        string rdf:definition = "A Task classifying some MentalAction, that is, an Action through which an Agent manipulates representations stored in its own cognition."
    }

    class "_class_AvoidedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AvoidedObject"
        string rdf:definition = "An object that is avoided."
    }

    class "_class_Avoiding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Avoiding"
        string rdf:definition = "A task in which an Agent moves so as to not enter or pass through a location."
    }

    class "_class_Navigating" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Navigating"
        string rdf:definition = "A task in which an Agent moves through space so as to arrive at some location, follow some path, or increase its distance from some location or other entity. Often, navigation involves finding paths around obstacles and forbidden areas."
    }

    class "_class_Barrier" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Barrier"
        string rdf:definition = "A role classifying an object used to prevent others from entering or leaving a restricted space or group."
    }

    class "_class_Restrictor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Restrictor"
        string rdf:definition = "A role classifying an object used to deny access to some other entity."
    }

    class "_class_BehavioralDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BehavioralDiagnosis"
        string rdf:definition = "A diagnosis of how a system interacts with its world."
    }

    class "_class_GoalRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GoalRole"
        string rdf:definition = "A role classifying objects that constitute the goal of an action."
    }

    class "_class_CounterfactualBinding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CounterfactualBinding"
        string rdf:definition = """CounterfactualBindings are used to express conditions:

-- that two roles share a filler (RoleRoleBindings);
-- that the filler of a role is a particular entity (RoleFillerBindings). This is typically the case when the filler of the role may be one of a few constants, as is the case with the execution status of a robot task.

TODO: for the robot workflows we are likely to need at the start, testing equality of fillers is enough. In the future, we may want to replace that with unifiability of fillers."""
    }

    class "_class_FactualBinding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FactualBinding"
        string rdf:definition = """FactualBindings are used in a workflow to assert that:

-- task- or workflow-defined roles share fillers (RoleRoleBindings). Example, the instrument of a cutting task may be the actee of a grasping task;
-- task- or workflow-defined roles are filled by a particular entity (RoleFillerBindings). This is typically the case when roles, and especially parameters, can be assigned to constants. Example, the waiting time to cook soft eggs is 3 minutes."""
    }

    class "_class_RoleFillerBinding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RoleFillerBinding"
        string rdf:definition = "A binding that connects a role to a particular filler."
    }

    class "_class_RoleRoleBinding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RoleRoleBinding"
        string rdf:definition = "A binding that asserts that two roles have the same filler."
    }

    class "_class_Blockage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Blockage"
        string rdf:definition = "The disposition of an object (the barrier) to prevent others from accessing, leaving, or seeing a restricted space, or group."
    }

    class "_class_BlockedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BlockedObject"
        string rdf:definition = "An object that is blocked from accessing something."
    }

    class "_class_BodyMovement" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BodyMovement"
        string rdf:definition = """Motion described in terms of how parts of an Agent's body move.

As such, this concept can be applied only to motions involving some PhysicalAgent, or body parts of a PhysicalAgent."""
    }

    class "_class_Boiling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Boiling"
        string rdf:definition = "In each instance of this collection some liquid matter is raised to its boilingPoint and is thereby changed from being in the Liquid-StateOfMatter to being in the Gaseous-StateOfMatter."
    }

    class "_class_Vaporizing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Vaporizing"
        string rdf:definition = "Some material transitions from a liquid to a gaseous phase."
    }

    class "_class_BoxShape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BoxShape"
        string rdf:definition = "A symmetrical shape, either solid or hollow, contained by six rectangles."
    }

    class "_class_Cutter" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cutter"
        string rdf:definition = "A role to classify an object used to cut other objects. Usually should poses sharpness as a quality. Execptions are not considered in this context. Such as a wind, water, or other natural agents cutting(eroding) the rocks."
    }

    class "_class_CutObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CutObject"
        string rdf:definition = "An object being cut down into pieces."
    }

    class "_class_Capability" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Capability"
        string rdf:definition = "Capability"
    }

    class "_class_Capacity" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Capacity"
        string rdf:definition = "The maximum amount an object can contain."
    }

    class "_class_Intrinsic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Intrinsic"
        string rdf:definition = "A physical quality that is independent of context."
    }

    class "_class_Catching" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Catching"
        string rdf:definition = "A task by which an Agent stops a moving object and gains kinematic control over it, usually by grasping."
    }

    class "_class_CausalEventRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CausalEventRole"
        string rdf:definition = '''A role filled by a description of some action or process that brings about a motion.

As an example, consider the utterance "the tennisman served the ball by hitting it with the racket." In this utterance, the filler of the CausalEventRole is expressed by the "by hitting it with the racket" constituent.'''
    }

    class "_class_CausedMotionTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CausedMotionTheory"
        string rdf:definition = '''A schematic theory describing a situation in which an agent performs an action which causes an object to move along a certain path. A popular example being "He sneezed the napkin off the table." (Goldberg 1995)

Let xA, xP be objects filling the agent, patient roles of this schema. Then one can infer that xA movesObject xP.'''
    }

    class "_class_ImageSchemaTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ImageSchemaTheory"
        string rdf:definition = """A theory that describes an image-schematic relationship between some entities.

Image schemas are considered as fundamental, pre-conceptual, building blocks of cognition. They were introduced to characterize how human beings are believed to organize and make sense of experience.

For SOMA, whereas the focus of executable schematic theories is to describe how an agent might act, image schematic theories focus on descriptions of how objects behave in the absence of, or after, an active intervention from an agent."""
    }

    class "_class_PerformerRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PerformerRole"
        string rdf:definition = """A role classifying an Agent responsible for performing an Action.

The entity playing an PerformerRole is endowed with sentience and the capacity to deliberately choose actions in pursuit of goals. This distinguishes Agents from other causes that could bring an event about."""
    }

    class "_class_SourcePathGoalTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SourcePathGoalTheory"
        string rdf:definition = """A very general image-schema of the Path family, this schema describes movement along a path from a source towards a goal.

Note: in cognitive linguistics literature, the roles of this schema are Source, Path, Goal. However, to avoid overloading some other terminology in SOMA, we renamed Source to Origin and Goal to Destination.

As yet, this schema is not associated to any object property."""
    }

    class "_class_Channel" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Channel"
        string rdf:definition = "A Channel in a Communication Task is the path of travel by a Message, e.g., via WLAN, air (in the case of a Message classifying soundwaves) or a telephone cable."
    }

    class "_class_PathRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PathRole"
        string rdf:definition = "A role that classifies the path of a motion."
    }

    class "_class_CommunicationTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CommunicationTask"
        string rdf:definition = """A Task in which two or more Agents exchange information. A CommunicationTask classifies only Events that have only Agents and Social objects as participants.

Of course, the means of exchange is Physical, however this concept is to classify events for which we are not interested in the physical substrate, but rather who communicated and what the information content was."""
    }

    class "_class_CheckingObjectPresence" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CheckingObjectPresence"
        string rdf:definition = "A task by which an Agent uses its sensors to check for the presence of a specific object and to obtain some other information about it, e.g. pose."
    }

    class "_class_ChemicalProcess" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ChemicalProcess"
        string rdf:definition = """A process by which the chemical constituency of an Entity or set of Entities changes.

In some sense any process that results in entities being created or destroyed might trivially fit here, however this concept is intended specifically for Events where the occuring chemical reactions are of importance."""
    }

    class "_class_Choice" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Choice"
        string rdf:definition = "The output of a, e.g, Selecting Task."
    }

    class "_class_CircularCylinder" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CircularCylinder"
        string rdf:definition = "A cylinder figure with circular cross section."
    }

    class "_class_CylinderShape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CylinderShape"
        string rdf:definition = "A solid geometrical figure with straight parallel sides and a circular or oval cross section."
    }

    class "_class_Classifier" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Classifier"
    }

    class "_class_StatisticalReasoner" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StatisticalReasoner"
    }

    class "_class_ClausalObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ClausalObject"
        string rdf:definition = "A clause is a phrase containing a subject and a predicate."
    }

    class "_class_Phrase" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Phrase"
    }

    class "_class_Clean" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Clean"
        string rdf:definition = "A cleanliness region with values considered as clean."
    }

    class "_class_CleanlinessRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CleanlinessRegion"
        string rdf:definition = "Encodes the cleanliness of an object."
    }

    class "_class_ModifyingPhysicalObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ModifyingPhysicalObject"
        string rdf:definition = "Superconcept for tasks that involve affecting some state that an object is in (e.g. where it is located), without creating or destroying the object."
    }

    class "_class_Cleanliness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cleanliness"
        string rdf:definition = "The quality of being clean."
    }

    class "_class_SocialQuality" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SocialQuality"
        string rdf:definition = "Any aspect of an entity that specifies social characteristics."
    }

    class "_class_ClientServer_Specification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Client-Server_Specification"
        string rdf:definition = """An API Secification that describes the well known Client-Server pattern:

The Client-server model is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients Often clients and servers communicate over a computer network on separate hardware, but both client and server may reside in the same system. A server host runs one or more server programs, which share their resources with clients. A client usually does not share any of its resources, but it requests content or service from a server. Clients, therefore, initiate communication sessions with servers, which await incoming requests. Examples of computer applications that use the client-server model are email, network printing, and the World Wide Web.

Source: https://en.wikipedia.org/wiki/Client%E2%80%93server_model"""
    }

    class "_class_ClientRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ClientRole"
        string rdf:definition = """The Client-server model is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients Often clients and servers communicate over a computer network on separate hardware, but both client and server may reside in the same system. A server host runs one or more server programs, which share their resources with clients. A client usually does not share any of its resources, but it requests content or service from a server. Clients, therefore, initiate communication sessions with servers, which await incoming requests. Examples of computer applications that use the client-server model are email, network printing, and the World Wide Web.

Source: https://en.wikipedia.org/wiki/Client%E2%80%93server_model"""
    }

    class "_class_ServerRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ServerRole"
        string rdf:definition = """The Client-server model is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients Often clients and servers communicate over a computer network on separate hardware, but both client and server may reside in the same system. A server host runs one or more server programs, which share their resources with clients. A client usually does not share any of its resources, but it requests content or service from a server. Clients, therefore, initiate communication sessions with servers, which await incoming requests. Examples of computer applications that use the client-server model are email, network printing, and the World Wide Web.

Source: https://en.wikipedia.org/wiki/Client%E2%80%93server_model"""
    }

    class "_class_InterfaceComponentRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InterfaceComponentRole"
    }

    class "_class_Squeezing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Squeezing"
        string rdf:definition = "A task in which an Agent applies pressure to an object they have in their grasp."
    }

    class "_class_Clumsiness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Clumsiness"
        string rdf:definition = "A description of clumsy behavior."
    }

    class "_class_CognitiveAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CognitiveAgent"
        string rdf:definition = "An agent that is capable to act on its own, in contrast to sub-cognitive Agents, that need to have their intentionality bestowed upon some other agent."
    }

    class "_class_SubCognitiveAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SubCognitiveAgent"
        string rdf:definition = "An agent that is not capable to act on its own, i.e., that is reactive. Its intentionality needs to be bestowed upon from some other agent, that it acts for."
    }

    class "_class_Collision" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Collision"
        string rdf:definition = "A contact event of objects bumping into each other such that their movement is affected."
    }

    class "_class_Extrinsic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Extrinsic"
        string rdf:definition = "A physical quality that depends on relationships to other objects, such as the color of an object which depends on light conditions in the environment."
    }

    class "_class_ImperativeClause" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ImperativeClause"
        string rdf:definition = "A clause which commands some agent to perform a task or bring about a state of affairs."
    }

    class "_class_CommitedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CommitedObject"
        string rdf:definition = "An object committed to a bigger whole. After being committed, the object does not exist anymore in its old form."
    }

    class "_class_ConnectedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ConnectedObject"
        string rdf:definition = "An object that is combined with another object."
    }

    class "_class_CommunicationAction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CommunicationAction"
        string rdf:definition = "An action in which an Agent uses some actuator for communication purposes."
    }

    class "_class_LinguisticObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LinguisticObject"
    }

    class "_class_CommunicationReport" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CommunicationReport"
        string rdf:definition = "A task in which an Agent endeavors to describe truthfully some state of affairs."
    }

    class "_class_Receiver" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Receiver"
        string rdf:definition = "The role played by an Agent in a Communication Task that perceives and interpretes some incoming Message."
    }

    class "_class_Sender" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Sender"
        string rdf:definition = "The Role played by an Agent in a Communication Task that emits some Information Realization with the purpose of percipience by some Receiver."
    }

    class "_class_Composing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Composing"
        string rdf:definition = "The disposition of an object (the tool) to change the compositional structure of others."
    }

    class "_class_Computer_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Computer_Language"
        string rdf:definition = """A computer language is a formal language used in communication with a computer.

From Wikipedia: https://en.wikipedia.org/wiki/Computer_language"""
    }

    class "_class_FormalLanguage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FormalLanguage"
        string rdf:definition = """A Formal Language consists of words whose letters are taken from an alphabet and are well-formed according to a specific set of rules.

From Wikipedia: https://en.wikipedia.org/wiki/Formal_language"""
    }

    class "_class_Computer_Program" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Computer_Program"
        string rdf:definition = "The Program itself (the specific set of instruction in a Programming Language), not the file that it is contained in nor the implemented algorithm!"
    }

    class "_class_Programming_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Programming_Language"
        string rdf:definition = "Any Programming Language, including both human-readable like Java and non-human-readable languages like binary machine code."
    }

    class "_class_Conclusion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Conclusion"
        string rdf:definition = "An object that is derived from some premise using some inference rules."
    }

    class "_class_CreatedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CreatedObject"
        string rdf:definition = "An object that is created."
    }

    class "_class_Knowledge" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Knowledge"
    }

    class "_class_ConditionalSuccedence" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ConditionalSuccedence"
        string rdf:definition = """A relation that holds between two OGPTasks that belong to the same OGPWorkflow, and which means that, if a condition is met, the successor task invocation is to be executed after the predecessor task invocation completes.

The condition is a conjunction of CounterfactualBindings. These bindings may be RoleRoleBindings (meaning, test whether the fillers for these Roles/Parameters are the same) or RoleFillerBindings (meaning, test whether the filler of the Role unifies with the candidate Entity).

An empty conjunction of CounterfactualBindings is assumed to be True."""
    }

    class "_class_Configuration" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Configuration"
        string rdf:definition = """A description of a State. This includes e.g. what acceptable regions for participant objects of the State might look like.
A configuration of the world is construed to be stable on its own. Outside disturbances may cause state transitions, and the settling into some other, self-stable configuration.

Several other Description subclasses may function as Configurations. For example, a Goal is a description of a desired State. A Norm describes a State that should be maintained. A Diagnosis describes a State that causes certain symptoms etc.

Note a couple of issues here. First one relates to what \"configuration\" means; in particular, this doesn't mean a configuration that is unchanging according to any viewpoint. The analogy here is the \"macrostate\" from thermodynamics: a macrostate with two gases mixed does not mean all gas particles are motionless, but rather that the locations and movements of gas particles are such that any particle is likely to have as many neighbors of one type as the other.

The second issue relates to what is \"outside\". The state is a configuration of some, but not necessarily all, Entities in the world. Entities not in this configuration are outside of it."""
    }

    class "_class_ContactState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ContactState"
        string rdf:definition = "Classifies States in which some objects are in contact."
    }

    class "_class_Container" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Container"
        string rdf:definition = "A role classifying an object used to contain others."
    }

    class "_class_IncludedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "IncludedObject"
        string rdf:definition = "An object that is contained in something. This is meant very general and includes, e.g., elements contained in a set, or things that are spatially contained within the boundaries of some object."
    }

    class "_class_ContainmentState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ContainmentState"
        string rdf:definition = "Classifies States in which an object is kept inside another object."
    }

    class "_class_FunctionalControl" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FunctionalControl"
        string rdf:definition = """Classifies States in which an object restricts the movement of another, at least partially. Usually neither object is construed to be an agent.

Note that this State focuses on how the interaction of, usually non-agentive, objects restricts their motion. This is in contrast to Blockage/Accessibility states where the placement of some objects influences the access to some of them by a third, usually agentive party."""
    }

    class "_class_ContainmentTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ContainmentTheory"
        string rdf:definition = """A schematic theory that describes a functional relation which ensures that the location of some entity, the locatum, is constrained to be within some region which is the interior of some other entity, the relatum.

This is also known as FunctionalControlInternal in GUM-4-space (Bateman et al. 2010).

Let xL, xR be objects filling the locatum, relatum roles of this schema. Then one can infer that xL isInsideOf xR."""
    }

    class "_class_ControlTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ControlTheory"
        string rdf:definition = """A description of functional-spatial configurations where one object controls another object's position in space, e.g. if a pot moves, then the popcorn contained therein moves, as well. Note that the objects do not need to be in direct contact.

Adopted from GUM-4-space (Bateman et al. 2010)."""
    }

    class "_class_ContinuousJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ContinuousJoint"
        string rdf:definition = "A continuous hinge joint that rotates around an axis and has no upper and lower limits."
    }

    class "_class_HingeJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HingeJoint"
        string rdf:definition = "A joint that rotates along an axis."
    }

    class "_class_FunctionalSpatialSchemaTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FunctionalSpatialSchemaTheory"
        string rdf:definition = """The superclass for theories describing functional spatial relations.

Adopted from GUM-4-space (Bateman et al. 2010)."""
    }

    class "_class_Cover" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cover"
        string rdf:definition = "An object used to cover up others, such as a lid used as a cover for a pot."
    }

    class "_class_Coverage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Coverage"
        string rdf:definition = "The disposition of an object (the cover) to hide or to protect objects by covering them. An example is a door that covers items in a container to e.g. prevent dust getting inside of the container."
    }

    class "_class_CoveredObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CoveredObject"
        string rdf:definition = "An object that is covered."
    }

    class "_class_CoverageTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CoverageTheory"
        string rdf:definition = """A schematic theory of a functional relation between two objects such that one of them, the locatum, blocks access to the interior of the relatum.

Let xL, xR be objects filling the locatum, relatum roles of this schema. Then one can infer that xL coversObject xR."""
    }

    class "_class_CoveringTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CoveringTheory"
        string rdf:definition = "A schematic theory of how an agent can use an instrument to prevent access to the interior of a patient."
    }

    class "_class_ExecutableSchematicTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExecutableSchematicTheory"
        string rdf:definition = """Also known as \"executing schemas\" or \"x-schemas\", these were defined by Bergen and Chang in their work \"Embodied Construction Grammar in Simulation-Based Language Understanding\" as:

\"Executing schemas, or x-schemas, are dynamic representations motivated in part by motor and perceptual systems (Bailey 1997; Narayanan 1997), on the assumption that the same underlying representations used for executing and perceiving an action are brought to bear in understanding language about that action. The x-schema formalism is an extension of Petri nets (Murata 1989) that can model sequential, concurrent, and
asynchronous events\"

SOMA does not restrict the formalism of ExecutableSchematicTheories; i.e. they don't have to be Petri Nets.

They maintain their role however as representations able to drive a simulation, at some level of abstraction, of an embodied action. This level of abstraction may be still fairly underspecified as in the case of the original x-schemas and as such not a plan that an agent could run in an actual physical environment without further information."""
    }

    class "_class_CrackingTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CrackingTheory"
        string rdf:definition = "A schematic theory of how an agent can inflict damage to the surface of an object."
    }

    class "_class_Creation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Creation"
        string rdf:definition = """A process by which an Entity is created in the physical world.

Note, most of the physical Entities we will be considering here are in fact arrangements of many other, smaller physical Entities. Therefore another way to look at this is, a 'Physical creation' is the process by which a set of physical Entities is arranged in a certain way, and the arrangement is then itself considered a physical Entity."""
    }

    class "_class_Tool" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Tool"
        string rdf:definition = "A role to classify an object used to modify or actuate others."
    }

    class "_class_Database" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Database"
        string rdf:definition = """A Database is a Software that organizes a collection of data stored and and allows for access, usually via some query engine.

Source: https://en.wikipedia.org/wiki/Database"""
    }

    class "_class_SoftwareRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SoftwareRole"
        string rdf:definition = "A Software Role is a Role applying to only Software and encoding the purpose of the Software: Its Role within Interface Patterns (e.g. Client vs. Server), its functionality (e.g. Database vs. Comnputer Game), and so on."
    }

    class "_class_Deciding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Deciding"
    }

    class "_class_DerivingInformation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DerivingInformation"
    }

    class "_class_DeductiveReasoning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DeductiveReasoning"
        string rdf:definition = '''A task in which the Agent, using general logical principles that it considers logically valid, applied to premises that it considers logically true, arrives at conclusions that it considers logically certain.

Deduction is often explained as starting from the "general" (some property X is known about all members of a set S), applying it to the "specific" (some Entity Y is known to belong to set S), to arrive at a specialization of the general property (X applies to Y).'''
    }

    class "_class_Deformation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Deformation"
        string rdf:definition = """A process by which a physical Entity changes its shape under the influence of some factors outside of the Entity.

Note, changes of shape may be self-caused; for example, a gas will naturally disperse. This however would be a different type of process (Dispersion).

A soft slab of clay deforming under its own weight on Earth would still count as deformation: it is the gravity of the Earth (so, a factor outside the slab of clay) which makes the slab change shape."""
    }

    class "_class_ShapedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ShapedObject"
        string rdf:definition = "An object undergoing shape change."
    }

    class "_class_FluidFlow" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FluidFlow"
        string rdf:definition = """A process by which a fluid moves or is moved from a location to another, but such that it maintains its constitution. A fluid is an Entity made of many smaller Entities, loosely bound to each other.

An issue to highlight here is the maintenance of constitution. Fluids-- gases in particular-- are prone to disperse. Such a process is not flow however, because the loose bounds between the constituents become even looser, to the point of the original Entity becoming entirely discombobulated. """
    }

    class "_class_Shifting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Shifting"
        string rdf:definition = "The disposition of an object (the tool) to change the localization of others."
    }

    class "_class_DependentPlace" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DependentPlace"
        string rdf:definition = "A feature that is not part of its host, like a hole in a piece of cheese."
    }

    class "_class_Deposit" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Deposit"
        string rdf:definition = "A role classifying an object ontop which others are put to e.g. store them, or to place them in a meaningful way for future activities."
    }

    class "_class_DepositedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DepositedObject"
        string rdf:definition = "An object placed ontop of another one."
    }

    class "_class_Deposition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Deposition"
        string rdf:definition = "The disposition to support objects."
    }

    class "_class_InformationAcquisition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InformationAcquisition"
        string rdf:definition = '''A mental task in which the executing agent acquires some information that was not immediately available to it before.
A synonym might be "Thinking".

Examples include recalling knowledge or inferring some information from other information.'''
    }

    class "_class_Premise" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Premise"
        string rdf:definition = "The role of an object that is used to infer some conclusion via some inference rules."
    }

    class "_class_DesignedTool" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedTool"
        string rdf:definition = "An item designed to enable some action, in which it will play an instrumental role."
    }

    class "_class_DestroyedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DestroyedObject"
        string rdf:definition = "An object that is detroyed."
    }

    class "_class_Destruction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Destruction"
        string rdf:definition = """A process by which a physical Entity is destroyed.

Note, most of the physical Entities we are concerned with are actually arrangements of many smaller physical Entities, so another way to look at this is that a 'Physical destruction' is a process by which an arrangement of physical Entities, which was previously itself considered a physical Entity, is changed to such an extent that it is no longer recognized as continuing to exist."""
    }

    class "_class_DetectedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DetectedObject"
        string rdf:definition = "An object that is detected."
    }

    class "_class_DeviceState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DeviceState"
        string rdf:definition = "A quality belonging to a device which indicates its overall functional state."
    }

    class "_class_DeviceStateRange" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DeviceStateRange"
        string rdf:definition = "This class defines the values that a device state can take."
    }

    class "_class_DeviceTurnedOff" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DeviceTurnedOff"
        string rdf:definition = "A value indicating a device is not in operation."
    }

    class "_class_DeviceTurnedOn" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DeviceTurnedOn"
        string rdf:definition = "A value indicating a device is in operation."
    }

    class "_class_DirectedMotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DirectedMotion"
        string rdf:definition = "A Motion that is considered to be toward a location or along a path. It is not important that the final location or path be the intention of some Agent, but it is considered that the important feature of this Motion is that it has a path and/or destination."
    }

    class "_class_UndirectedMotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "UndirectedMotion"
        string rdf:definition = "A Motion of a physical Entity for which a destination or path are unknown and/or considered irrelevant; the important aspect about this Motion is simply that it occurs, rather than where it is headed or how it proceeds towards it."
    }

    class "_class_Dirty" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dirty"
        string rdf:definition = "A cleanliness region with values considered as dirty."
    }

    class "_class_Discourse" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Discourse"
        string rdf:definition = "A mental task, in which two or more agents discuss some topic via multiple Illocutionary acts, which are part of this task."
    }

    class "_class_Distancing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Distancing"
        string rdf:definition = "A task in which an Agent increases its distance from some location."
    }

    class "_class_Dreaming" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dreaming"
        string rdf:definition = "Any form of re-processing episodic memories for long-term memory by natural or aritifical agents."
    }

    class "_class_Driving" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Driving"
        string rdf:definition = "A process type classifying a motion of a body that exists because this body is attached to and controls some other moving body, usually a vehicle."
    }

    class "_class_Flying" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Flying"
        string rdf:definition = "A process type classifying a motion of a body that, through its own power, keeps itself aloft."
    }

    class "_class_Swimming" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Swimming"
        string rdf:definition = "A motion of some body through water. The body provides the power for the motion."
    }

    class "_class_Walking" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Walking"
        string rdf:definition = "An agent, under its own power, moves over some solid surface."
    }

    class "_class_ESTSchemaTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ESTSchemaTheory"
        string rdf:definition = """A schematic theory that describes the existence of an entity.

Developmental psychology posits that \"object permanence\" (the assumption that physical objects keep existing even when the agent doesn't perceive them, which consequently informs reasoning about where an object should be, even when perception of it is lost) is a cognitive ability that is not, at least in the very young human child, immediately manifest. Rather, it seems learned via interaction, and usually is among an infant's cognitive repertoire by age 2.

In SOMA, we represent this ability of a cognitive agent as an ability to generate and maintain ESTSchemaTheories. Each instance of such a theory refers to one particular physical object, the one that the instance of the ESTSchemaTheory asserts to exist.

Because each instance of an ESTSchemaTheory refers to a single object, ESTSchemaTheories are not associated to any relation between OWL individuals."""
    }

    class "_class_ExistingObjectRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExistingObjectRole"
        string rdf:definition = """A role that requires of its filler simply to exist, unlike other roles that may demand e.g. agentive or instrumental participation in some executable schema or plan (AgentRole and Instrument respectively).

The intention behind such a simple role is to have a way to represent, in a schematic formalism used to describe some scene, that an object is present. In particular, the schema used to convey this information is the ESTSchemaTheory, which has ExistingObjectRole as its sole defined role."""
    }

    class "_class_Effort" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Effort"
        string rdf:definition = "A parameter describing the amount of force to be exerted by some actuator."
    }

    class "_class_EnclosedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "EnclosedObject"
        string rdf:definition = "An object included within the spatial boundaries of another object."
    }

    class "_class_EndEffectorPositioning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "EndEffectorPositioning"
        string rdf:definition = "A task in which an Agent places its end effectors at particular poses."
    }

    class "_class_Manipulating" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Manipulating"
        string rdf:definition = '''Tasks where the goal is to move the prehensile effectors, ie. hands, of an agent so as to achieve some spatial or functional relation with some manipulated object. 

Spatial relations refer to positioning the hands in certain ways relative to the manipulated object, for example nearing or distancing them, or aligning them with some relevant axis.

Functional relations here refer to interactions between the hands and manipulated object which constrain the possible behavior of the object. Examples of functional relations in manipulation are support and kinematic control.

Note that manipulation tasks are usually performed with the intention of moving an object in some way, so there is a large conceptual overlap between Manipulating and Actuating.

However these concepts are nonetheless distinguished in what they "profile", ie. what they focus on as particularly important.

Actuating profiles the movement of the object itself.

Manipulating profiles the movement of the hands and the functional relations, such as kinematic control, they establish with the manipulated object.

Note: we employ Manipulating here in its literal, original sense, of using hands for some purpose, and not in the metaphorical sense of exerting psychological pressure on someone.'''
    }

    class "_class_Episode" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Episode"
        string rdf:definition = ""
    }

    class "_class_ExcludedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExcludedObject"
        string rdf:definition = "An object that is not contained in something. This is meant very general and includes, e.g., elements excluded from a set, or things that are spatially excluded from the boundaries of some object."
    }

    class "_class_ExecutableFile" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExecutableFile"
        string rdf:definition = '''An Executable File, sometimes simply referred to as an executable or binary, causes a computer "to perform indicated tasks according to encoded instructions", as opposed to a data file that must be interpreted (parsed) by a program to be meaningful.

The exact interpretation depends upon the use. "Instructions" is traditionally taken to mean machine code instructions for a physical CPU. In some contexts, a file containing scripting instructions (such as bytecode) may also be considered executable.'''
    }

    class "_class_Executable_Code" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Executable_Code"
        string rdf:definition = "Executable Code is Code that when compiled / interpreted, has some clear entrance point and can be executed. Note the difference to an Executable File, which is the file that contains such (compiled) code."
    }

    class "_class_ExecutableFormat" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExecutableFormat"
        string rdf:definition = "An Executable Format is a File Format that allows computers to directly execute the content. Examples are MZ (DOS) or COFF."
    }

    class "_class_SchematicTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SchematicTheory"
        string rdf:definition = """A theory used to describe, analyze, and reason with the meaning of a linguistic message.

Note that such theories are useful both when analyzing an actual linguistic production, and when creating a linguistic production to describe some observed experience."""
    }

    class "_class_ExecutableSoftware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExecutableSoftware"
        string rdf:definition = "Executable Software is Software that can directly be executed, in comparison to a Software Library, which might only contain functionality via interfaces, but offers no execution entry point."
    }

    class "_class_Software" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Software"
    }

    class "_class_RelationAdjacentRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RelationAdjacentRole"
        string rdf:definition = "A role classifying an object participating in some relation, e.g. a participant in a spatial relation or a linguistic fragment in a rhetorical relation to another."
    }

    class "_class_ExtractedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExtractedObject"
        string rdf:definition = "An object that is removed from a container or system."
    }

    class "_class_PhysicalQuality" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalQuality"
        string rdf:definition = "Any aspect of an entity that is dependent on its physical manifestation."
    }

    class "_class_FailedAttempt" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FailedAttempt"
        string rdf:definition = "A description of a failed attempt to achieve some goal."
    }

    class "_class_Unsuccessfulness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Unsuccessfulness"
        string rdf:definition = "A description of a situation with a goal that was not or not fully achieved by some system."
    }

    class "_class_FaultySoftware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FaultySoftware"
        string rdf:definition = "A description of a situation where some software has a bug."
    }

    class "_class_SoftwareDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SoftwareDiagnosis"
        string rdf:definition = "A diagnosis of the software of a system."
    }

    class "_class_PhysicalAcquiring" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalAcquiring"
        string rdf:definition = """The goal of this task is to make some object usable for other tasks, by possibly changing its physical state. Usually, it overlaps some task that describes the manner in which an object is obtained.

The prototypical example of PhysicalAcquiring is picking up an object.

Note that buying an object is NOT PhysicalAcquiring. Buying, or ownership transfer in general, also involves an adjustment in social structures describing ownership."""
    }

    class "_class_Finger" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Finger"
        string rdf:definition = "A limb used for grasping objects."
    }

    class "_class_Hand" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Hand"
        string rdf:definition = "A prehensile effector including palm, fingers, and thumb."
    }

    class "_class_FixedJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FixedJoint"
        string rdf:definition = "A joint that cannot move, designed to fixiate links."
    }

    class "_class_MovableJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MovableJoint"
        string rdf:definition = "A joint where the two connected links can move relative to each other in some dimension."
    }

    class "_class_FloatingJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FloatingJoint"
        string rdf:definition = "A joint that allows motion for all 6 degrees of freedom."
    }

    class "_class_MovedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MovedObject"
        string rdf:definition = "An object undergoing location change."
    }

    class "_class_Focusing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Focusing"
        string rdf:definition = "The mental task to center the attention to some subject."
    }

    class "_class_Foolishness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Foolishness"
        string rdf:definition = "A description of foolish behavior."
    }

    class "_class_ForgettingIncorrectInformation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ForgettingIncorrectInformation"
        string rdf:definition = "A mental task in which the executing agent aims to correct its present information by deleting an incorrect information."
    }

    class "_class_InformationDismissal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InformationDismissal"
        string rdf:definition = """A mental task in which the executing agent dismisses some information.

An example is forgetting some knowledge."""
    }

    class "_class_ForgettingIrrelevantInformation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ForgettingIrrelevantInformation"
        string rdf:definition = "A mental task in which the executing agent aims to clean up its present information by deleting an irrelevant information."
    }

    class "_class_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Language"
        string rdf:definition = """A Language is a structured System for communication.

From Wikipedia: https://en.wikipedia.org/wiki/Language"""
    }

    class "_class_Item" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Item"
        string rdf:definition = "A role played by a non-agentive object operated on by an action."
    }

    class "_class_FunctionalDesign" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FunctionalDesign"
        string rdf:definition = "The design of an object from functionality point of view. A functional design is useful to develop complex modular objects with components that have a specific purpose, and can function with minimum side effect on other components of that object. "
    }

    class "_class_FunctionalDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FunctionalDiagnosis"
        string rdf:definition = "An internal diagnosis of a system."
    }

    class "_class_LocatumRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LocatumRole"
        string rdf:definition = "Denotes the object with primary focal prominence in a spatial or spatio-temporal schema. Terminological variants that appear in the literature on cognitive linguistics include Figure (Talmy 1983) and Trajector (Langacker 1986)."
    }

    class "_class_RelatumRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RelatumRole"
        string rdf:definition = "Denotes the reference object in a spatial or spatio-temporal schema, i.e. the object with secondary focal prominence. Terminological variants: Ground (Talmy 1983), Landmark (Langacker 1986)."
    }

    class "_class_GetTaskParameter" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GetTaskParameter"
        string rdf:definition = "A task in which an Agent computes some parameter relevant for another task."
    }

    class "_class_Planning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Planning"
        string rdf:definition = "A Mental task in which the Agent endeavours to create a sequence of actions for itself which, if followed, will bring about a particular state of affairs in the world. This particular state of affairs is known to the agent and is often called the goal state of the planning action. Planning commits itself to feasibility: the Agent attempts to find a sequence of actions that it believes it will actually be able to perform."
    }

    class "_class_GraphDatabase" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GraphDatabase"
        string rdf:definition = "A Graph Database is a Database that uses graph structures for semantic queries with nodes, edges, and properties to represent and store data."
    }

    class "_class_GraphQueryLanguage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GraphQueryLanguage"
        string rdf:definition = "A Query Language that is designed for communication with some Graph Database."
    }

    class "_class_QueryLanguage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "QueryLanguage"
        string rdf:definition = '''Query languages, are Computer languages used to make queries in databases and information systems (Source: https://en.wikipedia.org/wiki/Query_language).

Note that despite their name, Query languages typically come with syntax and semantic to not only ask for information, but also provide them, e.g., via SQL Update. In that sense, the term "query" from above refers to any formal object of information exchange with a database.'''
    }

    class "_class_GraspTransfer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GraspTransfer"
        string rdf:definition = "A task in which an Agent switches which of its end effectors holds an object."
    }

    class "_class_Releasing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Releasing"
        string rdf:definition = "A task in which an agent relinquishes its kinematic control over an object, typically by releasing it from its grasp."
    }

    class "_class_GraspingMotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GraspingMotion"
        string rdf:definition = "A process type classifying a motion by which some end effector acquires kinematic control over some other object."
    }

    class "_class_IntermediateGrasp" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "IntermediateGrasp"
        string rdf:definition = "A kind of grasp that acquires kinematic control over the gripped object, but without attempting to achieve either strong holding force nor precision of subsequent movement of the gripped object."
    }

    class "_class_PowerGrasp" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PowerGrasp"
        string rdf:definition = "An Agent grasps an object, and focuses on obtaining a strong grasping force upon it, resulting in a grasp able to resist significant outside disturbances. This is useful when using tools with which to later exert force on other things, e.g. when hammering nails."
    }

    class "_class_PrecisionGrasp" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PrecisionGrasp"
        string rdf:definition = "An Agent grasps an object, and focuses on obtaining precise kinematic control over it. This is useful for then following precise movements, e.g. when writing."
    }

    class "_class_PrehensileMotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PrehensileMotion"
        string rdf:definition = "A motion of a prehensile effector."
    }

    class "_class_ReleasingMotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ReleasingMotion"
        string rdf:definition = "A motion by which a prehensile effector relinquishes kinematic control over an object."
    }

    class "_class_GreenColor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GreenColor"
        string rdf:definition = "A color region with dominant green color."
    }

    class "_class_Gripper" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Gripper"
        string rdf:definition = "A mechanical device that grasps and holds things."
    }

    class "_class_PrehensileEffector" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PrehensileEffector"
        string rdf:definition = "An effector used to grasp objects, such as a hand of a human, or the long prehensile tail of a monkey."
    }

    class "_class_HardwareDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HardwareDiagnosis"
        string rdf:definition = "A diagnosis of the hardware of a system."
    }

    class "_class_TechnicalDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TechnicalDiagnosis"
        string rdf:definition = "A functional diagnosis of a technical system."
    }

    class "_class_HasQualityRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HasQualityRegion"
        string rdf:definition = "The relation between an individual quality and a region."
    }

    class "_class_Head" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Head"
        string rdf:definition = "A functional part of the body responsible for carrying high bandwidth sensors, i.e., camera."
    }

    class "_class_HeadMovement" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HeadMovement"
        string rdf:definition = "The Agent moves a part of their body carrying high-bandwidth sensors such as cameras. The movement of other body parts is not significant."
    }

    class "_class_HeadTurning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HeadTurning"
        string rdf:definition = "A process type classifying a motion of an Agent's head such that the direction this head faces changes relative to the facing direction of the Agent's body as a whole."
    }

    class "_class_Holding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Holding"
        string rdf:definition = "A task by which an Agent keeps an object over which it has kinematic control, typically via grasping, at some specified pose."
    }

    class "_class_HostRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HostRole"
        string rdf:definition = """In the Plug-in-Host pattern, a Host application provides services which the Plug-in can use, including a way for Plug-ins to register themselves with the Host application and a protocol for the exchange of data withPplug-ins. Plug-ins depend on the services provided by the host application and do not usually work by themselves. Conversely, the host application operates independently of the plug-ins, making it possible for end-users to add and update plug-ins dynamically without needing to make changes to the host application.

Source: https://en.wikipedia.org/wiki/Plug-in_(computing)"""
    }

    class "_class_PluginSpecification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PluginSpecification"
        string rdf:definition = "The Specification of a Plugin interface defines how a Host and a Plug-in function together and exchange information."
    }

    class "_class_Humanreadable_Programming_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Human-readable_Programming_Language"
        string rdf:definition = "A Programming language like Java, Python etc. but not binary machine code."
    }

    class "_class_Source_Code" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Source_Code"
        string rdf:definition = "The Source Code itself (the specific set of instruction in a human-readable Programming Language), not the file that it is contained in nor the implemented algorithm!"
    }

    class "_class_HumanActivityRecording" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HumanActivityRecording"
        string rdf:definition = "An episode in which one or more human beings perform an activity and are recorded doing so."
    }

    class "_class_RecordedEpisode" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RecordedEpisode"
        string rdf:definition = "An episode which has been recorded."
    }

    class "_class_Imagining" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Imagining"
        string rdf:definition = "A Mental task in which the Agent constructs a mental representation of a possible world. An Agent performing an Imagining activity does not aim to construct a representation that aspires to be faithful to some past, present, or future state of affairs of the actual world it is embodied in."
    }

    class "_class_Impediment" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Impediment"
        string rdf:definition = "The disposition of an object (the obstacle) to prohibit certain ways of entering or leaving a space or group. An example is a doorstopper constraining a door, prohibiting it to enter the area behind it."
    }

    class "_class_Obstacle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Obstacle"
        string rdf:definition = "An object used to restrict access to a protected space or group."
    }

    class "_class_RestrictedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RestrictedObject"
        string rdf:definition = "An object with restrictions to access something."
    }

    class "_class_Inability" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Inability"
        string rdf:definition = "A description of a situation with a goal that some system is unable to achieve."
    }

    class "_class_IncompatibleSoftware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "IncompatibleSoftware"
        string rdf:definition = "A description of a situation where two software systems are incompatible with each other."
    }

    class "_class_InductiveReasoning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InductiveReasoning"
        string rdf:definition = '''A task in which the Agent endeavors to accumulate confidence in some general statement about the world, by gathering instances in which this general statement appears to apply. Note that perfect confidence can never be guaranteed by induction.

Induction is often described as a move from many "specifics" (swan A is white, swan B is white, swan C is white, ...) to the "general" (all swans are white).'''
    }

    class "_class_Infeasibility" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Infeasibility"
        string rdf:definition = "A description of a situation with a goal that is impossible to achieve in some situational context."
    }

    class "_class_InferenceRules" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InferenceRules"
        string rdf:definition = "The role of an object that is used to derive a conclusion from some premises."
    }

    class "_class_InformationRetrieval" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InformationRetrieval"
        string rdf:definition = """A mental task in which an Agent recalls some knowledge that has been memorized previously.

Examples include a human remembering some information or a computer retrieving knowledge from a database.

The difference to Remembering is that for this Task, we are concerned with knowledge about a previous world state. Memory Retrieval is more general in the sense that it also includes the retrieval of learned facts and rules."""
    }

    class "_class_InformationStorage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InformationStorage"
        string rdf:definition = """A mental task in which the executing agent persists some information for later recall, if necessary.

An example is learning new knowledge."""
    }

    class "_class_StoredObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StoredObject"
        string rdf:definition = "An object being stored into some other object, usually inside a container."
    }

    class "_class_InsertedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InsertedObject"
        string rdf:definition = "An object inserted into another object."
    }

    class "_class_Insertion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Insertion"
        string rdf:definition = "The disposition of an object (the container) to contain other objects that can be inserted into the container through a portal."
    }

    class "_class_Instructions" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Instructions"
        string rdf:definition = "The role of a plan to follow during an execution task."
    }

    class "_class_Interpreting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Interpreting"
        string rdf:definition = "A task in which an Agent interpretes some information, e.g., makes sense of some incoming message or its visible surroundings."
    }

    class "_class_InterrogativeClause" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InterrogativeClause"
        string rdf:definition = '''A clause which makes a request, typically information, of some agent.

Note that in a semantic sense such clauses always request information, but in a pragmatic sense they can be used to convey commands or requests for action, such as e.g. "can you close the door?" The question is not just a request for information about ability, but a request to perform a task.'''
    }

    class "_class_Introspecting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Introspecting"
        string rdf:definition = "A mentalk task in which an Agent gathers and processes information about its own mental tasks via, e.g., Meta Reasoning."
    }

    class "_class_KineticFrictionAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "KineticFrictionAttribute"
        string rdf:definition = "Friction that occurs when two touching objects are moving relative to each other."
    }

    class "_class_KinoDynamicData" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "KinoDynamicData"
        string rdf:definition = "An InformationObject containing data about how a physical object is put together such that its parts may move relative to each other, and what the physical characteristics of those parts are."
    }

    class "_class_KnowledgeRepresentationLanguage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "KnowledgeRepresentationLanguage"
        string rdf:definition = "A Knowledge Representation Language is a Language with fixed semantics and syntax to describe some knowledge. Examples are JSON and the different OWL Profiles."
    }

    class "_class_Labeling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Labeling"
    }

    class "_class_Text" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Text"
        string rdf:definition = """Any Information Object defined using a Language that, when realized through a symbolic writing system, can be read and made sense of.

One may define Text as anything that can be made sense of, including e.g., Speech or Paintings.

However, the argument can be made that Speech or Paintings are not considered Text as they cannot be EXACTLY realized by a symbolic writing system: Speech may loose punctuation, Paintings their original appearance.
On the other hand, this might not be true as both could be encoded in a binary format that can be interpreted using a language (eg., mp3, png)."""
    }

    class "_class_Leaning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Leaning"
        string rdf:definition = "An Agent pitches its body in some direction."
    }

    class "_class_PosturalMoving" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PosturalMoving"
        string rdf:definition = """The Agent changes or takes an overall configuration of its body but is otherwise not significantly affecting other objects nor moving a significant amount from its original location.

Posture changes may take place as part of other actions, for example turning when walking."""
    }

    class "_class_Learning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Learning"
        string rdf:definition = """The mental task of storing information for later use.

This is more general than memorizing, as the later only captures declarative knowledge."""
    }

    class "_class_Leg" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Leg"
        string rdf:definition = "A limb on which an agent walks or stands."
    }

    class "_class_LimbMotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LimbMotion"
        string rdf:definition = "An Agent moves its limbs in some way."
    }

    class "_class_LinkedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LinkedObject"
        string rdf:definition = "An object that is linked to some other object."
    }

    class "_class_LinkageState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LinkageState"
        string rdf:definition = "Classifies States in which two objects are in a rigid connection, such that the movement of one determines the movement of the other."
    }

    class "_class_SpatioTemporalRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SpatioTemporalRole"
        string rdf:definition = "Roles that classify entities which locate an event or object in space and time."
    }

    class "_class_SpatialRelationRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SpatialRelationRole"
        string rdf:definition = "Roles classifying entities participating in some spatial relation."
    }

    class "_class_LocutionaryAction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LocutionaryAction"
        string rdf:definition = """A Locutionary Act is the performance of an utterance (source: https://en.wikipedia.org/wiki/Locutionary_act).

We additionally require a Locutionary Act to be performed by an Agent, not an Actor - this is what sets it apart from a Communication Action."""
    }

    class "_class_LookingAt" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LookingAt"
        string rdf:definition = "better: Gazing"
    }

    class "_class_LookingFor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LookingFor"
        string rdf:definition = "A task by which an Agent uses its perception apparatus to check for the presence of an object in some specified area."
    }

    class "_class_Lowering" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Lowering"
        string rdf:definition = "A task in which an Agent reduces the elevation at which they hold an item."
    }

    class "_class_PhysicalAction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalAction"
        string rdf:definition = "An action performed by an agent by using its body in some way to interact with the physical world, e.g., through manipulation of objects, or by changing the posture."
    }

    class "_class_Markup_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Markup_Language"
        string rdf:definition = """Markup refers to data included in an electronic document which is distinct from the document's content in that it is typically not included in representations of the document for end users, for example on paper or a computer screen, or in an audio stream. Markup is often used to control the display of the document or to enrich its content to facilitate automated processing. A markup language is a set of rules governing what markup information may be included in a document and how it is combined with the content of the document in a way to facilitate use by humans and computer programs.

From Wikipedia: https://en.wikipedia.org/wiki/Markup_language"""
    }

    class "_class_Material" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Material"
        string rdf:definition = "The matter from which a thing is made."
    }

    class "_class_MedicalDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MedicalDiagnosis"
        string rdf:definition = "A functional diagnosis of an organism."
    }

    class "_class_Memorizing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Memorizing"
        string rdf:definition = """An atomic mental task in which an Agent saves some (declarative) information for later retrieval.

Examples include a student learning vocabularies or a computer saving some information to a database."""
    }

    class "_class_MentalAction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MentalAction"
        string rdf:definition = """An Event construed as the Agent participant affecting Entities that are representations of actual or potential Entities or Events in the physical world in which the Agent is embodied. These representations are maintained by the Agent participant in the 'Mental action' event.

One could argue Mental actions are all Physical actions, because anything the Agent may use to maintain such representations will be physical things, However, we make this distinction because for Mental actions it is less important to consider the physical support of the representation and how it changes, and more important to track how the information content of the representation changes."""
    }

    class "_class_MeshShape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MeshShape"
        string rdf:definition = "A solid geometrical figure described in a mesh file."
    }

    class "_class_MeshShapeData" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MeshShapeData"
        string rdf:definition = "An InformationObject containing data about the geometry of a physical object."
    }

    class "_class_MetaCognitionEvaluationTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MetaCognitionEvaluationTopic"
        string rdf:definition = "A topic used while an Agent describes its own cognitive processes and acions to evaluate them according to some metric."
    }

    class "_class_MetaCognitionTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MetaCognitionTopic"
        string rdf:definition = "A topic for a description that an Agent might make of its own cognitive processes and actions."
    }

    class "_class_MetaCognitionMemoryTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MetaCognitionMemoryTopic"
        string rdf:definition = "A topic used while an Agent describes its own cognitive processes and actions, and which covers descriptions of what memories are involved in them."
    }

    class "_class_MetaCognitionPlanningTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MetaCognitionPlanningTopic"
        string rdf:definition = "A topic used while an Agent describes the planning it does for its own cognitive processes and actions."
    }

    class "_class_ThinkAloudTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudTopic"
        string rdf:definition = "A topic relevant for a think-aloud communication."
    }

    class "_class_MetacognitiveControlling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MetacognitiveControlling"
        string rdf:definition = "The concious or subconcious task to control the own mental processes, e.g., evaluating them and instructing the own mind to shift attention."
    }

    class "_class_MetacognitiveMonitoring" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MetacognitiveMonitoring"
        string rdf:definition = "The task to label the processes and states of the own mind, e.g., to interprete the feeling of knowing an information but not being able to retrieve it at the moment as a tip-of-the-tongue event."
    }

    class "_class_MixingTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MixingTheory"
        string rdf:definition = "A schematic theory about how an agent can mix a fluid or particulate object."
    }

    class "_class_MonitoringJointState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MonitoringJointState"
        string rdf:definition = "A task in which the Agent keeps track of the physical state of its joints, e.g. their positions, velocities, efforts."
    }

    class "_class_Proprioceiving" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Proprioceiving"
        string rdf:definition = "A task in which the Agent gathers and interprets sensor information about itself."
    }

    class "_class_ProcessFlow" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ProcessFlow"
        string rdf:definition = "A description that structures a Process."
    }

    class "_class_PhysicsProcess" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicsProcess"
        string rdf:definition = "A process involving physical objects and phenomena which does not change the chemical constituency of the affected objects."
    }

    class "_class_MovingAway" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MovingAway"
        string rdf:definition = "A process type classifying a motion by which some Agent puts distance between itself and another object or location."
    }

    class "_class_MovingTo" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MovingTo"
        string rdf:definition = "A task in which an Agent moves towards a location."
    }

    class "_class_Natural_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Natural_Language"
        string rdf:definition = """A Natural Language is any language that has evolved naturally in humans through use and repetition without conscious planning or premeditation.

From Wikipedia: https://en.wikipedia.org/wiki/Natural_language"""
    }

    class "_class_Natural_Language_Text" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Natural_Language_Text"
        string rdf:definition = "A Text in a Natural Language."
    }

    class "_class_Ontology" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Ontology"
        string rdf:definition = """An ontology encompasses a representation, formal naming, and definition of the categories, properties, and relations between the concepts, data, and entities that substantiate one, many, or all domains of discourse. More simply, an ontology is a way of showing the properties of a subject area and how they are related, by defining a set of concepts and categories that represent the subject.

From Wikipedia: https://en.wikipedia.org/wiki/Ontology_(information_science)"""
    }

    class "_class_Ontology_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Ontology_Language"
        string rdf:definition = """An Ontology Language is a Knowledge Representation Language to describe knowledge about properties of a subject area and how they are related, by defining a set of concepts and categories that represent the subject using logic. Examples are the different OWL Profiles.

Source: https://en.wikipedia.org/wiki/Ontology_(information_science)"""
    }

    class "_class_Option" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Option"
        string rdf:definition = "The Role of objects that are used, e.g., in Selecting Tasks."
    }

    class "_class_Singleton" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Singleton"
        string rdf:definition = "A 'Set' that contains exactly one member."
    }

    class "_class_Orienting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Orienting"
        string rdf:definition = "A task in which an Agent adjusts the orientation of an object."
    }

    class "_class_Positioning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Positioning"
        string rdf:definition = "A task in which an Agent places an object at a particular position."
    }

    class "_class_ParkingArms" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ParkingArms"
        string rdf:definition = "A task by which an Agent arranges its arms in such a way so as to minimize opportunities for collision while moving through the environment."
    }

    class "_class_PhaseTransition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhaseTransition"
        string rdf:definition = "An EventType that classifies processes by which matter changes from some distinguishable phase to another. We will use this to refer to the classical phase transitions between Solid, Liquid, Gaseous, Plasma etc. phases."
    }

    class "_class_PhysicalAccessibility" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalAccessibility"
        string rdf:definition = "Classifies States in which an item is placed in a container or protected by a protector, but the placement of the item and container is such that a, usually agentive, accessor may nevertheless reach the item in order to perform a task."
    }

    class "_class_PhysicalBlockage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalBlockage"
        string rdf:definition = "Classifies States in which an object, in general called restrictor, blocks access to an item. A usually agentive accessor, whose access is blocked, may be specified."
    }

    class "_class_PhysicalExistence" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalExistence"
        string rdf:definition = "A State in which an Entity is said to exist in the physical world."
    }

    class "_class_PhysicalState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalState"
        string rdf:definition = "A State describing how Entities in the physical world relate to each other."
    }

    class "_class_PlacingTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PlacingTheory"
        string rdf:definition = "A schematic theory of how an agent can place a patient at a particular goal location."
    }

    class "_class_PlanarJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PlanarJoint"
        string rdf:definition = "A joint that allows motion in a plane perpendicular to an axis."
    }

    class "_class_PluginRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PluginRole"
        string rdf:definition = """In the Plug-in-Host pattern, a Host application provides services which the Plug-in can use, including a way for Plug-ins to register themselves with the Host application and a protocol for the exchange of data withPplug-ins. Plug-ins depend on the services provided by the host application and do not usually work by themselves. Conversely, the host application operates independently of the plug-ins, making it possible for end-users to add and update plug-ins dynamically without needing to make changes to the host application.

Source: https://en.wikipedia.org/wiki/Plug-in_(computing)"""
    }

    class "_class_PouredObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PouredObject"
        string rdf:definition = "An object being poured into or onto some other object. A role of some fluid or substance that is the patient of pouring task."
    }

    class "_class_PouringInto" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PouringInto"
        string rdf:definition = "The task in which the agent pours the substance into another object."
    }

    class "_class_PouringOnto" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PouringOnto"
        string rdf:definition = "The task in which an agent pours the substance on top of an object"
    }

    class "_class_Prediction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Prediction"
        string rdf:definition = "A Mental task in which the Agent endeavours to construct a representation of a future state of the world. Prediction commits itself to some degree of accuracy: the Agent believes that eventually something similar to the predicted state will come to pass."
    }

    class "_class_Prospecting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Prospecting"
        string rdf:definition = "A Mental task in which an Agent endeavours to construct a representation of a future state of affairs of the world it is embodied in."
    }

    class "_class_Predilection" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Predilection"
        string rdf:definition = """The relation between a 'Preference' and the 'Order' that the 'Preference' defines over Situations.

For the complete model, see 'Preference'."""
    }

    class "_class_PreferenceOrder" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PreferenceOrder"
        string rdf:definition = "The relation between a 'Preference' and the 'Order' that the 'Preference' defines over Descriptions of Situations."
    }

    class "_class_PreferenceRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PreferenceRegion"
        string rdf:definition = "The 'Region' of 'Preference's, containing all possible 'Order's between all possible 'Situation's."
    }

    class "_class_PrismaticJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PrismaticJoint"
        string rdf:definition = "A sliding joint that slides along an axis, and has a limited range specified by the upper and lower limits."
    }

    class "_class_Progression" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Progression"
        string rdf:definition = "A situation that sattisies a description of how a process evolves over time."
    }

    class "_class_Protector" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Protector"
        string rdf:definition = "A role classifying an object that protects another by preventing other entities from coming in contact with the protected object."
    }

    class "_class_ProximalTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ProximalTheory"
        string rdf:definition = """An image schematic theory that describes a qualitative spatial relation indicating relative proximity, as expressed by the prepositions 'near', 'close to', 'next to', etc.

It may seem that proximity is a very simple notion, requiring no sophisticated theoretical underpinnings. However, proximity is an extremely object- and purpose-dependent relation. A store next door is in a closeness relation to a person, and so is the Sun in the sky, despite the physical distances being different by several orders of magnitude.

As such, a theory, i.e. a description of what a particular kind of closeness means and in which contexts it applies, is necessary.

Adopted from GUM-4-space (Bateman et al. 2010).

Let xL, xR be objects filling the locatum, relatum roles of this schema. Then one can infer that xL 'near to' xR."""
    }

    class "_class_PushingAway" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PushingAway"
        string rdf:definition = "A task in which an Agent pushes an object in front of themselves."
    }

    class "_class_PushingDown" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PushingDown"
        string rdf:definition = "A task in which an Agent pushes an object downwards."
    }

    class "_class_PuttingDown" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PuttingDown"
        string rdf:definition = "A task in which an Agent puts down an object they have kinematic control over, e.g. a grasped object."
    }

    class "_class_QualityTransition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "QualityTransition"
        string rdf:definition = "todo(DB): added for NEEMs (quale change), but not sure yet about it..."
    }

    class "_class_Query" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Query"
        string rdf:definition = "A role played by some Information Realization that carries meaning, where this meaning is a query of some sort."
    }

    class "_class_QueryAnsweringTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "QueryAnsweringTask"
        string rdf:definition = '''An Answering task that is the reaction to some Query answering task.

In a lot of cases, such a task is also an Assertion task, e.g., in the following discourse:

"How will the weather be tomorrow?"
"It is going to rain in the morning."

However, sometimes this might be not the case, e.g., with counterquestions.'''
    }

    class "_class_QueryEngine" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "QueryEngine"
        string rdf:definition = "A Query Engine is a Software that can answer some queries."
    }

    class "_class_Reaching" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Reaching"
        string rdf:definition = "A task in which an Agent moves one or more of its arms towards a location or object."
    }

    class "_class_Retracting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Retracting"
        string rdf:definition = "A task in which an Agent moves its arms away from a location."
    }

    class "_class_Reasoner" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Reasoner"
        string rdf:definition = """A Reasoner is some Software that can infer new, implicit knowlegde from explicitly stated knowledge.

This definition is broad and we consider any System fitting the above description as reasoners. For example, the following can be seen as Reasoners:
* A simulation, where the explicit knowledge corresponds to the initial situation, and the implicit knowlegde corresponds to the situation that is derived from that by simulating some unfolding processes.
* A machine learning algorithm, e.g., an image classifier: The explicit knowledge is the visual content of a picture (even down to the pixel), the implicit knowledge is the derived classification.
* A logic based rule engine, where initial facts are the explicit knowledge, and derived facts are the implicit knowledge."""
    }

    class "_class_RedColor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RedColor"
        string rdf:definition = "A color region with dominant red color."
    }

    class "_class_Reification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Reification"
        string rdf:definition = "A description that *describes* a formal entity."
    }

    class "_class_RelationalDatabase" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RelationalDatabase"
        string rdf:definition = '''A Relational Database is a Database based on the relational model of data, which organizes data into one or more tables (or "relations") of columns and rows, with a unique key identifying each row.

Source: https://en.wikipedia.org/wiki/Relational_database'''
    }

    class "_class_RelationalQueryLanguage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RelationalQueryLanguage"
        string rdf:definition = "A Query Language that is designed for communication with some Relational Database."
    }

    class "_class_RelevantPart" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RelevantPart"
        string rdf:definition = "Features that are relevant parts of their host, like a bump or an edge."
    }

    class "_class_Remembering" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Remembering"
        string rdf:definition = """A Mental task in which the Agent recalls a record of a previous state of affairs in the world.

The Agent must have witnessed and memorized this state of affairs in order to record it. Remembering commits itself to accuracy: the Agent attempts to reconstruct as accurate a record as it can. Note, this does not mean the Agent will communicate the recollection accurately.

The difference to Memory retrieval is that for this Task, we are concerned with knowledge about a previous world state. Memory Retrieval is more general in the sense that it also includes the retrieval of learned facts and rules."""
    }

    class "_class_Retrospecting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Retrospecting"
        string rdf:definition = "A Mental task in which an Agent endeavors to construct a representation of a past state of affairs of the world it is embodied in."
    }

    class "_class_RemovedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RemovedObject"
        string rdf:definition = "An object that is removed from another."
    }

    class "_class_Replanning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Replanning"
        string rdf:definition = "A mental task, in which an agent reconfigures some plan that has been put together before."
    }

    class "_class_RevoluteJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RevoluteJoint"
        string rdf:definition = "A hinge joint that rotates along an axis and has a limited range specified by the upper and lower limits."
    }

    class "_class_RoomSurface" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RoomSurface"
        string rdf:definition = "The surface of a room."
    }

    class "_class_Surface" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Surface"
        string rdf:definition = "The outside part or uppermost layer of something."
    }

    class "_class_Rubbing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Rubbing"
        string rdf:definition = "The motion of an object sliding along the surface of another, for example, to clean the surface."
    }

    class "_class_SelectedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SelectedObject"
        string rdf:definition = "An object chosen as the result of some selection task."
    }

    class "_class_Selecting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Selecting"
        string rdf:definition = "A Task where an Agent decides between two or more options."
    }

    class "_class_SelectingItem" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SelectingItem"
        string rdf:definition = "A task in which an Agent selects some object to use for a subsequent task."
    }

    class "_class_SelfReflection" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SelfReflection"
    }

    class "_class_Serving" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Serving"
        string rdf:definition = "The task in which the agent delivers an object to a physical agent"
    }

    class "_class_SettingGripper" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SettingGripper"
        string rdf:definition = "A task by which an Agent arranges one/some/all of its grippers in some configuration."
    }

    class "_class_DPose" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "6DPose"
        string rdf:definition = "A point in three dimensional space, given as translation in a reference coordinate system, and an orientation of a coordinate system centered at that point relative to the reference coordinate system."
    }

    class "_class_Sharpness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Sharpness"
        string rdf:definition = "The quality of having a thin edge or point that can cut something or make a hole into something. It is worth to note here that the social aspect of sharpness such as the quality of being clear, intelligent etc is not considered as sharpness according to this definition."
    }

    class "_class_Simulating" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Simulating"
        string rdf:definition = '''A Mental task in which the Agent endeavours to create representations of a sequence of states of affairs in the world. Simulation commits itself to some degree of transition accuracy: supposing the actual state of the world was the initial state of the simulation, the world state and simulation state should evolve to some degree similarly.

Simulation does not commit itself to state accuracy: the initial state of the simulation is not constrained to be faithful to the actual state of the world in which the Agent is embodied. Counterfactual simulation ("what would happen if--?") is possible.'''
    }

    class "_class_Simulation_Reasoner" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Simulation_Reasoner"
        string rdf:definition = "A Simulation-based Reasoner is a simulation that is used as a reasoner, where the explicit knowledge corresponds to the initial situation, and the implicit knowlegde corresponds to the situation that is derived from that by simulating some unfolding processes."
    }

    class "_class_Size" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Size"
        string rdf:definition = "The magnitude or dimension of a thing which can be measured as length, width, height, diameter, perimeter, area, volume."
    }

    class "_class_Sluggishness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Sluggishness"
        string rdf:definition = "A description of sluggish behavior."
    }

    class "_class_SocialState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SocialState"
        string rdf:definition = """A State which describes how Agents relate to each other.

One can argue that any Social state is a Physical state, since anything the Agents may use to construct a social relationship is made of physical things. The difference is that the physical support of the social relationships is not important here, what matters instead is the nature and content of the social relations, regardless of how they are physically realized."""
    }

    class "_class_Software_Configuration" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Software_Configuration"
    }

    class "_class_SoftwareLibrary" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SoftwareLibrary"
    }

    class "_class_SourceMaterialRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SourceMaterialRole"
        string rdf:definition = "A role classifying a substance or object that enters a process of transformation intended to create some other object."
    }

    class "_class_SphereShape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SphereShape"
        string rdf:definition = "A round solid figure with every point on its surface equidistant from its centre."
    }

    class "_class_Standing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Standing"
        string rdf:definition = "A motion by which an Agent arranges its body in an upright configuration. Typically, it makes sense to speak of standing for bodies where some limbs are dedicated to moving the whole body while some limbs are used for manipulation of other objects."
    }

    class "_class_StaticFrictionAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StaticFrictionAttribute"
        string rdf:definition = "Friction between two touching objects that do not move relative to each other."
    }

    class "_class_StatusFailure" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StatusFailure"
        string rdf:definition = "A status indicating the failure during some workflow execution."
    }

    class "_class_Storage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Storage"
        string rdf:definition = "The disposition of an object (the container) to store other objects. Storage of an object would facilitate several objectives; such as to store objects in a safe or usual place, to prevent the substances e.g. prevention of milk going bad by storing them in a refrigrator."
    }

    class "_class_StructuralDesign" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StructuralDesign"
        string rdf:definition = """A design of an object which describes its stability, strength and rigidity, and considers the way in which parts of an object are arranged. 
        """
    }

    class "_class_TaskInvocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TaskInvocation"
        string rdf:definition = "An elementary workflow consisting in the invocation of one single task. It is used as a descriptive context inside of which factual bindings are valid between the task's arguments and other entities (such as the \"local variables\" of a larger workflow)."
    }

    class "_class_SuccessDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SuccessDiagnosis"
        string rdf:definition = "A diagnosis of the fullfilment of a goal that motivates the behavior of a system."
    }

    class "_class_Successfulness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Successfulness"
        string rdf:definition = "A description of a situation with a goal that was achieved by some system."
    }

    class "_class_SupportState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SupportState"
        string rdf:definition = "Classifies States in which an object is not able to move under gravity because of its placement relative to some other object."
    }

    class "_class_Supporter" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Supporter"
        string rdf:definition = "A role classifying an object used to support others."
    }

    class "_class_SupportTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SupportTheory"
        string rdf:definition = '''An image schematic theory that describes the reified functional relation holding between two spatial objects x and y, such that x physically supports y in the presence of gravity; x and y need not be in contact. An example of such an expression is "The bowl is on the table".

This is also known as FunctionalControlExternal in GUM (Bateman et al. 2010).

Let xL, xR be objects filling the locatum, relatum roles of this schema. Then one can infer that xL isSupportedBy xR.'''
    }

    class "_class_SupportedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SupportedObject"
        string rdf:definition = "An object that is supported by some supporter."
    }

    class "_class_SymbolicReasoner" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SymbolicReasoner"
        string rdf:definition = """A Symbolic Reasoner, is a piece of software able to infer logical consequences from a set of asserted facts or axioms.

Source: https://en.wikipedia.org/wiki/Semantic_reasoner"""
    }

    class "_class_Tapping" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Tapping"
        string rdf:definition = "A motion, usually repeated several times, for example, to probe the surface of an object."
    }

    class "_class_Taxis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Taxis"
        string rdf:definition = "An innate behavioural response such as the knee-jerk reflex or the sucking reflex of human infants."
    }

    class "_class_Temperature" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Temperature"
        string rdf:definition = "The heat present in an object."
    }

    class "_class_TemperatureRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TemperatureRegion"
        string rdf:definition = "Encodes the temperature of an object."
    }

    class "_class_Tempering" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Tempering"
        string rdf:definition = "The disposition of an object (the tool) to change the temperature of others."
    }

    class "_class_ThinkAloud" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloud"
        string rdf:definition = "A task in which an Agent, while in the course of performing some other task(s), reports on their own decision processes that guide this other task(s) for the benefit of an outside observer."
    }

    class "_class_ThinkAloudActionTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudActionTopic"
        string rdf:definition = "A topic used when an Agent states what they are doing."
    }

    class "_class_ThinkAloudGeneralKnowledgeTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudGeneralKnowledgeTopic"
        string rdf:definition = "A topic used when an Agent states general knowledge they have."
    }

    class "_class_ThinkAloudKnowledgeTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudKnowledgeTopic"
        string rdf:definition = "A topic used when an Agent states some item of knowledge. This knowledge can be general, or specific to the environment and task at hand."
    }

    class "_class_ThinkAloudObstructionTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudObstructionTopic"
        string rdf:definition = "A topic used when an Agent describes some state of affairs that prevents them from performing an action."
    }

    class "_class_ThinkAloudOpinionTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudOpinionTopic"
        string rdf:definition = "A topic used when an Agent expresses an opinion about the action they perform or the environment they are in."
    }

    class "_class_ThinkAloudPerceptionTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudPerceptionTopic"
        string rdf:definition = "A topic used when an Agent describes what they currently perceive."
    }

    class "_class_ThinkAloudPlanTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudPlanTopic"
        string rdf:definition = "A topic used when an Agent describes what they intend to do. Note, this is not about describing the process through which this plan was constructed; that is covered by the MetaCognitionPlanningTopic."
    }

    class "_class_ThinkAloudSceneKnowledgeTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudSceneKnowledgeTopic"
        string rdf:definition = "A topic used when an Agent describes what they know about their environment, including knowledge of world states that they do not currently perceive."
    }

    class "_class_Threshold" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Threshold"
        string rdf:definition = "A role played by a parameter which indicates some value that, when crossed, triggers some condition."
    }

    class "_class_Throwing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Throwing"
        string rdf:definition = "A task in which an Agent imparts momentum to an object before releasing it so that it flies for some distance unsupported."
    }

    class "_class_TimeRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TimeRole"
        string rdf:definition = "A role filled by a description of the location in time and/or duration of an event or object."
    }

    class "_class_Triplestore" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Triplestore"
        string rdf:definition = "A Triplestore or RDF store is a purpose-built database for the storage and retrieval of triples through semantic queries."
    }

    class "_class_Turning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Turning"
        string rdf:definition = "A motion by which an agent changes which way their body faces."
    }

    class "_class_UnavailableSoftware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "UnavailableSoftware"
        string rdf:definition = "A description of a situation where some software dependency is not available."
    }

    class "_class_VideoData" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "VideoData"
        string rdf:definition = "An information object containing data for audio-visual modalities."
    }

    class "_class_DPosition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "3DPosition"
        string rdf:definition = "A point in three dimensional space, given as translation."
    }

    class "_class_Armchair" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Armchair"
    }

    class "_class_BakedGood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BakedGood"
    }

    class "_class_BedsideTable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BedsideTable"
    }

    class "_class_Blade" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Blade"
    }

    class "_class_Bottle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Bottle"
    }

    class "_class_Bowl" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Bowl"
    }

    class "_class_Box" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Box"
    }

    class "_class_Bread" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Bread"
    }

    class "_class_BreadKnife" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BreadKnife"
    }

    class "_class_BreakfastPlate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BreakfastPlate"
    }

    class "_class_Building" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Building"
    }

    class "_class_CanBeSatOn" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CanBeSatOn"
    }

    class "_class_Carafe" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Carafe"
    }

    class "_class_Ceiling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Ceiling"
    }

    class "_class_CeramicCooktop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CeramicCooktop"
    }

    class "_class_CerealBox" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CerealBox"
    }

    class "_class_ClosingDisposition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ClosingDisposition"
    }

    class "_class_CoffeeCarafe" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CoffeeCarafe"
    }

    class "_class_CoffeeTable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CoffeeTable"
    }

    class "_class_CoilCooktop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CoilCooktop"
    }

    class "_class_Compartment" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Compartment"
    }

    class "_class_Cooktop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cooktop"
    }

    class "_class_TemperingByHeating" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TemperingByHeating"
    }

    class "_class_Countertop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Countertop"
    }

    class "_class_Covering" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Covering"
    }

    class "_class_Crockery" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Crockery"
    }

    class "_class_Cup" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cup"
    }

    class "_class_Cupboard" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cupboard"
    }

    class "_class_Cutlery" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cutlery"
    }

    class "_class_CuttingTool" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CuttingTool"
    }

    class "_class_DesignedChair" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedChair"
    }

    class "_class_DesignedHandle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedHandle"
    }

    class "_class_DesignedSpade" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedSpade"
    }

    class "_class_DessertFork" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DessertFork"
    }

    class "_class_DinnerPlate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DinnerPlate"
    }

    class "_class_Dish" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dish"
    }

    class "_class_Dishwasher" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dishwasher"
    }

    class "_class_DishwasherTab" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DishwasherTab"
    }

    class "_class_Dispenser" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dispenser"
    }

    class "_class_Door" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Door"
    }

    class "_class_Drawer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Drawer"
    }

    class "_class_ElectricCooktop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ElectricCooktop"
    }

    class "_class_Floor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Floor"
    }

    class "_class_Fork" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Fork"
    }

    class "_class_FreezerCompartment" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FreezerCompartment"
    }

    class "_class_GasCooktop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GasCooktop"
    }

    class "_class_Glass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Glass"
    }

    class "_class_Hotplate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Hotplate"
    }

    class "_class_Impeding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Impeding"
    }

    class "_class_InductionCooktop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InductionCooktop"
    }

    class "_class_Inserting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Inserting"
    }

    class "_class_Jar" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Jar"
    }

    class "_class_Kitchen" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Kitchen"
    }

    class "_class_KitchenCabinet" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "KitchenCabinet"
    }

    class "_class_KitchenKnife" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "KitchenKnife"
    }

    class "_class_KitchenUnit" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "KitchenUnit"
    }

    class "_class_Knife" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Knife"
    }

    class "_class_Lid" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Lid"
    }

    class "_class_MilkBottle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MilkBottle"
    }

    class "_class_MilkPack" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MilkPack"
    }

    class "_class_Oven" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Oven"
    }

    class "_class_Pack" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pack"
    }

    class "_class_Pan" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pan"
    }

    class "_class_Pancake" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pancake"
    }

    class "_class_PancakeMix" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PancakeMix"
    }

    class "_class_PastaBowl" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PastaBowl"
    }

    class "_class_PepperShaker" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PepperShaker"
    }

    class "_class_Plate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Plate"
    }

    class "_class_Pot" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pot"
    }

    class "_class_Rack" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Rack"
    }

    class "_class_Refrigerator" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Refrigerator"
    }

    class "_class_TemperingByCooling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TemperingByCooling"
    }

    class "_class_SaladBowl" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SaladBowl"
    }

    class "_class_SaltShaker" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SaltShaker"
    }

    class "_class_Shaker" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Shaker"
    }

    class "_class_Sink" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Sink"
    }

    class "_class_Sitting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Sitting"
    }

    class "_class_Sofa" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Sofa"
    }

    class "_class_SoupPot" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SoupPot"
    }

    class "_class_Spatula" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Spatula"
    }

    class "_class_Spoon" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Spoon"
    }

    class "_class_Storing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Storing"
    }

    class "_class_Stove" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Stove"
    }

    class "_class_SugarDispenser" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SugarDispenser"
    }

    class "_class_Table" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Table"
    }

    class "_class_TableFork" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TableFork"
    }

    class "_class_TableKnife" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TableKnife"
    }

    class "_class_TableSpoon" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TableSpoon"
    }

    class "_class_Tableware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Tableware"
    }

    class "_class_Tap" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Tap"
    }

    class "_class_TeaSpoon" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TeaSpoon"
    }

    class "_class_TrashContainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TrashContainer"
    }

    class "_class_Wall" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Wall"
    }

    class "_class_Wardrobe" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Wardrobe"
    }

    class "_class_WaterBottle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "WaterBottle"
    }

    class "_class_WaterGlass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "WaterGlass"
    }

    class "_class_WineBottle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "WineBottle"
    }

    class "_class_WineGlass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "WineGlass"
    }
}

class "_class_DUL_namespace" (
    prepend apiSchemas = ["RdfAPI"]
)
{
    string rdf:namespace = "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#"
}

def "DUL"
{
    class "_class_Organism" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Organism"
        string rdf:definition = "A physical objects with biological characteristics, typically that organisms can self-reproduce."
    }

    class "_class_PhysicalAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PhysicalAgent"
        string rdf:definition = "A PhysicalObject that is capable of self-representing (conceptualizing) a Description in order to plan an Action. A PhysicalAgent is a substrate for (actsFor) a Social Agent"
    }

    class "_class_InformationObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "InformationObject"
        string rdf:definition = """In SOMA-compliant systems, the way to use InformationObjects to specify extra data about an individual entity is to employ the 'is about' and 'expresses' properties (or their inverses 'is reference of' and 'is expressed by') and to supply a persistent identifier for a realization of the InformationObject.

As a prototypical example, consider an individual called Action_XYZ, about which we have some data for which the meaning is described by Description_ABC. The data would be an individual InformationObject_DEF, and the following property assertions would hold:

InformationObject_DEF 'is about' Action_XYZ
InformationObject_DEF expresses Description_ABC


Usually, an individual InformationObject would be connected to (at least) an InformationRealization individual. For example, suppose there is such an InformationRealization individual, InformationRealization_123. Then, this individual will have data properties describing its format and persistent identifier

InformationRealization_123 hasPersistentIdentifier 'doi'
InformationRealization_123 hasDataFormat 'urdf'"""
    }

    class "_class_PhysicalObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PhysicalObject"
        string rdf:definition = "Any Object that has a proper space region. The prototypical physical object has also an associated mass, but the nature of its mass can greatly vary based on the epistemological status of the object (scientifically measured, subjectively possible, imaginary)."
    }

    class "_class_SocialObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SocialObject"
        string rdf:definition = "Any Object that exists only within some communication Event, in which at least one PhysicalObject participates in. In other words, all objects that have been or are created in the process of social communication: for the sake of communication (InformationObject), for incorporating new individuals (SocialAgent, Place), for contextualizing or intepreting existing entities (Description, Concept), or for collecting existing entities (Collection). Being dependent on communication, all social objects need to be expressed by some information object (information objects are self-expressing)."
    }

    class "_class_DesignedArtifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "DesignedArtifact"
        string rdf:definition = "A PhysicalArtifact that is also described by a Design. This excludes simple recycling or refunctionalization of natural objects. Most common sense 'artifacts' can be included in this class: cars, lamps, houses, chips, etc."
    }

    class "_class_Substance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Substance"
        string rdf:definition = "Any PhysicalBody that has not necessarily specified (designed) boundaries, e.g. a pile of trash, some sand, etc. In this sense, an artistic object made of trash or a dose of medicine in the form of a pill would be a FunctionalSubstance, and a DesignedArtifact, since its boundaries are specified by a Design; aleatoric objects that are outcomes of an artistic process might be still considered DesignedArtifact(s), and Substance(s)."
    }

    class "_class_Agent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Agent"
        string rdf:definition = """Generally, agents are goal-directed entities that are able to monitor their environment to select and perform efficient means-ends actions that are available in a given situation to achieve an intended goal. Agency, therefore, implies the ability to perceive and to change the environment of the agent. Crucially, it also entails intentionality to represent the goal-state in the future, equifinal variability to be able to achieve the intended goal-state with different actions in different contexts, and rationality of actions in relation to their goal to produce the most efficient action available (Source: https://en.wikipedia.org/wiki/Agency_(psychology)).

While we follow this definition, we do so loosely: We do not require the intentionality to be sourced by the agent. E.g., a running computer program (see Software instance) can be seen as an actor and therefore participate in Actions, e.g. some Communication Action, while its intentionality has been bestowed upon it from the agents who started the program or gave an input (e.g., via a mouse click) to achieve some goal."""
    }

    class "_class_Description" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Description"
        string rdf:definition = "A Description is a SocialObject that represents a conceptualization. It can be thought also as a 'descriptive context' that uses or defines concepts in order to create a view on a 'relational context' (cf. Situation) out of a set of data or observations. For example, a Plan is a Description of some actions to be executed by agents in a certain way, with certain parameters; a Diagnosis is a Description that provides an interpretation for a set of observed entities, etc. Descriptions 'define' or 'use' concepts, and can be 'satisfied' by situations."
    }

    class "_class_Concept" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Concept"
        string rdf:definition = "A Concept is a SocialObject, and isDefinedIn some Description; once defined, a Concept can be used in other Description(s). If a Concept isDefinedIn exactly one Description, see the LocalConcept class. The classifies relation relates Concept(s) to Entity(s) at some TimeInterval"
    }

    class "_class_Task" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Task"
        string rdf:definition = "An EventType that classifies an Action to be executed. For example, reaching a destination is a task that can be executed by performing certain actions, e.g. driving a car, buying a train ticket, etc. The actions to execute a task can also be organized according to a Plan that is not the same as the one that defines the task (if any). For example, reaching a destination could be defined by a plan to get on holidays, while the plan to execute the task can consist of putting some travels into a sequence."
    }

    class "_class_Role" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Role"
        string rdf:definition = "A Concept that classifies an Object"
    }

    class "_class_Entity" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Entity"
        string rdf:definition = "Anything: real, possible, or imaginary, which some modeller wants to talk about for some purpose."
    }

    class "_class_Event" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Event"
        string rdf:definition = "Any physical, social, or mental process, event, or state. More theoretically, events can be classified in different ways, possibly based on 'aspect' (e.g. stative, continuous, accomplishement, achievement, etc.), on 'agentivity' (e.g. intentional, natural, etc.), or on 'typical participants' (e.g. human, physical, abstract, food, etc.). Here no special direction is taken, and the following explains why: events are related to observable situations, and they can have different views at a same time. If a position has to be suggested here anyway, the participant-based classification of events seems the most stable and appropriate for many modelling problems. (1) Alternative aspectual views Consider a same event 'rock erosion in the Sinni valley': it can be conceptualized as an accomplishment (what has brought a certain state to occur), as an achievement (the state resulting from a previous accomplishment), as a punctual event (if we collapse the time interval of the erosion into a time point), or as a transition (something that has changed from a state to a different one). In the erosion case, we could therefore have good motivations to shift from one aspect to another: a) causation focus, b) effectual focus, c) historical condensation, d) transition (causality). The different views refer to the same event, but are still different: how to live with this seeming paradox? A typical solution e.g. in linguistics (cf. Levin's aspectual classes) and in DOLCE Full (cf. WonderWeb D18 axiomatization) is to classify events based on aspectual differences. But this solution would create different identities for a same event, where the difference is only based on the modeller's attitude. An alternative solution is suggested here, and exploits the notion of (observable) Situation; a Situation is a view, consistent with a Description, which can be observed of a set of entities. It can also be seen as a 'relational context' created by an observer on the basis of a 'frame'. Therefore, a Situation allows to create a context where each particular view can have a proper identity, while the Event preserves its own identity. For example, ErosionAsAccomplishment is a Situation where rock erosion is observed as a process leading to a certain achievement: the conditions (roles, parameters) that suggest such view are stated in a Description, which acts as a 'theory of accomplishments'. Similarly, ErosionAsTransition is a Situation where rock erosion is observed as an event that has changed a state to another: the conditions for such interpretation are stated in a different Description, which acts as a 'theory of state transitions'. Consider that in no case the actual event is changed or enriched in parts by the aspectual view. (2) Alternative intentionality views Similarly to aspectual views, several intentionality views can be provided for a same Event. For example, one can investigate if an avalanche has been caused by immediate natural forces, or if there is any hint of an intentional effort to activate those natural forces. Also in this case, the Event as such has not different identities, while the causal analysis generates situations with different identities, according to what Description is taken for interpreting the Event. On the other hand, if the possible actions of an Agent causing the starting of an avalanche are taken as parts of the Event, then this makes its identity change, because we are adding a part to it. Therefore, if intentionality is a criterion to classify events or not, this depends on if an ontology designer wants to consider causality as a relevant dimension for events' identity. (3) Alternative participant views A slightly different case is when we consider the basic participants to an Event. In this case, the identity of the Event is affected by the participating objects, because it depends on them. For example, if snow, mountain slopes, wind, waves, etc. are considered as an avalanche basic participants, or if we also want to add water, human agents, etc., that makes the identity of an avalanche change. Anyway, this approach to event classification is based on the designer's choices, and more accurately mirrors lexical or commonsense classifications (see. e.g. WordNet 'supersenses' for verb synsets). Ultimately, this discussion has no end, because realists will keep defending the idea that events in reality are not changed by the way we describe them, while constructivists will keep defending the idea that, whatever 'true reality' is about, it can't be modelled without the theoretical burden of how we observe and describe it. Both positions are in principle valid, but, if taken too radically, they focus on issues that are only partly relevant to the aim of computational ontologies, which assist domain experts in representing a certain portion of reality according to their own assumptions and requirements. For this reason, in this ontology version of DOLCE, both events and situations are allowed, together with descriptions (the reason for the inclusion of the DS framewrok in DOLCE), in order to encode the modelling needs, independently from the position (if any) chosen by the model designer."
    }

    class "_class_Transition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Transition"
        string rdf:definition = "A transition is a Situation that creates a context for three TimeInterval(s), two additional different Situation(s), one Event, one Process, and at least one Object: the Event is observed as the cause for the transition, one Situation is the state before the transition, the second Situation is the state after the transition, the Process is the invariance under some different transitions (including the one represented here), in which at least one Object is situated. Finally, the time intervals position the situations and the transitional event in time. This class of situations partly encodes the ontology underlying typical engineering algebras for processes, e.g. Petri Nets. A full representation of the transition ontology is outside the expressivity of OWL, because we would need qualified cardinality restrictions, coreference, property equivalence, and property composition."
    }

    class "_class_EventType" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "EventType"
        string rdf:definition = "A Concept that classifies an Event . An event type describes how an Event should be interpreted, executed, expected, seen, etc., according to the Description that the EventType isDefinedIn (or used in)"
    }

    class "_class_Parameter" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Parameter"
        string rdf:definition = "A Concept that classifies a Region; the difference between a Region and a Parameter is that regions represent sets of observable values, e.g. the height of a given building, while parameters represent constraints or selections on observable values, e.g. 'VeryHigh'. Therefore, parameters can also be used to constrain regions, e.g. VeryHigh on a subset of values of the Region Height applied to buildings, or to add an external selection criterion , such as measurement units, to regions, e.g. Meter on a subset of values from the Region Length applied to the Region Length applied to roads."
    }

    class "_class_Quality" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Quality"
        string rdf:definition = "Any aspect of an Entity (but not a part of it), which cannot exist without that Entity. For example, the way the surface of a specific PhysicalObject looks like, or the specific light of a place at a certain time, are examples of Quality, while the encoding of a Quality into e.g. a PhysicalAttribute should be modeled as a Region. From the design viewpoint, the Quality-Region distinction is useful only when individual aspects of an Entity are considered in a domain of discourse. For example, in an automotive context, it would be irrelevant to consider the aspects of car windows for a specific car, unless the factory wants to check a specific window against design parameters (anomaly detection). On the other hand, in an antiques context, the individual aspects for a specific piece of furniture are a major focus of attention, and may constitute the actual added value, because the design parameters for old furniture are often not fixed, and may not be viewed as 'anomalies'."
    }

    class "_class_Collection" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Collection"
        string rdf:definition = 'Any container for entities that share one or more common properties. E.g. "stone objects", "the nurses", "the Louvre Aegyptian collection", all the elections for the Italian President of the Republic. A collection is not a logical class: a collection is a first-order entity, while a class is second-order. A collection is neither an aggregate of its member entities (see e.g. ObjectAggregate class).'
    }

    class "_class_Action" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Action"
        string rdf:definition = "The EASE view: an Action is an Event in which an Agent executes some Task, typically defined by a Workflow, towards the achievement of some Goal."
    }

    class "_class_Region" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Region"
        string rdf:definition = "Any region in a dimensional space (a dimensional space is a maximal Region), which can be used as a value for a quality of an Entity . For example, TimeInterval, SpaceRegion, PhysicalAttribute, Amount, SocialAttribute are all subclasses of Region. Regions are not data values in the ordinary knowledge representation sense; in order to get patterns for modelling data, see the properties: representsDataValue and hasDataValue"
    }

    class "_class_Object" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Object"
        string rdf:definition = "Any physical, social, or mental object, or a substance. Following DOLCE Full, objects are always participating in some event (at least their own life), and are spatially located."
    }

    class "_class_Workflow" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Workflow"
        string rdf:definition = "A Plan that defines Role(s), Task(s), and a specific structure for tasks to be executed, usually supporting the work of an Organization"
    }

    class "_class_Goal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Goal"
        string rdf:definition = "The Description of a Situation that is desired by an Agent, and usually associated to a Plan that describes how to actually achieve it"
    }

    class "_class_Situation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Situation"
        string rdf:definition = "A view, consistent with ('satisfying') a Description, on a set of entities. It can also be seen as a 'relational context' created by an observer on the basis of a 'frame' (i.e. a Description). For example, a PlanExecution is a context including some actions executed by agents according to certain parameters and expected tasks to be achieved from a Plan; a DiagnosedSituation is a context of observed entities that is interpreted on the basis of a Diagnosis, etc. Situation is also able to represent reified n-ary relations, where isSettingFor is the top-level relation for all binary projections of the n-ary relation. If used in a transformation pattern for n-ary relations, the designer should take care of adding (some or all) OWL2 keys, corresponding to binary projections of the n-ary, to a subclass of Situation. Otherwise the 'identification constraint' (Calvanese et al., IJCAI 2001) might be violated."
    }

    class "_class_Process" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Process"
        string rdf:definition = "This is a placeholder for events that are considered in their evolution, or anyway not strictly dependent on agents, tasks, and plans. See Event class for some thoughts on classifying events. See also 'Transition'."
    }

    class "_class_SpaceRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SpaceRegion"
        string rdf:definition = "Any Region in a dimensional space that is used to localize an Entity ; i.e., it is not used to represent some characteristic (e.g. it excludes time intervals, colors, size values, judgment values, etc.). Differently from a Place , a space region has a specific dimensional space."
    }

    class "_class_Relation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Relation"
        string rdf:definition = "Relations are descriptions that can be considered as the counterpart of formal relations (that are included in the FormalEntity class). For example, 'givingGrantToInstitution(x,y,z)' with three argument types: Provider(x),Grant(y),Recipient(z), can have a Relation counterpart: 'GivingGrantToInstitution', which defines three Concept instances: Provider,Grant,Recipient. Since social objects are not formal entities, Relation includes here any 'relation-like' entity in common sense, including social relations."
    }

    class "_class_PhysicalArtifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PhysicalArtifact"
        string rdf:definition = "Any PhysicalObject that isDescribedBy a Plan . This axiomatization is weak, but allows to talk of artifacts in a very general sense, i.e. including recycled objects, objects with an intentional functional change, natural objects that are given a certain function, even though they are not modified or structurally designed, etc. PhysicalArtifact(s) are not considered disjoint from PhysicalBody(s), in order to allow a dual classification when needed. E.g., FunctionalSubstance(s) are included here as well. Immaterial (non-physical) artifacts (e.g. texts, ideas, cultural movements, corporations, communities, etc. can be modelled as social objects (see SocialObject), which are all 'artifactual' in the weak sense assumed here."
    }

    class "_class_PhysicalPlace" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PhysicalPlace"
        string rdf:definition = "A physical object that is inherently located; for example, a water area."
    }

    class "_class_Design" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Design"
        string rdf:definition = "A Description of the Situation, in terms of structure and function, held by an Entity for some reason. A design is usually accompanied by the rationales behind the construction of the designed Entity (i.e. of the reasons why a design is claimed to be as such). For example, the actual design (a Situation) of a car or of a law is based on both the specification (a Description) of the structure, and the rationales used to construct cars or laws. While designs typically describe entities to be constructed, they can also be used to describe 'refunctionalized' entities, or to hypothesize unknown functions. For example, a cradle can be refunctionalized as a flowerpot based on a certain home design."
    }

    class "_class_Plan" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Plan"
        string rdf:definition = "A Description having an explicit Goal, to be achieved by executing the plan"
    }

    class "_class_InformationRealization" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "InformationRealization"
        string rdf:definition = """In SOMA-compliant systems, the way to use InformationObjects to specify extra data about an individual entity is to employ the 'is about' and 'expresses' properties (or their inverses 'is reference of' and 'is expressed by') and to supply a persistent identifier for a realization of the InformationObject.

As a prototypical example, consider an individual called Action_XYZ, about which we have some data for which the meaning is described by Description_ABC. The data would be an individual InformationObject_DEF, and the following property assertions would hold:

InformationObject_DEF 'is about' Action_XYZ
InformationObject_DEF expresses Description_ABC


Usually, an individual InformationObject would be connected to (at least) an InformationRealization individual. For example, suppose there is such an InformationRealization individual, InformationRealization_123. Then, this individual will have data properties describing its format and persistent identifier

InformationRealization_123 hasPersistentIdentifier 'doi'
InformationRealization_123 hasDataFormat 'urdf'"""
    }

    class "_class_TimeInterval" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "TimeInterval"
        string rdf:definition = "Any Region in a dimensional space that aims at representing time."
    }

    class "_class_PhysicalAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PhysicalAttribute"
        string rdf:definition = "Physical value of a physical object, e.g. density, color, etc."
    }

    class "_class_Diagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Diagnosis"
        string rdf:definition = "A Description of the Situation of a system, usually applied in order to control a normal behaviour, or to explain a notable behavior (e.g. a functional breakdown)."
    }

    class "_class_Configuration" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Configuration"
        string rdf:definition = "A collection whose members are 'unified', i.e. organized according to a certain schema that can be represented by a Description. Typically, a configuration is the collection that emerges out of a composed entity: an industrial artifact, a plan, a discourse, etc. E.g. a physical book has a configuration provided by the part-whole schema that holds together its cover, pages, ink. That schema, based on the individual relations between the book and its parts, can be represented in a reified way by means of a (structural) description, which is said to 'unify' the book configuration."
    }

    class "_class_PhysicalBody" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PhysicalBody"
        string rdf:definition = "Physical bodies are PhysicalObject(s), for which we tend to neutralize any possible artifactual character. They can have several granularity levels: geological, chemical, physical, biological, etc."
    }

    class "_class_FormalEntity" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "FormalEntity"
        string rdf:definition = "Entities that are formally defined and are considered independent from the social context in which they are used. They cannot be localized in space or time. Also called 'Platonic entities'. Mathematical and logical entities are included in this class: sets, categories, tuples, costants, variables, etc. Abstract formal entities are distinguished from information objects, which are supposed to be part of a social context, and are localized in space and time, therefore being (social) objects. For example, the class 'Quark' is an abstract formal entity from the purely set-theoretical perspective, but it is an InformationObject from the viewpoint of ontology design, when e.g. implemented in a logical language like OWL. Abstract formal entities are also distinguished from Concept(s), Collection(s), and Description(s), which are part of a social context, therefore being SocialObject(s) as well. For example, the class 'Quark' is an abstract FormalEntity from the purely set-theoretical perspective, but it is a Concept within history of science and cultural dynamics. These distinctions allow to represent two different notions of 'semantics': the first one is abstract and formal ('formal semantics'), and formallyInterprets symbols that are about entities whatsoever; for example, the term 'Quark' isAbout the Collection of all quarks, and that Collection isFormalGroundingFor the abstract class 'Quark' (in the extensional sense). The second notion is social, localized in space-time ('social semantics'), and can be used to interpret entities in the intensional sense. For example, the Collection of all quarks isCoveredBy the Concept 'Quark', which is also expressed by the term 'Quark'."
    }

    class "_class_SocialRelation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SocialRelation"
        string rdf:definition = "Any social relationship"
    }

    class "_class_SocialObjectAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SocialObjectAttribute"
        string rdf:definition = "Any Region in a dimensional space that is used to represent some characteristic of a SocialObject, e.g. judgment values, social scalars, statistical attributes over a collection of entities, etc."
    }

    class "_class_Theory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Theory"
        string rdf:definition = "A Theory is a Description that represents a set of assumptions for describing something, usually general. Scientific, philosophical, and commonsense theories can be included here. This class can also be used to act as 'naturalized reifications' of logical theories (of course, they will be necessarily incomplete in this case, because second-order entities are represented as first-order ones)."
    }

    class "_class_Set" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Set"
    }

    class "_class_SocialAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SocialAgent"
        string rdf:definition = "Any individual whose existence is granted simply by its social communicability and capability of action (through some PhysicalAgent)."
    }

    class "_class_BiologicalObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "BiologicalObject"
    }

    class "_class_Organization" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Organization"
        string rdf:definition = "An internally structured, conventionally created SocialAgent, needing a specific Role and Agent that plays it, in order to act."
    }

    class "_class_NaturalPerson" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "NaturalPerson"
        string rdf:definition = "A person in the physical commonsense intuition: 'have you seen that person walking down the street?'"
    }

    class "_class_ObjectAggregate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "ObjectAggregate"
        string rdf:definition = "An aggregate of distributed objects, members of a same Collection, e.g. the stars in a constellation, the parts of a car, the employees of a company, the entries from an encyclopedia, the concepts expressed in a speech, etc. It cannot be defined by means of an equivalence axiom, because it'd require the same Collection for all members, an axiom that cannot be expressed in OWL."
    }

    class "_class_Abstract" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Abstract"
        string rdf:definition = "Any Entity that cannot be located in space-time. E.g. mathematical entities: formal semantics elements, regions within dimensional spaces, etc."
    }

    class "_class_Amount" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Amount"
        string rdf:definition = "A quantity, independently from how it is measured, computed, etc."
    }

    class "_class_ChemicalObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "ChemicalObject"
    }

    class "_class_Classification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Classification"
        string rdf:definition = "A special kind of Situation that allows to include time indexing for the classifies relation in situations. For example, if a Situation s 'my old cradle is used in these days as a flower pot' isSettingFor the entity 'my old cradle' and the TimeIntervals '8June2007' and '10June2007', and we know that s satisfies a functional Description for aesthetic objects, which defines the Concepts 'flower pot' and 'flower', then we also need to know what concept classifies 'my old cradle' at what time. In order to solve this issue, we need to create a sub-situation s' for the classification time: 'my old cradle is a flower pot in 8June2007'. Such sub-situation s' isPartOf s."
    }

    class "_class_TimeIndexedRelation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "TimeIndexedRelation"
        string rdf:definition = "A Situation that includes a time indexing in its setting, so allowing to order any binary relation (property) with time."
    }

    class "_class_Collective" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Collective"
        string rdf:definition = 'A Collection whose members are agents, e.g. "the nurses", "the Italian rockabilly fans". Collectives, facon de parler, can act as agents, although they are not assumed here to be agents (they are even disjoint from the class SocialAgent). This is represented by admitting collectives in the range of the relations having Agent in their domain or range.'
    }

    class "_class_CollectiveAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "CollectiveAgent"
        string rdf:definition = "A SocialAgent that is actedBy agents that are (and act as) members of a Collective. A collective agent can have roles that are also roles of those agents. For example, in sociology, a 'group action' is the situation in which a number of people (that result to be members of a collective) in a given area behave in a coordinated way in order to achieve a (often common) goal. The Agent in such a Situation is not single, but a CollectiveAgent (a Group). This can be generalized to the notion of social movement, which assumes a large Community or even the entire Society as agents. The difference between a CollectiveAgent and an Organization is that a Description that introduces a CollectiveAgent is also one that unifies the corresponding Collective. In practice, this difference makes collective agents 'less stable' than organizations, because they have a dedicated, publicly recognizable Description that is conceived to introduce them."
    }

    class "_class_Community" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Community"
    }

    class "_class_Contract" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Contract"
        string rdf:definition = "(The content of) an agreement between at least two agents that play a Party Role, about some contract object (a Task to be executed)."
    }

    class "_class_DesignedSubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "DesignedSubstance"
    }

    class "_class_FunctionalSubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "FunctionalSubstance"
    }

    class "_class_Group" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Group"
        string rdf:definition = "A CollectiveAgent whose acting agents conceptualize a same SocialRelation ."
    }

    class "_class_InformationEntity" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "InformationEntity"
        string rdf:definition = "A piece of information, be it concretely realized or not. It is a catchall class, intended to bypass the ambiguities of many data or text that could denote either a an expression or a concrete realization of that expression. In a semiotic model, there is no special reason to distinguish between them, however we may want to distinguish between a pure information content (e.g. the 3rd Gymnopedie by Satie), and its possible concrete realizations as a music sheet, a piano execution, the reproduction of the execution, its publishing as a record, etc.)."
    }

    class "_class_LocalConcept" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "LocalConcept"
        string rdf:definition = "A Concept that isDefinedIn exactly 1 Description. For example, the Concept 'coffee' in a 'preparesCoffee' relation can be defined in that relation, and for all other Description(s) that use it, the isConceptUsedIn property should be applied. Notice therefore that not necessarily all Concept(s) isDefinedIn exactly 1 Description."
    }

    class "_class_Method" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Method"
        string rdf:definition = "A method is a Description that defines or uses concepts in order to guide carrying out actions aimed at a solution with respect to a problem. It is different from a Plan, because plans could be carried out in order to follow a method, but a method can be followed by executing alternative plans."
    }

    class "_class_Narrative" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Narrative"
    }

    class "_class_Person" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Person"
        string rdf:definition = "Persons in commonsense intuition, which does not apparently distinguish between either natural or social persons."
    }

    class "_class_Norm" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Norm"
        string rdf:definition = "A social norm."
    }

    class "_class_Parthood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Parthood"
        string rdf:definition = "A special kind of Situation that allows to include time indexing for the hasPart relation in situations. For example, if a Situation s 'finally, my bike has a luggage rack' isSettingFor the entity 'my bike' and the TimeIntervals 'now', or more specifically '29March2021', we need to have a time-index the part relation. With Parthood, we use includesWhole and includesPart properties. This can be done similarly for other arguments of parthood, e.g. location, configuration, topology, etc. Concerning the possible property characteristics reused from mereology (transitivity, asymmetry, reflexivity), they need to be implemented by means of rules (or, in a limited way, property chains using the binary hasPart or hasProperPart properties). A key is also added to ensure identification constraints of time-indexed parthood."
    }

    class "_class_Pattern" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Pattern"
        string rdf:definition = "Any invariance detected from a dataset, or from observation; also, any invariance proposed based on top-down considerations. E.g. patterns detected and abstracted by an organism, by pattern recognition algorithms, by machine learning techniques, etc. An occurrence of a pattern is an 'observable', or detected Situation"
    }

    class "_class_Personification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Personification"
        string rdf:definition = "A social entity with agentive features, but whose status is the result of a cultural transformation from e.g. a PhysicalObject, an Event, an Abstract, another SocialObject, etc. For example: the holy grail, deus ex machina, gods, magic wands, etc."
    }

    class "_class_Place" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Place"
        string rdf:definition = "Socially or cognitively dependent locations: political geographic entities (Rome, Lesotho), and non-material locations determined by the presence of other entities (\"the area close to Rome\") or of pivot events or signs (\"the area where the helicopter fell\"), as well as identified as complements to other entities (\"the area under the table\"), etc. In this generic sense, a Place is a 'dependent' location. For 'non-dependent' locations, cf. the PhysicalPlace class. For an abstract (dimensional) location, cf. the SpaceRegion class."
    }

    class "_class_PlanExecution" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PlanExecution"
        string rdf:definition = "Plan executions are situations that proactively satisfy a plan. Subplan executions are proper parts of the whole plan execution."
    }

    class "_class_Project" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Project"
        string rdf:definition = "A Plan that defines Role(s), Task(s), and a specific structure for tasks to be executed in relation to goals to be achieved, in order to achieve the main goal of the project. In other words, a project is a plan with a subgoal structure and multiple roles and tasks."
    }

    class "_class_Right" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Right"
        string rdf:definition = "A legal position by which an Agent is entitled to obtain something from another Agent , under specified circumstances, through an enforcement explicited either in a Law, Contract , etc."
    }

    class "_class_SocialPerson" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SocialPerson"
        string rdf:definition = "A SocialAgent that needs the existence of a specific NaturalPerson in order to act (but the lifetime of the NaturalPerson has only to overlap that of the SocialPerson)."
    }

    class "_class_SpatioTemporalRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SpatioTemporalRegion"
    }

    class "_class_TypeCollection" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "TypeCollection"
        string rdf:definition = 'A Collection whose members are the maximal set of individuals that share the same (named) type, e.g. "the gem stones", "the Italians". This class is very useful to apply a variety of the so-called "ClassesAsValues" design pattern, when it is used to talk about the extensional aspect of a class. An alternative variety of the pattern applies to the intensional aspect of a class, and the class Concept should be used instead.'
    }

    class "_class_UnitOfMeasure" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "UnitOfMeasure"
        string rdf:definition = "Units of measure are conceptualized here as parameters on regions, which can be valued as datatype values."
    }

    class "_class_WorkflowExecution" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "WorkflowExecution"
    }
}

class "_class_owl_namespace" (
    prepend apiSchemas = ["RdfAPI"]
)
{
    string rdf:namespace = "http://www.w3.org/2002/07/owl#"
}

def "owl"
{
    class "_class_Thing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_owl_namespace>
    )
    {
        string rdf:conceptName = "Thing"
    }
}

class "_class_SOMA_DFL_namespace" (
    prepend apiSchemas = ["RdfAPI"]
)
{
    string rdf:namespace = "http://www.ease-crc.org/ont/SOMA_DFL.owl#"
}

def "SOMA_DFL"
{
    class "_class_Agent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Agent"
    }

    class "_class_home_appliancenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "home_appliance.n.wn.artifact"
        string rdf:definition = "an appliance that does a particular job in the home"
    }

    class "_class_armchairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "armchair.n.wn.artifact"
        string rdf:definition = "chair with a support on each side for arms"
    }

    class "_class_arrangevwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "arrange.v.wn.contact"
    }

    class "_class_assemblevwncreation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "assemble.v.wn.creation"
    }

    class "_class_baked_goodsnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baked_goods.n.wn.food"
        string rdf:definition = "foods (like breads and cakes and pastries) that are cooked in an oven"
    }

    class "_class_nightstandnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nightstand.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a small table kept near the side of a bed"
    }

    class "_class_Beneficiary" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Beneficiary"
    }

    class "_class_bladenwnartifactcutting_implement" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blade.n.wn.artifact..cutting_implement"
    }

    class "_class_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bottle.n.wn.artifact"
        string rdf:definition = "a glass or plastic vessel used for storing drinks or other liquids; typically cylindrical without handles and with a narrow neck that can be plugged or capped"
    }

    class "_class_brushvwncontactcleanTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brush.v.wn.contact..clean.Theme"
    }

    class "_class_cleanvwnchangewipeoffPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clean.v.wn.change..wipeoff.Patient"
    }

    class "_class_cleanvwncontactmake_cleanPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clean.v.wn.contact..make_clean.Patient"
    }

    class "_class_corkvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cork.v.wn.contact.Theme"
    }

    class "_class_holdvwncontactgraspTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hold.v.wn.contact..grasp.Theme"
    }

    class "_class_insulatevwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "insulate.v.wn.change.Patient"
    }

    class "_class_washvwncontactcleanPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wash.v.wn.contact..clean.Patient"
    }

    class "_class_watervwnpossessionInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "water.v.wn.possession.Instrument"
    }

    class "_class_bowlnwnartifactdish" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bowl.n.wn.artifact..dish"
        string rdf:definition = "a dish that is round and open at the top for serving foods"
    }

    class "_class_covervwncontactagentiveTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cover.v.wn.contact..agentive.Theme"
    }

    class "_class_boxnwnartifactcontainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "box.n.wn.artifact..container"
        string rdf:definition = 'a (usually rectangular) container; may have a lid; "he rummaged through a box of spare parts"'
    }

    class "_class_assemblevwncreationPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "assemble.v.wn.creation.Patient"
    }

    class "_class_connectvwncontactlinkPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "connect.v.wn.contact..link.Patient"
    }

    class "_class_joinvwncontactagentivePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "join.v.wn.contact..agentive.Patient"
    }

    class "_class_loadvwncontactplaceTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "load.v.wn.contact..place.Theme"
    }

    class "_class_packvwncontactloadTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pack.v.wn.contact..load.Theme"
    }

    class "_class_putvwncontactplaceTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "put.v.wn.contact..place.Theme"
    }

    class "_class_stackvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stack.v.wn.contact.Theme"
    }

    class "_class_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bread.n.wn.food"
        string rdf:definition = "food made from dough of flour or meal and usually raised with yeast or baking powder and then baked"
    }

    class "_class_bread_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bread_knife.n.wn.artifact"
        string rdf:definition = "a knife used to cut bread"
    }

    class "_class_breakfast_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "breakfast_plate.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a plate for serving breakfast"
    }

    class "_class_buildingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "building.n.wn.artifact"
    }

    class "_class_sitvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sit.v.wn.contact.Theme"
    }

    class "_class_cutvwncontactseparateInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cut.v.wn.contact..separate.Instrument"
    }

    class "_class_carafenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carafe.n.wn.artifact"
        string rdf:definition = "a bottle with a stopper; for serving wine or water"
    }

    class "_class_ceilingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ceiling.n.wn.artifact"
        string rdf:definition = 'the overhead upper surface of a covered space; "he hated painting the ceiling"'
    }

    class "_class_changevwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "change.v.wn.change.Patient"
    }

    class "_class_collapsevwnmotionbreak_downPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "collapse.v.wn.motion..break_down.Patient"
    }

    class "_class_decoratevwncreationTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "decorate.v.wn.creation.Theme"
    }

    class "_class_paintvwncontactcoverPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "paint.v.wn.contact..cover.Patient"
    }

    class "_class_ceramic_cooktopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ceramic_cooktop.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] an electric cooktop with ceramic heating elements"
    }

    class "_class_cereal_boxnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cereal_box.n.wn.artifact"
        string rdf:definition = "a paper box in which breakfast cereals are sold"
    }

    class "_class_storevwnpossessionplacePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "store.v.wn.possession..place.Patient"
    }

    class "_class_cleanvwncontactmake_clean" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clean.v.wn.contact..make_clean"
    }

    class "_class_closevwncontactagentive" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "close.v.wn.contact..agentive"
    }

    class "_class_closevwncontactagentivePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "close.v.wn.contact..agentive.Patient"
    }

    class "_class_coffee_carafenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee_carafe.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a carafe intended for coffee"
    }

    class "_class_coffee_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee_table.n.wn.artifact"
        string rdf:definition = "low table where magazines can be placed and coffee or cocktails are served"
    }

    class "_class_coil_cooktopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coil_cooktop.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] an electric cooktop with coils as heating elements"
    }

    class "_class_Topic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Topic"
    }

    class "_class_compartmentnwnartifactspace" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "compartment.n.wn.artifact..space"
    }

    class "_class_constructvwncreationphysical" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "construct.v.wn.creation..physical"
    }

    class "_class_containvwnstativeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "contain.v.wn.stative.Instrument"
    }

    class "_class_cooktopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cooktop.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] device used for cooking by applying heat to the bottoms of pans and pots"
    }

    class "_class_changevwnchangeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "change.v.wn.change.Instrument"
    }

    class "_class_heatvwnchangeagentiveInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "heat.v.wn.change..agentive.Instrument"
    }

    class "_class_countertopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "countertop.n.wn.artifact"
        string rdf:definition = "the top side of a counter"
    }

    class "_class_covervwncontactagentiveInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cover.v.wn.contact..agentive.Instrument"
    }

    class "_class_crockerynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crockery.n.wn.artifact"
        string rdf:definition = "tableware (eating and serving dishes) collectively"
    }

    class "_class_breakvwncontactdamagePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "break.v.wn.contact..damage.Patient"
    }

    class "_class_passvwnmotiongiveTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pass.v.wn.motion..give.Theme"
    }

    class "_class_shattervwnchangeabout_patientPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shatter.v.wn.change..about_patient.Patient"
    }

    class "_class_cupnwnartifactcontainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cup.n.wn.artifact..container"
        string rdf:definition = 'a small open container usually used for drinking; usually has a handle; "he put the cup back in the saucer"; "the handle of the cup was missing"'
    }

    class "_class_tipvwnmotionPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tip.v.wn.motion.Patient"
    }

    class "_class_cupboardnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cupboard.n.wn.artifact"
        string rdf:definition = "a small room (or recess) or cabinet used for storage space"
    }

    class "_class_cutlerynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cutlery.n.wn.artifact"
        string rdf:definition = "tableware implements for cutting and eating food"
    }

    class "_class_cutvwncontactseparatePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cut.v.wn.contact..separate.Patient"
    }

    class "_class_cutvwncontactseparate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cut.v.wn.contact..separate"
    }

    class "_class_cutting_implementnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cutting_implement.n.wn.artifact"
        string rdf:definition = "a tool used for cutting or slicing"
    }

    class "_class_separatevwncontactforcefulInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "separate.v.wn.contact..forceful.Instrument"
    }

    class "_class_delivervwncontactbring" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "deliver.v.wn.contact..bring"
    }

    class "_class_chairnwnartifactseat" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chair.n.wn.artifact..seat"
        string rdf:definition = 'a seat for one person, with a support for the back; "he put his coat over the back of the chair and sat down"'
    }

    class "_class_partnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "part.n.wn.artifact"
        string rdf:definition = 'something less than the whole of a human artifact; "the rear part of the house"; "glue the two parts together"'
    }

    class "_class_containernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "container.n.wn.artifact"
        string rdf:definition = "any object that can be used to hold things (especially a large metal boxlike object of standardized dimensions that can be loaded from one form of transport to another)"
    }

    class "_class_break_intovwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "break_into.v.wn.change.Patient"
    }

    class "_class_emptyvwnchangeagentivePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "empty.v.wn.change..agentive.Patient"
    }

    class "_class_enclosevwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "enclose.v.wn.contact.Theme"
    }

    class "_class_fillvwnchangeagentivePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fill.v.wn.change..agentive.Patient"
    }

    class "_class_leakvwnchangeTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "leak.v.wn.change.Theme"
    }

    class "_class_movevwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "move.v.wn.motion.Theme"
    }

    class "_class_overflowvwnmotionPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "overflow.v.wn.motion.Patient"
    }

    class "_class_transportvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "transport.v.wn.contact.Theme"
    }

    class "_class_furniturenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "furniture.n.wn.artifact"
        string rdf:definition = 'furnishings that make a room or other area ready for occupancy; "they had too much furniture for the small apartment"; "there was only one piece of furniture in the room"'
    }

    class "_class_furnishvwnpossessionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "furnish.v.wn.possession.Theme"
    }

    class "_class_rubvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rub.v.wn.contact.Theme"
    }

    class "_class_transportvwnmotionlongPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "transport.v.wn.motion..long.Patient"
    }

    class "_class_wipevwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wipe.v.wn.contact.Theme"
    }

    class "_class_handlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "handle.n.wn.artifact"
        string rdf:definition = 'the appendage to an object that is designed to be held in order to use or move it; "he grabbed the hammer by the handle"; "it was an old briefcase but it still had a good grip"'
    }

    class "_class_openvwncontactagentivePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "open.v.wn.contact..agentive.Patient"
    }

    class "_class_pryvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pry.v.wn.contact.Patient"
    }

    class "_class_pullvwncontactforcePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pull.v.wn.contact..force.Patient"
    }

    class "_class_pushvwnmotionmovePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "push.v.wn.motion..move.Patient"
    }

    class "_class_spadenwnartifacthand_shovel" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spade.n.wn.artifact..hand_shovel"
    }

    class "_class_dessert_forknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dessert_fork.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a fork used to eat dessert"
    }

    class "_class_Destination" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Destination"
    }

    class "_class_dicevwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dice.v.wn.contact"
    }

    class "_class_dinner_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dinner_plate.n.wn.artifact"
        string rdf:definition = "a plate from which a diner eats during the main course of a meal"
    }

    class "_class_dishnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dish.n.wn.food"
        string rdf:definition = 'a particular item of prepared food; "she prepared a special dish for dinner"'
    }

    class "_class_dishwashernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dishwasher.n.wn.artifact"
        string rdf:definition = "a machine for washing dishes"
    }

    class "_class_cleanvwnchangewipeoffInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clean.v.wn.change..wipeoff.Instrument"
    }

    class "_class_cleanvwncontactmake_cleanInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clean.v.wn.contact..make_clean.Instrument"
    }

    class "_class_washvwnchangecleanTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wash.v.wn.change..clean.Theme"
    }

    class "_class_washvwncontactcleanInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wash.v.wn.contact..clean.Instrument"
    }

    class "_class_dishwasher_tabnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dishwasher_tab.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a solid detergent in tab form, used by some dishwashers"
    }

    class "_class_dispensernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dispenser.n.wn.artifact"
        string rdf:definition = "a container so designed that the contents can be used in prescribed amounts"
    }

    class "_class_doornwnartifactmovable_barrier" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "door.n.wn.artifact..movable_barrier"
        string rdf:definition = 'a swinging or sliding barrier that will close the entrance to a room or building or vehicle; "he knocked on the door"; "he slammed the door as he left"'
    }

    class "_class_attachvwncontactagentivePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "attach.v.wn.contact..agentive.Patient"
    }

    class "_class_crumblevwnmotionPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crumble.v.wn.motion.Patient"
    }

    class "_class_fastenvwncontactaffixPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fasten.v.wn.contact..affix.Patient"
    }

    class "_class_lockvwncontactfastenPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lock.v.wn.contact..fasten.Patient"
    }

    class "_class_openvwncontactagentiveTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "open.v.wn.contact..agentive.Theme"
    }

    class "_class_drawernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drawer.n.wn.artifact"
        string rdf:definition = "a boxlike container in a piece of furniture; made so as to slide in and out"
    }

    class "_class_pullvwncontactmovePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pull.v.wn.contact..move.Patient"
    }

    class "_class_storevwnpossessionplaceInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "store.v.wn.possession..place.Instrument"
    }

    class "_class_dropvwnmotionagentive" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drop.v.wn.motion..agentive"
    }

    class "_class_electric_cooktopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "electric_cooktop.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a cooktop that runs on electricity"
    }

    class "_class_enclosevwncontactLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "enclose.v.wn.contact.Location"
    }

    class "_class_Experiencer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Experiencer"
    }

    class "_class_bringvwncontactfetch" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bring.v.wn.contact..fetch"
    }

    class "_class_flipvwncontactflip_over" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flip.v.wn.contact..flip_over"
    }

    class "_class_floornwnartifactsurface" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "floor.n.wn.artifact..surface"
        string rdf:definition = 'the inside lower horizontal surface (as of a room, hallway, tent, or other structure); "they needed rugs to cover the bare floors"; "we spread our sleeping bags on the dry floor of the tent"'
    }

    class "_class_carpetvwncontactcarpetTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carpet.v.wn.contact..carpet.Theme"
    }

    class "_class_wearvwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wear.v.wn.change.Patient"
    }

    class "_class_fluidnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fluid.n.wn.substance"
    }

    class "_class_forknwnartifactcutlery" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fork.n.wn.artifact..cutlery"
        string rdf:definition = "cutlery used for serving and eating food"
    }

    class "_class_beatvwncookingInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beat.v.wn.cooking.Instrument"
    }

    class "_class_crackvwncookingInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crack.v.wn.cooking.Instrument"
    }

    class "_class_mixvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mix.v.wn.contact.Theme"
    }

    class "_class_pickvwnchangeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pick.v.wn.change.Instrument"
    }

    class "_class_pokevwncontactpierceInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "poke.v.wn.contact..pierce.Instrument"
    }

    class "_class_stirvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stir.v.wn.contact.Theme"
    }

    class "_class_whiskvwncookingInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "whisk.v.wn.cooking.Instrument"
    }

    class "_class_freezer_compartmentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "freezer_compartment.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] compartment inside a fridge that can reach subzero temperatures"
    }

    class "_class_gas_cooktopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gas_cooktop.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a cooktop that runs on gas"
    }

    class "_class_glassnwnartifactcontainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "glass.n.wn.artifact..container"
        string rdf:definition = "a container made of glass for holding liquids while drinking"
    }

    class "_class_holdvwncontactgrasp" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hold.v.wn.contact..grasp"
    }

    class "_class_hot_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hot_plate.n.wn.artifact"
        string rdf:definition = "a portable electric appliance for heating or cooking or keeping food warm"
    }

    class "_class_obstructvwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "obstruct.v.wn.contact.Instrument"
    }

    class "_class_induction_cooktopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "induction_cooktop.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] an electric cooktop that heats via induction"
    }

    class "_class_insertvwncontactLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "insert.v.wn.contact.Location"
    }

    class "_class_Instrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Instrument"
    }

    class "_class_jarnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jar.n.wn.artifact"
        string rdf:definition = "a vessel (usually cylindrical) with a wide mouth and without handles"
    }

    class "_class_dunkvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dunk.v.wn.contact.Theme"
    }

    class "_class_jarvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jar.v.wn.contact.Theme"
    }

    class "_class_keepvwnstativeLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "keep.v.wn.stative.Location"
    }

    class "_class_stayvwnchangeLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stay.v.wn.change.Location"
    }

    class "_class_kitchennwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kitchen.n.wn.artifact"
    }

    class "_class_kitchen_cabinetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kitchen_cabinet.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a cupboard used in the kitchen"
    }

    class "_class_kitchen_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kitchen_knife.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a knife used in the kitchen for cooking"
    }

    class "_class_kitchen_unitnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kitchen_unit.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a set of furniture for the kitchen"
    }

    class "_class_knifenwnartifacttool" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "knife.n.wn.artifact..tool"
        string rdf:definition = "edge tool used as a cutting instrument; has a pointed blade with a sharp edge and a handle"
    }

    class "_class_carvevwncontactcutInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carve.v.wn.contact..cut.Instrument"
    }

    class "_class_carvevwncontactengraveTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carve.v.wn.contact..engrave.Theme"
    }

    class "_class_cubevwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cube.v.wn.contact.Instrument"
    }

    class "_class_dicevwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dice.v.wn.contact.Instrument"
    }

    class "_class_openvwncontactagentiveInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "open.v.wn.contact..agentive.Instrument"
    }

    class "_class_peelvwncontactagentiveTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "peel.v.wn.contact..agentive.Theme"
    }

    class "_class_servevwnconsumptionconcreteTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "serve.v.wn.consumption..concrete.Theme"
    }

    class "_class_slicevwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "slice.v.wn.contact.Instrument"
    }

    class "_class_lidnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lid.n.wn.artifact"
    }

    class "_class_liftvwncontactraise" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lift.v.wn.contact..raise"
    }

    class "_class_Location" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Location"
    }

    class "_class_milk_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "milk_bottle.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a bottle used to hold milk"
    }

    class "_class_milk_cartonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "milk_carton.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a small container, often of around 1L capacity, holding milk"
    }

    class "_class_mixvwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mix.v.wn.contact"
    }

    class "_class_openvwncontactagentive" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "open.v.wn.contact..agentive"
    }

    class "_class_Source" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Source"
    }

    class "_class_ovennwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "oven.n.wn.artifact"
        string rdf:definition = "kitchen appliance used for baking or roasting"
    }

    class "_class_bakevwncookingInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bake.v.wn.cooking.Instrument"
    }

    class "_class_bakevwncreationInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bake.v.wn.creation.Instrument"
    }

    class "_class_lightenvwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lighten.v.wn.change.Patient"
    }

    class "_class_ovenbakevwncookingInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ovenbake.v.wn.cooking.Instrument"
    }

    class "_class_roastvwncookingInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "roast.v.wn.cooking.Instrument"
    }

    class "_class_packnwnartifactpackage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pack.n.wn.artifact..package"
        string rdf:definition = "a convenient package or parcel (as of cigarettes or film)"
    }

    class "_class_pannwnartifactcooking_utensil" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pan.n.wn.artifact..cooking_utensil"
        string rdf:definition = "cooking utensil consisting of a wide metal vessel"
    }

    class "_class_pancakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pancake.n.wn.food"
        string rdf:definition = "a flat cake of thin batter fried on both sides on a griddle"
    }

    class "_class_pancake_mixnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pancake_mix.n.wn.food"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] powder used to make pancake batter"
    }

    class "_class_pasta_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pasta_bowl.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a bowl intended for pasta"
    }

    class "_class_Patient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Patient2"
    }

    class "_class_pepper_shakernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pepper_shaker.n.wn.artifact"
        string rdf:definition = "a shaker with a perforated top for sprinkling ground pepper"
    }

    class "_class_pick_upvwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pick_up.v.wn.contact"
    }

    class "_class_putvwncontactplace" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "put.v.wn.contact..place"
    }

    class "_class_platenwnartifactflatware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plate.n.wn.artifact..flatware"
        string rdf:definition = "dish on which food is served or from which food is eaten"
    }

    class "_class_potnwnartifactvessel" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pot.n.wn.artifact..vessel"
        string rdf:definition = "metal or earthenware cooking vessel that is usually round and deep; often has a handle and lid"
    }

    class "_class_supportvwnstativePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "support.v.wn.stative.Patient"
    }

    class "_class_pourvwnmotionagentiveTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pour.v.wn.motion..agentive.Theme"
    }

    class "_class_pourvwnmotionagentive" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pour.v.wn.motion..agentive"
    }

    class "_class_pullvwncontactmove" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pull.v.wn.contact..move"
    }

    class "_class_pushvwnmotionmove" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "push.v.wn.motion..move"
    }

    class "_class_racknwnartifactsupport" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rack.n.wn.artifact..support"
        string rdf:definition = 'a support for displaying various articles; "the newspapers were arranged on a rack"'
    }

    class "_class_Recipient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Recipient"
    }

    class "_class_refrigeratornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "refrigerator.n.wn.artifact"
        string rdf:definition = "white goods in which food can be stored at low temperatures"
    }

    class "_class_coolvwnchangeforcedInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cool.v.wn.change..forced.Instrument"
    }

    class "_class_Product" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Product"
    }

    class "_class_roomnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "room.n.wn.artifact"
    }

    class "_class_salad_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salad_bowl.n.wn.artifact"
        string rdf:definition = "a large bowl for mixing and serving a salad"
    }

    class "_class_saltshakernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "saltshaker.n.wn.artifact"
        string rdf:definition = "a shaker with a perforated top for sprinkling salt"
    }

    class "_class_shakernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shaker.n.wn.artifact"
        string rdf:definition = "a container in which something can be shaken"
    }

    class "_class_peppervwncookingTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pepper.v.wn.cooking.Theme"
    }

    class "_class_saltvwncookingseasonTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salt.v.wn.cooking..season.Theme"
    }

    class "_class_seasonvwncookingInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "season.v.wn.cooking.Instrument"
    }

    class "_class_seasonvwncookingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "season.v.wn.cooking.Patient"
    }

    class "_class_zestvwncookingTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "zest.v.wn.cooking.Theme"
    }

    class "_class_shapevwncreationInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shape.v.wn.creation.Instrument"
    }

    class "_class_sinknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sink.n.wn.artifact"
    }

    class "_class_sitvwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sit.v.wn.contact"
    }

    class "_class_slicevwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "slice.v.wn.contact"
    }

    class "_class_sofanwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sofa.n.wn.artifact"
        string rdf:definition = "an upholstered seat for more than one person"
    }

    class "_class_soup_potnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soup_pot.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a pot intended for cooking and holding soup"
    }

    class "_class_spatulanwnartifactturner" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spatula.n.wn.artifact..turner"
        string rdf:definition = "a turner with a narrow flexible blade"
    }

    class "_class_flipvwncontactflip_overTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flip.v.wn.contact..flip_over.Theme"
    }

    class "_class_turn_overvwncontactflip_overTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turn_over.v.wn.contact..flip_over.Theme"
    }

    class "_class_spoonnwnartifactcutlery" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spoon.n.wn.artifact..cutlery"
        string rdf:definition = "a piece of cutlery with a shallow bowl-shaped container and a handle; used to stir or serve or take up food"
    }

    class "_class_scoopvwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scoop.v.wn.contact.Instrument"
    }

    class "_class_stirvwnmotionmixTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stir.v.wn.motion..mix.Theme"
    }

    class "_class_tarnishvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tarnish.v.wn.contact.Patient"
    }

    class "_class_stirvwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stir.v.wn.contact"
    }

    class "_class_storevwnpossessionplaceLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "store.v.wn.possession..place.Location"
    }

    class "_class_stovenwnartifactkitchen_appliance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stove.n.wn.artifact..kitchen_appliance"
        string rdf:definition = 'a kitchen appliance used for cooking food; "dinner was already on the stove"'
    }

    class "_class_sugar_dispensernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_dispenser.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a dispenser for sugar"
    }

    class "_class_tablenwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "table.n.wn.artifact..furniture"
        string rdf:definition = 'a piece of furniture having a smooth flat top that is usually supported by one or more vertical legs; "it was a sturdy table"'
    }

    class "_class_chipvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chip.v.wn.contact.Patient"
    }

    class "_class_separatevwncontactforcefulPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "separate.v.wn.contact..forceful.Patient"
    }

    class "_class_servevwnconsumptionconcreteLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "serve.v.wn.consumption..concrete.Location"
    }

    class "_class_shapevwncreationPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shape.v.wn.creation.Patient"
    }

    class "_class_supportvwnstativeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "support.v.wn.stative.Instrument"
    }

    class "_class_tableforknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tablefork.n.wn.artifact"
        string rdf:definition = "a fork for eating at a dining table"
    }

    class "_class_table_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "table_knife.n.wn.artifact"
        string rdf:definition = "a knife used for eating at dining table"
    }

    class "_class_spreadvwncontactabout_resourceTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spread.v.wn.contact..about_resource.Theme"
    }

    class "_class_tablespoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tablespoon.n.wn.artifact"
        string rdf:definition = "a spoon larger than a dessert spoon; used for serving"
    }

    class "_class_tablewarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tableware.n.wn.artifact"
        string rdf:definition = "articles for use at the table (dishes and silverware and glassware)"
    }

    class "_class_pick_upvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pick_up.v.wn.contact.Theme"
    }

    class "_class_faucetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "faucet.n.wn.artifact"
        string rdf:definition = "a regulator for controlling the flow of a liquid from a reservoir"
    }

    class "_class_barricadevwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barricade.v.wn.contact.Theme"
    }

    class "_class_obstructvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "obstruct.v.wn.contact.Theme"
    }

    class "_class_teaspoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "teaspoon.n.wn.artifact"
        string rdf:definition = "a small spoon used for stirring tea or coffee; holds about one fluid dram"
    }

    class "_class_transportvwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "transport.v.wn.contact"
    }

    class "_class_trashcannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "trashcan.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a container, often with a pedal-activated lid, for temporarily storing trash"
    }

    class "_class_wallnwnartifactarchitecture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wall.n.wn.artifact..architecture"
        string rdf:definition = 'an architectural partition with a height and length greater than its thickness; used to divide or enclose an area or to support another structure; "the south wall had a small window"; "the walls were covered with pictures"'
    }

    class "_class_destroyvwncontactdamagePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "destroy.v.wn.contact..damage.Patient"
    }

    class "_class_wardrobenwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wardrobe.n.wn.artifact..furniture"
        string rdf:definition = "a tall piece of furniture that provides storage space for clothes; has a door and rails or hooks for hanging clothes"
    }

    class "_class_water_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "water_bottle.n.wn.artifact"
        string rdf:definition = "a bottle for holding water"
    }

    class "_class_water_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "water_glass.n.wn.artifact"
        string rdf:definition = "a glass for drinking water"
    }

    class "_class_wine_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wine_bottle.n.wn.artifact"
        string rdf:definition = "a bottle for holding wine"
    }

    class "_class_containvwnstativePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "contain.v.wn.stative.Patient"
    }

    class "_class_wineglassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wineglass.n.wn.artifact"
        string rdf:definition = "a glass that has a stem and in which wine is served"
    }

    class "_class_Actor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Actor2"
    }

    class "_class_Asset" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Asset"
    }

    class "_class_Attribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Attribute"
    }

    class "_class_Cause" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Cause"
    }

    class "_class_Extent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Extent"
    }

    class "_class_Material" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Material"
    }

    class "_class_Predicate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Predicate"
    }

    class "_class_Stimulus" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Stimulus"
    }

    class "_class_Theme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Theme2"
    }

    class "_class_Time" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Time"
    }

    class "_class_absinthnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "absinth.n.wn.food"
        string rdf:definition = "strong green liqueur flavored with wormwood and anise"
    }

    class "_class_liqueurnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "liqueur.n.wn.food"
        string rdf:definition = "strong highly flavored sweet liquor usually drunk after a meal"
    }

    class "_class_absolute_alcoholnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "absolute_alcohol.n.wn.substance"
        string rdf:definition = "pure ethyl alcohol (containing no more than 1% water)"
    }

    class "_class_ethyl_alcoholnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ethyl_alcohol.n.wn.substance"
        string rdf:definition = "the intoxicating agent in fermented and distilled liquors; used pure or denatured as a solvent or in medicines and colognes and cleaning solutions and rocket fuel; proposed as a renewable clean-burning additive to gasoline"
    }

    class "_class_abstract" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "abstract"
    }

    class "_class_accessnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "access.n.wn.artifact"
        string rdf:definition = 'a way of entering or leaving; "he took a wrong turn on the access to the bridge"'
    }

    class "_class_openingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "opening.n.wn.artifact"
        string rdf:definition = 'a vacant or unobstructed space that is man-made; "they left a small opening for the cat at the bottom of the door"'
    }

    class "_class_waynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "way.n.wn.artifact"
        string rdf:definition = 'any artifact consisting of a road or path affording passage from one place to another; "he said he was looking for the way out"'
    }

    class "_class_accommodatevwnstativeLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "accommodate.v.wn.stative.Location"
    }

    class "_class_acerolanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "acerola.n.wn.food"
        string rdf:definition = "acid red or yellow cherry-like fruit of a tropical American shrub very rich in vitamin C"
    }

    class "_class_berrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "berry.n.wn.food"
        string rdf:definition = "any of numerous small and pulpy edible fruits; used as desserts or in making jams and jellies and preserves"
    }

    class "_class_acidophilus_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "acidophilus_milk.n.wn.food"
        string rdf:definition = "milk fermented by bacteria; used to treat gastrointestinal disorders"
    }

    class "_class_milknwnfoodbeverage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "milk.n.wn.food..beverage"
        string rdf:definition = "a white nutritious liquid secreted by mammals and used as food by human beings"
    }

    class "_class_ackeenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ackee.n.wn.food"
        string rdf:definition = "red pear-shaped tropical fruit with poisonous seeds; flesh is poisonous when unripe or overripe"
    }

    class "_class_edible_fruitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "edible_fruit.n.wn.food"
        string rdf:definition = "edible reproductive body of a seed plant especially one having sweet flesh"
    }

    class "_class_acorn_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "acorn_squash.n.wn.food"
        string rdf:definition = "small dark green or yellow ribbed squash with yellow to orange flesh"
    }

    class "_class_winter_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "winter_squash.n.wn.food"
        string rdf:definition = "any of various fruits of the gourd family with thick rinds and edible yellow to orange flesh that mature in the fall and can be stored for several months"
    }

    class "_class_administervwnmedicineTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "administer.v.wn.medicine.Theme"
    }

    class "_class_aerosolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "aerosol.n.wn.artifact"
        string rdf:definition = "a dispenser that holds a substance under pressure and that can release it as a fine spray (usually by means of a propellant gas)"
    }

    class "_class_air_conditionernwnartifactappliance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "air_conditioner.n.wn.artifact..appliance"
        string rdf:definition = 'an appliance designed to extract humidity from the air and thereby cool it; "we rarely turn on the air-conditioner"'
    }

    class "_class_appliancenwnartifactdurables" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "appliance.n.wn.artifact..durables"
        string rdf:definition = "durable goods for home or office use"
    }

    class "_class_airbrushnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "airbrush.n.wn.artifact"
        string rdf:definition = "an atomizer to spray paint by means of compressed air"
    }

    class "_class_atomizernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "atomizer.n.wn.artifact"
        string rdf:definition = "a dispenser that turns a liquid (such as perfume) into a fine mist"
    }

    class "_class_airing_cupboardnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "airing_cupboard.n.wn.artifact"
        string rdf:definition = "a warm cupboard where you put newly washed clothes until they are completely dry"
    }

    class "_class_alcoholnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "alcohol.n.wn.food"
        string rdf:definition = 'a liquor or brew containing alcohol as the active agent; "alcohol (or drink) ruined him"'
    }

    class "_class_beveragenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beverage.n.wn.food"
        string rdf:definition = 'any liquid suitable for drinking; "may I take your beverage order?"'
    }

    class "_class_alcoholnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "alcohol.n.wn.substance"
        string rdf:definition = "any of a series of volatile hydroxyl compounds that are made from hydrocarbons by distillation"
    }

    class "_class_liquidnwnstate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "liquid.n.wn.state"
        string rdf:definition = "the state in which a substance exhibits a characteristic readiness to flow with little or no tendency to disperse and relatively high incompressibility"
    }

    class "_class_alenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ale.n.wn.food"
        string rdf:definition = "a general name for beer made with a top fermenting yeast; in some of the United States an ale is (by law) a brew of more than 4% alcohol by volume"
    }

    class "_class_beernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beer.n.wn.food"
        string rdf:definition = "a general name for alcoholic beverages made by fermenting a cereal (or mixture of cereals) flavored with hops"
    }

    class "_class_alfalfa_sproutnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "alfalfa_sprout.n.wn.food"
        string rdf:definition = "sprouted alfalfa seeds"
    }

    class "_class_sproutnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sprout.n.wn.food"
        string rdf:definition = "a newly grown bud (especially from a germinating seed)"
    }

    class "_class_almond_cookienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "almond_cookie.n.wn.food"
        string rdf:definition = "very rich cookie containing ground almonds; usually crescent-shaped"
    }

    class "_class_cookienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cookie.n.wn.food"
        string rdf:definition = "any of various small flat sweet cakes (`biscuit' is the British term)"
    }

    class "_class_altarnwnartifactcommunion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "altar.n.wn.artifact..communion"
        string rdf:definition = "the table in Christian churches where communion is given"
    }

    class "_class_altar_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "altar_wine.n.wn.food"
        string rdf:definition = "used in a communion service"
    }

    class "_class_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wine.n.wn.food"
        string rdf:definition = "fermented juice (of grapes especially)"
    }

    class "_class_amarellenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "amarelle.n.wn.food"
        string rdf:definition = "pale red sour cherry with colorless or nearly colorless juice"
    }

    class "_class_sour_cherrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sour_cherry.n.wn.food"
        string rdf:definition = "acid cherries used for pies and preserves"
    }

    class "_class_amarettonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "amaretto.n.wn.food"
        string rdf:definition = "an Italian almond liqueur"
    }

    class "_class_amelanchiernwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "amelanchier.n.wn.plant"
        string rdf:definition = "North American deciduous trees or shrubs"
    }

    class "_class_raisinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "raisin.n.wn.food"
        string rdf:definition = "dried grape"
    }

    class "_class_amontilladonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "amontillado.n.wn.food"
        string rdf:definition = "pale medium-dry sherry from Spain"
    }

    class "_class_sherrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sherry.n.wn.food"
        string rdf:definition = "dry to sweet amber wine from the Jerez region of southern Spain or similar wines produced elsewhere; usually drunk as an aperitif"
    }

    class "_class_amphoranwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "amphora.n.wn.artifact"
        string rdf:definition = "an ancient jar with two handles and a narrow neck; used to hold oil or wine"
    }

    class "_class_ampullanwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ampulla.n.wn.artifact"
        string rdf:definition = "a flask that has two handles; used by Romans for wines or oils"
    }

    class "_class_flasknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flask.n.wn.artifact"
        string rdf:definition = "bottle that has a narrow neck"
    }

    class "_class_anadama_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "anadama_bread.n.wn.food"
        string rdf:definition = "a yeast-raised bread made of white flour and cornmeal and molasses"
    }

    class "_class_anchorvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "anchor.v.wn.contact.Patient"
    }

    class "_class_anchovy_pearnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "anchovy_pear.n.wn.food"
        string rdf:definition = "West Indian fruit resembling the mango; often pickled"
    }

    class "_class_angel_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "angel_cake.n.wn.food"
        string rdf:definition = "a light sponge cake made without egg yolks"
    }

    class "_class_sponge_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sponge_cake.n.wn.food"
        string rdf:definition = "a light porous cake made with eggs and flour and sugar without shortening"
    }

    class "_class_animalnwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "animal.n.wn.animal"
    }

    class "_class_animate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "animate"
    }

    class "_class_anise_cookienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "anise_cookie.n.wn.food"
        string rdf:definition = "cookie made without butter and flavored with anise seed"
    }

    class "_class_anisettenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "anisette.n.wn.food"
        string rdf:definition = "liquorice-flavored usually colorless sweet liqueur made from aniseed"
    }

    class "_class_anjounwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "anjou.n.wn.food"
        string rdf:definition = "a pear with firm flesh and a green skin"
    }

    class "_class_pearnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pear.n.wn.food"
        string rdf:definition = "sweet juicy gritty-textured fruit available in many varieties"
    }

    class "_class_aperitifnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "aperitif.n.wn.food"
        string rdf:definition = "alcoholic beverage taken before a meal as an appetizer"
    }

    class "_class_appearvwnchangeTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "appear.v.wn.change.Theme"
    }

    class "_class_appendagenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "appendage.n.wn.artifact"
        string rdf:definition = "a part that is joined to something larger"
    }

    class "_class_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "apple.n.wn.food"
        string rdf:definition = "fruit with red or yellow or green skin and sweet to tart crisp whitish flesh"
    }

    class "_class_pomenwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pome.n.wn.plant"
        string rdf:definition = "a fleshy fruit (apple or pear or related fruits) having seed chambers and an outer fleshy part"
    }

    class "_class_corevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "core.v.wn.contact.Patient"
    }

    class "_class_indentvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "indent.v.wn.contact.Patient"
    }

    class "_class_lumpvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lump.v.wn.contact.Patient"
    }

    class "_class_apple_fritternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "apple_fritter.n.wn.food"
        string rdf:definition = "fritter containing sliced apple"
    }

    class "_class_fritternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fritter.n.wn.food"
        string rdf:definition = "small quantity of fried batter containing fruit or meat or vegetables"
    }

    class "_class_apple_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "apple_juice.n.wn.food"
        string rdf:definition = "the juice of apples"
    }

    class "_class_fruit_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fruit_juice.n.wn.food"
        string rdf:definition = "drink produced by squeezing or crushing fruit"
    }

    class "_class_apple_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "apple_pie.n.wn.food"
        string rdf:definition = "pie (with a top crust) containing sliced apples and sugar"
    }

    class "_class_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pie.n.wn.food"
        string rdf:definition = "dish baked in pastry-lined pan often with a pastry top"
    }

    class "_class_apple_tartnwnfoodpie" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "apple_tart.n.wn.food..pie"
        string rdf:definition = "a small open pie filled with sliced apples and sugar"
    }

    class "_class_apple_tartnwnfoodtart" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "apple_tart.n.wn.food..tart"
        string rdf:definition = "a tart filled with sliced apples and sugar"
    }

    class "_class_applejacknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "applejack.n.wn.food"
        string rdf:definition = "distilled from hard cider"
    }

    class "_class_brandynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brandy.n.wn.food"
        string rdf:definition = "distilled from wine or fermented fruit juice"
    }

    class "_class_applesauce_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "applesauce_cake.n.wn.food"
        string rdf:definition = "moist spicy cake containing applesauce"
    }

    class "_class_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cake.n.wn.food"
        string rdf:definition = "baked goods made from or based on a mixture of flour, sugar, eggs, and fat"
    }

    class "_class_durablesnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "durables.n.wn.artifact"
        string rdf:definition = "consumer goods that are not destroyed by use"
    }

    class "_class_switch_offvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "switch_off.v.wn.contact.Theme"
    }

    class "_class_switch_onvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "switch_on.v.wn.contact.Theme"
    }

    class "_class_turn_offvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turn_off.v.wn.contact.Theme"
    }

    class "_class_turn_onvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turn_on.v.wn.contact.Theme"
    }

    class "_class_apricotnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "apricot.n.wn.food"
        string rdf:definition = "downy yellow to rosy-colored fruit resembling a small peach"
    }

    class "_class_apricot_barnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "apricot_bar.n.wn.food"
        string rdf:definition = "fruit bar containing apricot jam"
    }

    class "_class_fruit_barnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fruit_bar.n.wn.food"
        string rdf:definition = "cookies containing chopped fruits either mixed in the dough or spread between layers of dough then baked and cut in bars"
    }

    class "_class_aqua_vitaenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "aqua_vitae.n.wn.food"
        string rdf:definition = "strong distilled liquor or brandy"
    }

    class "_class_liquornwnfoodalcohol" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "liquor.n.wn.food..alcohol"
        string rdf:definition = "an alcoholic beverage that is distilled rather than fermented"
    }

    class "_class_aquavitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "aquavit.n.wn.food"
        string rdf:definition = "Scandinavian liquor usually flavored with caraway seeds"
    }

    class "_class_areanwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "area.n.wn.artifact"
        string rdf:definition = 'a part of a structure having some specific characteristic or function; "the spacious cooking area provided plenty of room for servants"'
    }

    class "_class_structurenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "structure.n.wn.artifact"
        string rdf:definition = 'a thing constructed; a complex entity constructed of many parts; "the structure consisted of a series of arches"; "she wore her hair in an amazing construction of whirls and ribbons"'
    }

    class "_class_surroundvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "surround.v.wn.contact.Theme"
    }

    class "_class_argyllnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "argyll.n.wn.artifact"
        string rdf:definition = "a covered gravy holder of silver or other metal containing a detachable central vessel for hot water to keep the gravy warm"
    }

    class "_class_gravy_boatnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gravy_boat.n.wn.artifact"
        string rdf:definition = "a dish (often boat-shaped) for serving gravy or sauce"
    }

    class "_class_armagnacnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "armagnac.n.wn.food"
        string rdf:definition = "dry brandy distilled in the Armagnac district of France"
    }

    class "_class_armoirenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "armoire.n.wn.artifact"
        string rdf:definition = "a large wardrobe or cabinet; originally used for storing weapons"
    }

    class "_class_arracknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "arrack.n.wn.food"
        string rdf:definition = "any of various strong liquors distilled from the fermented sap of toddy palms or from fermented molasses"
    }

    class "_class_artichokenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "artichoke.n.wn.food"
        string rdf:definition = "a thistlelike flower head with edible fleshy leaves and heart"
    }

    class "_class_vegetablenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vegetable.n.wn.food"
        string rdf:definition = "edible seeds or roots or stems or leaves or bulbs or tubers or nonsweet fruits of any of numerous herbaceous plant"
    }

    class "_class_artichoke_heartnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "artichoke_heart.n.wn.food"
        string rdf:definition = "the tender fleshy center of the immature artichoke flower"
    }

    class "_class_ascendvwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ascend.v.wn.motion.Theme"
    }

    class "_class_ashcakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ashcake.n.wn.food"
        string rdf:definition = "corn bread wrapped in cabbage leaves and baked in hot ashes (southern)"
    }

    class "_class_cornbreadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cornbread.n.wn.food"
        string rdf:definition = "bread made primarily of cornmeal"
    }

    class "_class_asparagusnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "asparagus.n.wn.food"
        string rdf:definition = "edible young shoots of the asparagus plant"
    }

    class "_class_aspiratevwncontactLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "aspirate.v.wn.contact.Location"
    }

    class "_class_atolenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "atole.n.wn.food"
        string rdf:definition = "eaten as mush or as a thin gruel"
    }

    class "_class_mushnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mush.n.wn.food"
        string rdf:definition = "cornmeal boiled in water"
    }

    class "_class_atticnwnarchitecture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "attic.n.wn.architecture"
        string rdf:definition = "(architecture) a low wall at the top of the entablature; hides the roof"
    }

    class "_class_avocadonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "avocado.n.wn.food"
        string rdf:definition = "a pear-shaped tropical fruit with green or blackish skin and rich yellowish pulp enclosing a single large seed"
    }

    class "_class_ax_handlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ax_handle.n.wn.artifact"
        string rdf:definition = "the handle of an ax"
    }

    class "_class_babanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baba.n.wn.food"
        string rdf:definition = "a small cake leavened with yeast"
    }

    class "_class_baba_au_rhumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baba_au_rhum.n.wn.food"
        string rdf:definition = "a baba soaked in rum"
    }

    class "_class_baby_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baby_bed.n.wn.artifact"
        string rdf:definition = "a small bed for babies; enclosed by sides to prevent the baby from falling"
    }

    class "_class_bednwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bed.n.wn.artifact..furniture"
        string rdf:definition = 'a piece of furniture that provides a place to sleep; "he sat on the edge of the bed"; "the room had only a bed and chair"'
    }

    class "_class_back_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "back_door.n.wn.artifact"
        string rdf:definition = "an entrance at the rear of a building"
    }

    class "_class_exterior_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "exterior_door.n.wn.artifact"
        string rdf:definition = "a doorway that allows entrance to or exit from a building"
    }

    class "_class_bacon_and_eggsnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bacon_and_eggs.n.wn.food"
        string rdf:definition = "eggs (fried or scrambled) served with bacon"
    }

    class "_class_breakfast_foodnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "breakfast_food.n.wn.food"
        string rdf:definition = "any food (especially cereal) usually served for breakfast"
    }

    class "_class_foodnwnfoodsolid" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "food.n.wn.food..solid"
        string rdf:definition = 'any solid substance (as opposed to liquid) that is used as a source of nourishment; "food and drink"'
    }

    class "_class_perishablesnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "perishables.n.wn.food"
        string rdf:definition = "food that will decay rapidly if not refrigerated"
    }

    class "_class_bacon_lettuce_tomato_sandwichnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bacon_lettuce_tomato_sandwich.n.wn.food"
        string rdf:definition = "sandwich filled with slices of bacon and tomato with lettuce"
    }

    class "_class_sandwichnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sandwich.n.wn.food"
        string rdf:definition = "two (or more) slices of bread with a filling between them"
    }

    class "_class_bagelnwnyiddish" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bagel.n.wn.yiddish"
        string rdf:definition = "(Yiddish) glazed yeast-raised doughnut-shaped roll with hard crust"
    }

    class "_class_bunnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bun.n.wn.food"
        string rdf:definition = "small rounded bread either plain or sweet"
    }

    class "_class_baguetnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baguet.n.wn.food"
        string rdf:definition = "narrow French stick loaf"
    }

    class "_class_french_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "french_bread.n.wn.food"
        string rdf:definition = "a crusty sourdough bread often baked in long slender tapered loaves or baguettes"
    }

    class "_class_bakevwncookingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bake.v.wn.cooking.Patient"
    }

    class "_class_foodnwnfoodservable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "food.n.wn.food..servable"
        string rdf:definition = "[DFL auxiliary concept, not in WordNet] food that can be served and eaten"
    }

    class "_class_baked_potatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baked_potato.n.wn.food"
        string rdf:definition = "potato that has been cooked by baking it in an oven"
    }

    class "_class_potatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "potato.n.wn.food"
        string rdf:definition = "an edible tuber native to South America; a staple food of Ireland"
    }

    class "_class_baking_pannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baking_pan.n.wn.artifact"
        string rdf:definition = "(auxiliary concept, not in WordNET) a pan used for baking food"
    }

    class "_class_baking_powder_biscuitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baking_powder_biscuit.n.wn.food"
        string rdf:definition = "leavened with baking powder"
    }

    class "_class_biscuitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "biscuit.n.wn.food"
        string rdf:definition = "small round bread leavened with baking-powder or soda"
    }

    class "_class_baklavanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baklava.n.wn.food"
        string rdf:definition = "rich Middle Eastern cake made of thin layers of flaky pastry filled with nuts and honey"
    }

    class "_class_pastrynwnfoodbaked_goods" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pastry.n.wn.food..baked_goods"
        string rdf:definition = "any of various baked foods made of dough or batter"
    }

    class "_class_baldwinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baldwin.n.wn.food"
        string rdf:definition = "an American eating apple with red or yellow and red skin"
    }

    class "_class_eating_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eating_apple.n.wn.food"
        string rdf:definition = "an apple used primarily for eating raw without cooking"
    }

    class "_class_bamboo_shootnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bamboo_shoot.n.wn.food"
        string rdf:definition = "edible young shoots of bamboo"
    }

    class "_class_banananwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "banana.n.wn.food"
        string rdf:definition = "elongated crescent-shaped yellow fruit with soft sweet flesh"
    }

    class "_class_banana_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "banana_bread.n.wn.food"
        string rdf:definition = "moist bread containing banana pulp"
    }

    class "_class_quick_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "quick_bread.n.wn.food"
        string rdf:definition = "breads made with a leavening agent that permits immediate baking"
    }

    class "_class_bannocknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bannock.n.wn.food"
        string rdf:definition = "a flat bread made of oat or barley flour; common in New England and Scotland"
    }

    class "_class_flatbreadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flatbread.n.wn.food"
        string rdf:definition = "any of various breads made from usually unleavened dough"
    }

    class "_class_banquettenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "banquette.n.wn.artifact"
        string rdf:definition = "an upholstered bench"
    }

    class "_class_benchnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bench.n.wn.artifact"
        string rdf:definition = "a long seat for more than one person"
    }

    class "_class_bapnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bap.n.wn.food"
        string rdf:definition = "a small loaf or roll of soft bread"
    }

    class "_class_barnwnartifactcounter" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bar.n.wn.artifact..counter"
        string rdf:definition = 'a counter where you can obtain food or drink; "he bought a hot dog and a coke at the bar"'
    }

    class "_class_counternwnartifacttable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "counter.n.wn.artifact..table"
        string rdf:definition = "table consisting of a horizontal surface over which business is transacted"
    }

    class "_class_barbados_gooseberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barbados_gooseberry.n.wn.food"
        string rdf:definition = "small yellow to orange fruit of the Barbados gooseberry cactus used in desserts and preserves and jellies"
    }

    class "_class_barbecuevwncookingInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barbecue.v.wn.cooking.Instrument"
    }

    class "_class_barbecuevwncookingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barbecue.v.wn.cooking.Patient"
    }

    class "_class_barber_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barber_chair.n.wn.artifact"
        string rdf:definition = "a large fixed adjustable chair in which barbers seat their customers"
    }

    class "_class_barmbracknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barmbrack.n.wn.food"
        string rdf:definition = "a rich currant cake or bun"
    }

    class "_class_barn_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barn_door.n.wn.artifact"
        string rdf:definition = "the large sliding door of a barn"
    }

    class "_class_sliding_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sliding_door.n.wn.artifact"
        string rdf:definition = "a door that opens by sliding instead of swinging"
    }

    class "_class_barongnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barong.n.wn.artifact"
        string rdf:definition = "a knife resembling a cleaver; used in the Philippines"
    }

    class "_class_barricadevwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barricade.v.wn.contact.Instrument"
    }

    class "_class_barriernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barrier.n.wn.artifact"
        string rdf:definition = "a structure or object that impedes free movement"
    }

    class "_class_obstructionnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "obstruction.n.wn.artifact"
        string rdf:definition = "any structure that makes progress difficult"
    }

    class "_class_bartlettnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bartlett.n.wn.food"
        string rdf:definition = "juicy yellow pear"
    }

    class "_class_basket_hiltnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "basket_hilt.n.wn.artifact"
        string rdf:definition = "a hilt with a basket-shaped guard for the hand"
    }

    class "_class_hiltnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hilt.n.wn.artifact"
        string rdf:definition = "the handle of a sword or dagger"
    }

    class "_class_bassinetnwnartifactbaby_bed" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bassinet.n.wn.artifact..baby_bed"
        string rdf:definition = "a basket (usually hooded) used as a baby's bed"
    }

    class "_class_basternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baster.n.wn.artifact"
        string rdf:definition = "a tube with a rubber bulb used to take up and release melted fat or gravy in order to moisten roasting meat"
    }

    class "_class_cooking_utensilnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cooking_utensil.n.wn.artifact"
        string rdf:definition = "a kitchen utensil made of material that does not melt easily; used for cooking"
    }

    class "_class_bath_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bath_chair.n.wn.artifact"
        string rdf:definition = "a wheelchair usually pushed by an attendant, as at a spa"
    }

    class "_class_wheelchairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wheelchair.n.wn.artifact"
        string rdf:definition = "a movable chair mounted on large wheels; for invalids or those who cannot walk; frequently propelled by the occupant"
    }

    class "_class_bathtub_ginnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bathtub_gin.n.wn.food"
        string rdf:definition = "homemade gin especially that made illegally"
    }

    class "_class_ginnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gin.n.wn.food"
        string rdf:definition = "strong liquor flavored with juniper berries"
    }

    class "_class_batwingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "batwing.n.wn.artifact"
        string rdf:definition = "one of a pair of swinging doors (as at the entrance to a western saloon)"
    }

    class "_class_swing_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "swing_door.n.wn.artifact"
        string rdf:definition = "a door that swings on a double hinge; opens in either direction"
    }

    class "_class_beach_plumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beach_plum.n.wn.food"
        string rdf:definition = "small dark purple fruit used especially in jams and pies"
    }

    class "_class_plumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plum.n.wn.food"
        string rdf:definition = "any of numerous varieties of small to medium-sized round or oval fruit having a smooth skin and a single pit"
    }

    class "_class_beakernwnartifactcup" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beaker.n.wn.artifact..cup"
        string rdf:definition = "a cup (usually without a handle)"
    }

    class "_class_beakernwnartifactjar" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beaker.n.wn.artifact..jar"
        string rdf:definition = "a flatbottomed jar made of glass or plastic; used for chemistry"
    }

    class "_class_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bean.n.wn.food"
        string rdf:definition = "any of various edible seeds of plants of the family Leguminosae used for food"
    }

    class "_class_legumenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "legume.n.wn.food"
        string rdf:definition = "the seedpod of a leguminous plant (such as peas or beans or lentils)"
    }

    class "_class_bean_sproutnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bean_sprout.n.wn.food"
        string rdf:definition = "any of various sprouted beans: especially mung beans or lentils or edible soybeans"
    }

    class "_class_bearvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bear.v.wn.contact.Theme"
    }

    class "_class_bear_clawnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bear_claw.n.wn.food"
        string rdf:definition = "almond-flavored yeast-raised pastry shaped in an irregular semicircle resembling a bear's claw"
    }

    class "_class_sweet_rollnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_roll.n.wn.food"
        string rdf:definition = "any of numerous yeast-raised sweet rolls with our without raisins or nuts or spices or a glaze"
    }

    class "_class_bearing_wallnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bearing_wall.n.wn.artifact"
        string rdf:definition = "any wall supporting a floor or the roof of a building"
    }

    class "_class_supportnwnartifactdevice" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "support.n.wn.artifact..device"
        string rdf:definition = 'any device that bears the weight of another thing; "there was no place to attach supports for a shelf"'
    }

    class "_class_beaujolaisnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beaujolais.n.wn.food"
        string rdf:definition = "dry fruity light red wine drunk within a few months after it is made; from the Beaujolais district in southeastern France"
    }

    class "_class_burgundynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "burgundy.n.wn.food"
        string rdf:definition = "red table wine from the Burgundy region of France (or any similar wine made elsewhere)"
    }

    class "_class_red_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "red_wine.n.wn.food"
        string rdf:definition = "wine having a red color derived from skins of dark-colored grapes"
    }

    class "_class_bedroom_furniturenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bedroom_furniture.n.wn.artifact"
        string rdf:definition = "furniture intended for use in a bedroom"
    }

    class "_class_bedsteadnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bedstead.n.wn.artifact"
        string rdf:definition = "the framework of a bed"
    }

    class "_class_restvwnbodyTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rest.v.wn.body.Theme"
    }

    class "_class_sleepvwnbodyTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sleep.v.wn.body.Theme"
    }

    class "_class_beefnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beef.n.wn.food"
        string rdf:definition = "meat from an adult domestic bovine"
    }

    class "_class_foodnwnfoodcookable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "food.n.wn.food..cookable"
        string rdf:definition = "[DFL auxiliary concept, not in WordNet] substance, plant or animal tissue, or other matter than can be cooked and transformed into edible food"
    }

    class "_class_meatnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "meat.n.wn.food"
        string rdf:definition = "the flesh of animals (including fishes and birds and snails) used as food"
    }

    class "_class_beefsteaknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beefsteak.n.wn.food"
        string rdf:definition = "a beef steak usually cooked by broiling"
    }

    class "_class_steaknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "steak.n.wn.food"
        string rdf:definition = "a slice of meat cut from the fleshy part of an animal or large fish"
    }

    class "_class_beefsteak_tomatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beefsteak_tomato.n.wn.food"
        string rdf:definition = "any of several large tomatoes with thick flesh"
    }

    class "_class_tomatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tomato.n.wn.food"
        string rdf:definition = "mildly acid red or yellow pulpy fruit eaten as a vegetable"
    }

    class "_class_brewnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brew.n.wn.food"
        string rdf:definition = "drink made by steeping and boiling and fermenting rather than distilling"
    }

    class "_class_beer_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beer_bottle.n.wn.artifact"
        string rdf:definition = "a bottle that holds beer"
    }

    class "_class_beer_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beer_glass.n.wn.artifact"
        string rdf:definition = "a relatively large glass for serving beer"
    }

    class "_class_beer_mugnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beer_mug.n.wn.artifact"
        string rdf:definition = "a mug intended for serving beer"
    }

    class "_class_mugnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mug.n.wn.artifact"
        string rdf:definition = "with handle and usually cylindrical"
    }

    class "_class_beetnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beet.n.wn.food"
        string rdf:definition = "round red root vegetable"
    }

    class "_class_root_vegetablenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "root_vegetable.n.wn.food"
        string rdf:definition = "any of various fleshy edible underground roots or tubers"
    }

    class "_class_beet_greennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beet_green.n.wn.food"
        string rdf:definition = "young leaves of the beetroot"
    }

    class "_class_greensnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "greens.n.wn.food"
        string rdf:definition = "any of various leafy plants or their leaves and stems eaten as vegetables"
    }

    class "_class_belgian_endivenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "belgian_endive.n.wn.food"
        string rdf:definition = "young broad-leaved endive plant deprived of light to form a narrow whitish head"
    }

    class "_class_chicory_escarolenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chicory_escarole.n.wn.food"
        string rdf:definition = "variety of endive having leaves with irregular frilled edges"
    }

    class "_class_belgian_wafflenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "belgian_waffle.n.wn.food"
        string rdf:definition = "thick sweet waffle often eaten with ice cream or fruit sauce"
    }

    class "_class_wafflenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "waffle.n.wn.food"
        string rdf:definition = "pancake batter baked in a waffle iron"
    }

    class "_class_bell_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bell_apple.n.wn.food"
        string rdf:definition = "the edible yellow fruit of the Jamaica honeysuckle"
    }

    class "_class_passion_fruitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "passion_fruit.n.wn.food"
        string rdf:definition = "egg-shaped tropical fruit of certain passionflower vines; used for sherbets and confectionery and drinks"
    }

    class "_class_bell_gablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bell_gable.n.wn.artifact"
        string rdf:definition = "an extension of a gable that serves as a bell cote"
    }

    class "_class_gablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gable.n.wn.artifact"
        string rdf:definition = "the vertical triangular wall between the sloping ends of gable roof"
    }

    class "_class_bell_peppernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bell_pepper.n.wn.food"
        string rdf:definition = "large bell-shaped sweet pepper in green or red or yellow or orange or black varieties"
    }

    class "_class_sweet_peppernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_pepper.n.wn.food"
        string rdf:definition = "large mild crisp thick-walled capsicum peppers usually bell-shaped or somewhat oblong; commonly used in salads"
    }

    class "_class_bellarminenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bellarmine.n.wn.artifact"
        string rdf:definition = "a stoneware drinking jug with a long neck; decorated with a caricature of Cardinal Bellarmine (17th century)"
    }

    class "_class_jugnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jug.n.wn.artifact"
        string rdf:definition = "a large bottle with a narrow mouth"
    }

    class "_class_seatnwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seat.n.wn.artifact..furniture"
        string rdf:definition = 'furniture that is designed for sitting on; "there were not enough seats for all the guests"'
    }

    class "_class_installvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "install.v.wn.contact.Theme"
    }

    class "_class_benchnwnlaw" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bench.n.wn.law"
        string rdf:definition = "(law) the seat for judges in a courtroom"
    }

    class "_class_benedictinenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "benedictine.n.wn.food"
        string rdf:definition = "a French liqueur originally made by Benedictine monks"
    }

    class "_class_berlin_doughnutnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "berlin_doughnut.n.wn.food"
        string rdf:definition = "a raised doughnut filled with jelly or jam"
    }

    class "_class_raised_doughnutnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "raised_doughnut.n.wn.food"
        string rdf:definition = "a doughnut made light with yeast rather than baking powder"
    }

    class "_class_bermuda_onionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bermuda_onion.n.wn.food"
        string rdf:definition = "mild flat onion grown in warm areas"
    }

    class "_class_green_onionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "green_onion.n.wn.food"
        string rdf:definition = "a young onion before the bulb has enlarged; eaten in salads"
    }

    class "_class_squelchvwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "squelch.v.wn.motion.Theme"
    }

    class "_class_berthnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "berth.n.wn.artifact"
        string rdf:definition = "a bed on a ship or train; usually in tiers"
    }

    class "_class_foodnwnfoodliquid" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "food.n.wn.food..liquid"
        string rdf:definition = "[not in ConceptNet or WordNet; a DFL auxiliary concept] food that is mostly liquid and can be drunk"
    }

    class "_class_extractvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "extract.v.wn.contact.Theme"
    }

    class "_class_hydratevwnchangeTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hydrate.v.wn.change.Theme"
    }

    class "_class_bi_fold_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bi_fold_door.n.wn.artifact"
        string rdf:definition = "an interior door"
    }

    class "_class_interior_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "interior_door.n.wn.artifact"
        string rdf:definition = "a door that closes off rooms within a building"
    }

    class "_class_bialynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bialy.n.wn.food"
        string rdf:definition = "flat crusty-bottomed onion roll"
    }

    class "_class_onion_rollnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "onion_roll.n.wn.food"
        string rdf:definition = "yeast-raised roll flavored with onion"
    }

    class "_class_bibb_lettucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bibb_lettuce.n.wn.food"
        string rdf:definition = "lettuce with relatively crisp leaves"
    }

    class "_class_butterhead_lettucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "butterhead_lettuce.n.wn.food"
        string rdf:definition = "lettuce with relatively soft leaves in a loose head; easily broken or bruised"
    }

    class "_class_biernwnartifactstand" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bier.n.wn.artifact..stand"
        string rdf:definition = "a stand to support a corpse or a coffin prior to burial"
    }

    class "_class_bilberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bilberry.n.wn.food"
        string rdf:definition = "blue-black berries similar to American blueberries"
    }

    class "_class_blueberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blueberry.n.wn.food"
        string rdf:definition = "sweet edible dark-blue berries of either low-growing or high-growing blueberry plants"
    }

    class "_class_bilenwnbody" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bile.n.wn.body"
        string rdf:definition = "a digestive juice secreted by the liver and stored in the gallbladder; aids in the digestion of fats"
    }

    class "_class_digestive_juicenwnbody" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "digestive_juice.n.wn.body"
        string rdf:definition = "secretions that aid digestion"
    }

    class "_class_billowvwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "billow.v.wn.motion.Theme"
    }

    class "_class_bing_cherrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bing_cherry.n.wn.food"
        string rdf:definition = "dark red or blackish sweet cherry"
    }

    class "_class_sweet_cherrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_cherry.n.wn.food"
        string rdf:definition = "any of several fruits of cultivated cherry trees that have sweet flesh"
    }

    class "_class_birch_beernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "birch_beer.n.wn.food"
        string rdf:definition = "carbonated drink containing an extract from bark of birch trees"
    }

    class "_class_popnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pop.n.wn.food"
        string rdf:definition = 'a sweet drink containing carbonated water and flavoring; "in New England they call sodas tonics"'
    }

    class "_class_birthday_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "birthday_cake.n.wn.food"
        string rdf:definition = "decorated cake served at a birthday party"
    }

    class "_class_bishopnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bishop.n.wn.food"
        string rdf:definition = "port wine mulled with oranges and cloves"
    }

    class "_class_gloggnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "glogg.n.wn.food"
        string rdf:definition = "Scandinavian punch made of claret and aquavit with spices and raisins and orange peel and sugar"
    }

    class "_class_bitevwncontactbitingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bite.v.wn.contact..biting.Patient"
    }

    class "_class_bitternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bitter.n.wn.food"
        string rdf:definition = "English term for a dry sharp-tasting ale with strong flavor of hops (usually on draft)"
    }

    class "_class_bitter_lemonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bitter_lemon.n.wn.food"
        string rdf:definition = "tart lemon-flavored carbonated drink"
    }

    class "_class_bitter_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bitter_orange.n.wn.food"
        string rdf:definition = "highly acidic orange used especially in marmalade"
    }

    class "_class_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "orange.n.wn.food"
        string rdf:definition = "round yellow to orange fruit of any of several citrus trees"
    }

    class "_class_bittersnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bitters.n.wn.food"
        string rdf:definition = "alcoholic liquor flavored with bitter herbs and roots"
    }

    class "_class_black_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "black_bean.n.wn.food"
        string rdf:definition = "black-seeded bean of South America; usually dried"
    }

    class "_class_common_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "common_bean.n.wn.food"
        string rdf:definition = "any of numerous beans eaten either fresh or dried"
    }

    class "_class_black_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "black_bread.n.wn.food"
        string rdf:definition = "bread made of coarse rye flour"
    }

    class "_class_rye_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rye_bread.n.wn.food"
        string rdf:definition = "any of various breads made entirely or partly with rye flour"
    }

    class "_class_black_currantnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "black_currant.n.wn.food"
        string rdf:definition = "small black berries used in jams and jellies"
    }

    class "_class_currantnwnfoodberry" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "currant.n.wn.food..berry"
        string rdf:definition = "any of several tart red or black berries used primarily for jellies and jams"
    }

    class "_class_black_eyed_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "black_eyed_pea.n.wn.food"
        string rdf:definition = "eaten fresh as shell beans or dried"
    }

    class "_class_blackberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blackberry.n.wn.food"
        string rdf:definition = "large sweet black or very dark purple edible aggregate fruit of any of various bushes of the genus Rubus"
    }

    class "_class_drupeletnwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drupelet.n.wn.plant"
        string rdf:definition = "a small part of an aggregate fruit that resembles a drupe"
    }

    class "_class_blackheartnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blackheart.n.wn.food"
        string rdf:definition = "heart cherry with dark flesh and skin cherry"
    }

    class "_class_heart_cherrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "heart_cherry.n.wn.food"
        string rdf:definition = "large heart-shaped sweet cherry with soft flesh"
    }

    class "_class_blendvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blend.v.wn.contact.Patient"
    }

    class "_class_blended_whiskeynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blended_whiskey.n.wn.food"
        string rdf:definition = "mixture of two or more whiskeys or of a whiskey and neutral spirits"
    }

    class "_class_whiskeynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "whiskey.n.wn.food"
        string rdf:definition = "a liquor made from fermented mash of grain"
    }

    class "_class_blender_jarnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blender_jar.n.wn.artifact"
        string rdf:definition = "(auxiliary concept in DFL, not in WordNET) part of a blender, this is a jar, with blades at the bottom, in which the items to be blended are contained"
    }

    class "_class_blininwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blini.n.wn.food"
        string rdf:definition = "Russian pancake of buckwheat flour and yeast; usually served with caviar and sour cream"
    }

    class "_class_blintznwnjudaism" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blintz.n.wn.judaism"
        string rdf:definition = "(Judaism) thin pancake folded around a filling and fried or baked"
    }

    class "_class_bloody_marynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bloody_mary.n.wn.food"
        string rdf:definition = "a cocktail made with vodka and spicy tomato juice"
    }

    class "_class_cocktailnwnfoodmixed_drink" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cocktail.n.wn.food..mixed_drink"
        string rdf:definition = "a short mixed drink"
    }

    class "_class_vodkanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vodka.n.wn.food"
        string rdf:definition = "unaged colorless liquor originating in Russia"
    }

    class "_class_blowernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blower.n.wn.artifact"
        string rdf:definition = "a device that produces a current of air"
    }

    class "_class_claviernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clavier.n.wn.artifact"
        string rdf:definition = "a stringed instrument that has a keyboard"
    }

    class "_class_blueberry_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blueberry_pie.n.wn.food"
        string rdf:definition = "pie containing blueberries and sugar"
    }

    class "_class_blush_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blush_wine.n.wn.food"
        string rdf:definition = "pinkish table wine from red grapes whose skins were removed after fermentation began"
    }

    class "_class_bocknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bock.n.wn.food"
        string rdf:definition = "a very strong lager traditionally brewed in the fall and aged through the winter for consumption in the spring"
    }

    class "_class_lagernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lager.n.wn.food"
        string rdf:definition = "a general term for beer made with bottom fermenting yeast (usually by decoction mashing); originally it was brewed in March or April and matured until September"
    }

    class "_class_body_part" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "body_part"
    }

    class "_class_body_partnwnanatomy" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "body_part.n.wn.anatomy"
        string rdf:definition = "any part of an organism such as an organ or extremity"
    }

    class "_class_boilvwnchangecookingInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boil.v.wn.change..cooking.Instrument"
    }

    class "_class_boilvwnchangecookingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boil.v.wn.change..cooking.Patient"
    }

    class "_class_boilvwnchangeheatingInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boil.v.wn.change..heating.Instrument"
    }

    class "_class_boilvwnchangeheatingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boil.v.wn.change..heating.Patient"
    }

    class "_class_boilvwnchangestate_changePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boil.v.wn.change..state_change.Patient"
    }

    class "_class_boiled_eggnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boiled_egg.n.wn.food"
        string rdf:definition = "egg cooked briefly in the shell in gently boiling water"
    }

    class "_class_eggnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "egg.n.wn.food"
        string rdf:definition = "oval reproductive body of a fowl (especially a hen) used as food"
    }

    class "_class_bok_choynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bok_choy.n.wn.food"
        string rdf:definition = "elongated head of dark green leaves on thick white stalks"
    }

    class "_class_cabbagenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cabbage.n.wn.food"
        string rdf:definition = "any of various types of cabbage"
    }

    class "_class_bolonwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bolo.n.wn.artifact"
        string rdf:definition = "long heavy knife with a single edge; of Philippine origin"
    }

    class "_class_bombernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bomber.n.wn.food"
        string rdf:definition = "a large sandwich made of a long crusty roll split lengthwise and filled with meats and cheese (and tomato and onion and lettuce and condiments); different names are used in different sections of the United States"
    }

    class "_class_bookcasenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bookcase.n.wn.artifact"
        string rdf:definition = "a piece of furniture with shelves for storing books"
    }

    class "_class_shelfnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shelf.n.wn.artifact"
        string rdf:definition = "a support that consists of a horizontal surface for holding objects"
    }

    class "_class_boothnwnartifacttable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "booth.n.wn.artifact..table"
        string rdf:definition = "a table (in a restaurant or bar) surrounded by two high-backed benches"
    }

    class "_class_bordeauxnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bordeaux.n.wn.food"
        string rdf:definition = "any of several red or white wines produced around Bordeaux, France or wines resembling them"
    }

    class "_class_boscnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bosc.n.wn.food"
        string rdf:definition = "greenish-yellow pear"
    }

    class "_class_boston_cream_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boston_cream_pie.n.wn.food"
        string rdf:definition = "layer cake filled with custard"
    }

    class "_class_boston_lettucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boston_lettuce.n.wn.food"
        string rdf:definition = "lettuce with relatively soft leaves"
    }

    class "_class_boston_rockernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boston_rocker.n.wn.artifact"
        string rdf:definition = "a rocking chair that has a high spindle back and a decorative top panel"
    }

    class "_class_rocking_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rocking_chair.n.wn.artifact"
        string rdf:definition = "a chair mounted on rockers"
    }

    class "_class_botanwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bota.n.wn.artifact"
        string rdf:definition = "a wine bottle made of leather"
    }

    class "_class_vesselnwnartifactcontainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vessel.n.wn.artifact..container"
        string rdf:definition = "an object used as a container (especially for liquids)"
    }

    class "_class_bottled_waternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bottled_water.n.wn.food"
        string rdf:definition = "drinking water (often spring water) that is put into bottles and offered for sale"
    }

    class "_class_drinking_waternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drinking_water.n.wn.food"
        string rdf:definition = "water suitable for drinking"
    }

    class "_class_bourbonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bourbon.n.wn.food"
        string rdf:definition = "whiskey distilled from a mash of corn and malt and rye and aged in charred oak barrels"
    }

    class "_class_bowie_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bowie_knife.n.wn.artifact"
        string rdf:definition = "a stout hunting knife with a single edge"
    }

    class "_class_dishnwnartifactcontainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dish.n.wn.artifact..container"
        string rdf:definition = 'a piece of dishware normally used as a container for holding or serving food; "we gave them a set of dishes for a wedding present"'
    }

    class "_class_boxnwnartifactseat" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "box.n.wn.artifact..seat"
        string rdf:definition = "the driver's seat on a coach; \"an armed guard sat in the box with the driver\""
    }

    class "_class_box_seatnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "box_seat.n.wn.artifact"
        string rdf:definition = "a special seat in a theater or grandstand box"
    }

    class "_class_boysenberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boysenberry.n.wn.food"
        string rdf:definition = "large raspberry-flavored fruit; cross between blackberries and raspberries"
    }

    class "_class_bracenwnartifacttool" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brace.n.wn.artifact..tool"
        string rdf:definition = "a carpenter's tool having a crank handle for turning and a socket to hold a bit for boring"
    }

    class "_class_stocknwnartifacthandle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stock.n.wn.artifact..handle"
        string rdf:definition = 'the handle end of some implements or tools; "he grabbed the cue by the stock"'
    }

    class "_class_bramley_ZZ_s_seedlingnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bramley_ZZ_s_seedling.n.wn.food"
        string rdf:definition = "very large cooking apple"
    }

    class "_class_cooking_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cooking_apple.n.wn.food"
        string rdf:definition = "an apple used primarily in cooking for pies and applesauce etc"
    }

    class "_class_bran_flakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bran_flake.n.wn.food"
        string rdf:definition = "wheat flake including the bran"
    }

    class "_class_cold_cerealnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cold_cereal.n.wn.food"
        string rdf:definition = "a cereal that is not heated before serving"
    }

    class "_class_bran_muffinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bran_muffin.n.wn.food"
        string rdf:definition = "muffin containing bran"
    }

    class "_class_muffinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "muffin.n.wn.food"
        string rdf:definition = "a sweet quick bread baked in a cup-shaped pan"
    }

    class "_class_branch_waternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "branch_water.n.wn.food"
        string rdf:definition = "pure natural water from a stream or brook; often distinguished from soda water"
    }

    class "_class_waternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "water.n.wn.food"
        string rdf:definition = 'a liquid necessary for the life of most animals and plants; "he asked for a drink of water"'
    }

    class "_class_brandy_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brandy_glass.n.wn.artifact"
        string rdf:definition = "a globular glass with a small top; used for serving brandy"
    }

    class "_class_brandy_slingnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brandy_sling.n.wn.food"
        string rdf:definition = "a sling made with brandy"
    }

    class "_class_slingnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sling.n.wn.food"
        string rdf:definition = "a highball with liquor and water with sugar and lemon or lime juice"
    }

    class "_class_brandy_snifternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brandy_snifter.n.wn.artifact"
        string rdf:definition = "a globular glass with a small top; used for serving brandy"
    }

    class "_class_brandysnapnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brandysnap.n.wn.food"
        string rdf:definition = "a gingersnap flavored with brandy"
    }

    class "_class_gingersnapnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gingersnap.n.wn.food"
        string rdf:definition = "a crisp round cookie flavored with ginger"
    }

    class "_class_breachvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "breach.v.wn.contact.Patient"
    }

    class "_class_starchesnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "starches.n.wn.food"
        string rdf:definition = "foodstuff rich in natural starch (especially potatoes, rice, bread)"
    }

    class "_class_bread_and_butter_picklenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bread_and_butter_pickle.n.wn.food"
        string rdf:definition = "thinly sliced sweet pickles"
    }

    class "_class_sweet_picklenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_pickle.n.wn.food"
        string rdf:definition = "pickle cured in brine and preserved in sugar and vinegar"
    }

    class "_class_breadfruitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "breadfruit.n.wn.food"
        string rdf:definition = "a large round seedless or seeded fruit with a texture like bread; eaten boiled or baked or roasted or ground into flour; the roasted seeds resemble chestnuts"
    }

    class "_class_breadsticknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "breadstick.n.wn.food"
        string rdf:definition = "a crisp stick-shaped roll; often served with soup"
    }

    class "_class_breakvwnchangeinoperablePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "break.v.wn.change..inoperable.Patient"
    }

    class "_class_breakvwncontactdetachPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "break.v.wn.contact..detach.Patient"
    }

    class "_class_breakfast_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "breakfast_table.n.wn.artifact"
        string rdf:definition = "a table where breakfast is eaten"
    }

    class "_class_briochenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brioche.n.wn.food"
        string rdf:definition = "a light roll rich with eggs and butter and somewhat sweet"
    }

    class "_class_broccolinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "broccoli.n.wn.food"
        string rdf:definition = "branched green undeveloped flower heads"
    }

    class "_class_cruciferous_vegetablenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cruciferous_vegetable.n.wn.food"
        string rdf:definition = "a vegetable of the mustard family: especially mustard greens; various cabbages; broccoli; cauliflower; brussels sprouts"
    }

    class "_class_broccoli_rabenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "broccoli_rabe.n.wn.food"
        string rdf:definition = "slightly bitter dark green leaves and clustered flower buds"
    }

    class "_class_broilernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "broiler.n.wn.artifact"
        string rdf:definition = "an oven or part of a stove used for broiling"
    }

    class "_class_broom_closetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "broom_closet.n.wn.artifact"
        string rdf:definition = "a small room for storing brooms and other cleaning equipment"
    }

    class "_class_broomsticknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "broomstick.n.wn.artifact"
        string rdf:definition = "the handle of a broom"
    }

    class "_class_brown_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brown_bread.n.wn.food"
        string rdf:definition = "dark steamed bread made of cornmeal wheat and flour with molasses and soda and milk or water"
    }

    class "_class_brownienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brownie.n.wn.food"
        string rdf:definition = "square or bar of very rich chocolate cake usually with nuts"
    }

    class "_class_bruisevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bruise.v.wn.contact.Patient"
    }

    class "_class_brussels_sproutnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brussels_sprout.n.wn.food"
        string rdf:definition = "the small edible cabbage-like buds growing along a stalk of the brussels sprout plant"
    }

    class "_class_buckwheat_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "buckwheat_cake.n.wn.food"
        string rdf:definition = "a pancake made with buckwheat flour"
    }

    class "_class_buffetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "buffet.n.wn.artifact"
        string rdf:definition = "a piece of furniture that stands at the side of a dining room; has shelves and drawers"
    }

    class "_class_built_in_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "built_in_bed.n.wn.artifact"
        string rdf:definition = "a bed that is built in and fixed to a wall"
    }

    class "_class_bullock_ZZ_s_heartnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bullock_ZZ_s_heart.n.wn.food"
        string rdf:definition = "large heart-shaped tropical fruit with soft acid pulp"
    }

    class "_class_custard_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "custard_apple.n.wn.food"
        string rdf:definition = "the fruit of any of several tropical American trees of the genus Annona having soft edible pulp"
    }

    class "_class_bullshotnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bullshot.n.wn.food"
        string rdf:definition = "a cocktail made with vodka and beef bouillon or consomme"
    }

    class "_class_bumpernwnartifactglass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bumper.n.wn.artifact..glass"
        string rdf:definition = 'a glass filled to the brim (especially as a toast); "we quaffed a bumper of ale"'
    }

    class "_class_bundlevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bundle.v.wn.contact.Patient"
    }

    class "_class_bundt_pannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bundt_pan.n.wn.artifact"
        string rdf:definition = "(auxiliary concept in DFL, not in WordNET) a baking pan with a hollow circular raised region in the middle"
    }

    class "_class_cakepannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cakepan.n.wn.artifact"
    }

    class "_class_bunknwnartifactbed" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bunk.n.wn.artifact..bed"
        string rdf:definition = "a rough bed (as at a campsite)"
    }

    class "_class_bunk_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bunk_bed.n.wn.artifact"
        string rdf:definition = "beds built one above the other"
    }

    class "_class_burn_downvwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "burn_down.v.wn.change.Patient"
    }

    class "_class_burstvwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "burst.v.wn.change.Patient"
    }

    class "_class_burtonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "burton.n.wn.food"
        string rdf:definition = "a strong dark English ale"
    }

    class "_class_butcher_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "butcher_knife.n.wn.artifact"
        string rdf:definition = "a large sharp knife for cutting or trimming meat"
    }

    class "_class_buttnwnartifactstock_handle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "butt.n.wn.artifact..stock_handle"
        string rdf:definition = "thick end of the handle"
    }

    class "_class_butter_cookienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "butter_cookie.n.wn.food"
        string rdf:definition = "cookie containing much butter"
    }

    class "_class_butter_dishnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "butter_dish.n.wn.artifact"
        string rdf:definition = "a small dish (often with a cover) for holding butter at the table"
    }

    class "_class_butter_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "butter_knife.n.wn.artifact"
        string rdf:definition = "a small knife with a dull blade; for cutting or spreading butter"
    }

    class "_class_buttercrunchnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "buttercrunch.n.wn.food"
        string rdf:definition = "lettuce with delicate and relatively crunchy leaves"
    }

    class "_class_buttercup_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "buttercup_squash.n.wn.food"
        string rdf:definition = "drum-shaped squash with dark green rind marked in silver or grey"
    }

    class "_class_turban_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turban_squash.n.wn.food"
        string rdf:definition = "large squash shaped somewhat like a turban usually with a rounded central portion protruding from the blossom end"
    }

    class "_class_garden_lettucenwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "garden_lettuce.n.wn.plant"
        string rdf:definition = "annual or perennial garden plant having succulent leaves used in salads; widely grown"
    }

    class "_class_lettucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lettuce.n.wn.food"
        string rdf:definition = "leaves of any of various plants of Lactuca sativa"
    }

    class "_class_buttermilknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "buttermilk.n.wn.food"
        string rdf:definition = "residue from making butter from sour raw milk; or pasteurized milk curdled by adding a culture"
    }

    class "_class_buttermilk_biscuitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "buttermilk_biscuit.n.wn.food"
        string rdf:definition = "very tender biscuit partially leavened with buttermilk and soda"
    }

    class "_class_buttermilk_pancakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "buttermilk_pancake.n.wn.food"
        string rdf:definition = "a pancake made with buttermilk"
    }

    class "_class_butternut_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "butternut_squash.n.wn.food"
        string rdf:definition = "buff-colored squash with a long usually straight neck and sweet orange flesh"
    }

    class "_class_buttynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "butty.n.wn.food"
        string rdf:definition = 'a sandwich; "a bacon butty"'
    }

    class "_class_cabernetnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cabernet.n.wn.food"
        string rdf:definition = "superior Bordeaux type of red wine"
    }

    class "_class_cabinetnwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cabinet.n.wn.artifact..furniture"
        string rdf:definition = "a piece of furniture resembling a cupboard with doors and shelves and drawers; for storage or display"
    }

    class "_class_cafe_au_laitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cafe_au_lait.n.wn.food"
        string rdf:definition = "equal parts of coffee and hot milk"
    }

    class "_class_coffeenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee.n.wn.food"
        string rdf:definition = 'a beverage consisting of an infusion of ground coffee beans; "he ordered a cup of coffee"'
    }

    class "_class_cafe_noirnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cafe_noir.n.wn.food"
        string rdf:definition = "small cup of strong black coffee without milk or cream"
    }

    class "_class_cafe_royalenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cafe_royale.n.wn.food"
        string rdf:definition = "black coffee with Cognac and lemon peel and sugar"
    }

    class "_class_caffe_lattenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "caffe_latte.n.wn.food"
        string rdf:definition = "strong espresso coffee with a topping of frothed steamed milk"
    }

    class "_class_espressonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "espresso.n.wn.food"
        string rdf:definition = "strong black coffee brewed by forcing hot water under pressure through finely ground coffee beans"
    }

    class "_class_cajan_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cajan_pea.n.wn.food"
        string rdf:definition = "small highly nutritious seed of the tropical pigeon-pea plant"
    }

    class "_class_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pea.n.wn.food"
        string rdf:definition = "seed of a pea plant used for food"
    }

    class "_class_caldronnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "caldron.n.wn.artifact"
        string rdf:definition = "a very large pot that is used for boiling"
    }

    class "_class_california_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "california_wine.n.wn.food"
        string rdf:definition = "any of various wines produced in California"
    }

    class "_class_calvadosnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "calvados.n.wn.food"
        string rdf:definition = "dry apple brandy made in Normandy"
    }

    class "_class_cambric_teanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cambric_tea.n.wn.food"
        string rdf:definition = "a beverage for children containing hot water and milk and sugar and a small amount of tea"
    }

    class "_class_teanwnfoodbeverage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tea.n.wn.food..beverage"
        string rdf:definition = 'a beverage made by steeping tea leaves in water; "iced tea is a cooling drink"'
    }

    class "_class_camera_tripodnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "camera_tripod.n.wn.artifact"
        string rdf:definition = "a tripod used to support a camera"
    }

    class "_class_tripodnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tripod.n.wn.artifact"
        string rdf:definition = "a three-legged rack used for support"
    }

    class "_class_camomile_teanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "camomile_tea.n.wn.food"
        string rdf:definition = "tea-like drink made from camomile leaves and flowers"
    }

    class "_class_tisanenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tisane.n.wn.food"
        string rdf:definition = "infusion of e.g. dried or fresh flowers or leaves"
    }

    class "_class_camp_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "camp_chair.n.wn.artifact"
        string rdf:definition = "a light folding chair"
    }

    class "_class_folding_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "folding_chair.n.wn.artifact"
        string rdf:definition = "a chair that can be folded flat for storage"
    }

    class "_class_campstoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "campstool.n.wn.artifact"
        string rdf:definition = "a folding stool"
    }

    class "_class_stoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stool.n.wn.artifact"
        string rdf:definition = "a simple seat without a back or arms"
    }

    class "_class_canvwncookingTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "can.v.wn.cooking.Theme"
    }

    class "_class_canary_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "canary_wine.n.wn.food"
        string rdf:definition = "a sweet white wine from the Canary Islands"
    }

    class "_class_white_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "white_wine.n.wn.food"
        string rdf:definition = "pale yellowish wine made from white grapes or red grapes with skins removed before fermentation"
    }

    class "_class_cancer_juicenwnbody" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cancer_juice.n.wn.body"
        string rdf:definition = "a milky substance found in certain cancerous growths"
    }

    class "_class_fruit_drinknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fruit_drink.n.wn.food"
        string rdf:definition = "a sweetened beverage of diluted fruit juice"
    }

    class "_class_juicenwnbody" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "juice.n.wn.body"
        string rdf:definition = 'any of several liquids of the body; "digestive juices"'
    }

    class "_class_candynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "candy.n.wn.food"
        string rdf:definition = "a rich sweet made of flavored sugar and often combined with fruit or nuts"
    }

    class "_class_sweetnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet.n.wn.food"
        string rdf:definition = "a food rich in sugar"
    }

    class "_class_canistelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "canistel.n.wn.food"
        string rdf:definition = "ovoid orange-yellow mealy sweet fruit of Florida and West Indies"
    }

    class "_class_canopic_jarnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "canopic_jar.n.wn.artifact"
        string rdf:definition = "a jar used in ancient Egypt to contain entrails of an embalmed body"
    }

    class "_class_cantaloupnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cantaloup.n.wn.food"
        string rdf:definition = "the fruit of a cantaloup vine; small to medium-sized melon with yellowish flesh"
    }

    class "_class_honeydewnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "honeydew.n.wn.food"
        string rdf:definition = "the fruit of a variety of winter melon vine; a large smooth greenish-white melon with pale green flesh"
    }

    class "_class_muskmelonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "muskmelon.n.wn.food"
        string rdf:definition = "the fruit of a muskmelon vine; any of several sweet melons related to cucumbers"
    }

    class "_class_canteennwnartifactflask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "canteen.n.wn.artifact..flask"
        string rdf:definition = "a flask for carrying water; used by soldiers or travelers"
    }

    class "_class_capernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "caper.n.wn.food"
        string rdf:definition = "pickled flower buds used as a pungent relish in various dishes and sauces"
    }

    class "_class_picklenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pickle.n.wn.food"
        string rdf:definition = "vegetables (especially cucumbers) preserved in brine or vinegar"
    }

    class "_class_cappuccino_coffeenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cappuccino_coffee.n.wn.food"
        string rdf:definition = "equal parts of espresso and hot milk topped with cinnamon and nutmeg and usually whipped cream"
    }

    class "_class_captain_ZZ_s_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "captain_ZZ_s_chair.n.wn.artifact"
        string rdf:definition = "a wooden armchair with a saddle seat and a low back that has vertical spindles"
    }

    class "_class_capulinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "capulin.n.wn.food"
        string rdf:definition = "Mexican black cherry"
    }

    class "_class_cherrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cherry.n.wn.food"
        string rdf:definition = "a red fruit with a single hard stone"
    }

    class "_class_car_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "car_door.n.wn.artifact"
        string rdf:definition = "the door of a car"
    }

    class "_class_carambolanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carambola.n.wn.food"
        string rdf:definition = "deeply ridged yellow-brown tropical fruit; used raw as a vegetable or in salad or when fully ripe as a dessert"
    }

    class "_class_caraway_seed_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "caraway_seed_bread.n.wn.food"
        string rdf:definition = "bread containing caraway seeds"
    }

    class "_class_carboynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carboy.n.wn.artifact"
        string rdf:definition = "a large bottle for holding corrosive liquids; usually cushioned in a special container"
    }

    class "_class_card_cataloguenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "card_catalogue.n.wn.artifact"
        string rdf:definition = "an alphabetical listing of items (e.g., books in a library) with a separate card for each item"
    }

    class "_class_filenwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "file.n.wn.artifact..furniture"
        string rdf:definition = "office furniture consisting of a container for keeping papers in order"
    }

    class "_class_card_tablenwnartifactcasino" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "card_table.n.wn.artifact..casino"
        string rdf:definition = "a table for playing cards (as in a casino)"
    }

    class "_class_card_tablenwnartifacttable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "card_table.n.wn.artifact..table"
        string rdf:definition = "a small light table with folding legs; can be folded for storage"
    }

    class "_class_cardoonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cardoon.n.wn.food"
        string rdf:definition = "only parts eaten are roots and especially stalks (blanched and used as celery); related to artichokes"
    }

    class "_class_cargo_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cargo_door.n.wn.artifact"
        string rdf:definition = "door used to load or unload cargo"
    }

    class "_class_carissa_plumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carissa_plum.n.wn.food"
        string rdf:definition = "edible scarlet plumlike fruit of a South African plant"
    }

    class "_class_carrotnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carrot.n.wn.food"
        string rdf:definition = "orange root; important source of carotene"
    }

    class "_class_gratevwncontactcookingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grate.v.wn.contact..cooking.Patient"
    }

    class "_class_separatevwnmotiondividePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "separate.v.wn.motion..divide.Patient"
    }

    class "_class_carrot_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carrot_juice.n.wn.food"
        string rdf:definition = "usually freshly squeezed juice of carrots"
    }

    class "_class_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "juice.n.wn.food"
        string rdf:definition = "the liquid part that can be extracted from plant or animal tissue by squeezing or cooking"
    }

    class "_class_carrycotnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carrycot.n.wn.artifact"
        string rdf:definition = "box-shaped baby bed with handles (for a baby to sleep in while being carried)"
    }

    class "_class_carvevwncontactcutPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carve.v.wn.contact..cut.Patient"
    }

    class "_class_carving_forknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carving_fork.n.wn.artifact"
        string rdf:definition = "a large fork used in carving cooked meat"
    }

    class "_class_carving_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carving_knife.n.wn.artifact"
        string rdf:definition = "a large knife used to carve cooked meat"
    }

    class "_class_casabanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "casaba.n.wn.food"
        string rdf:definition = "melon having yellowish rind and whitish flesh"
    }

    class "_class_winter_melonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "winter_melon.n.wn.food"
        string rdf:definition = "the fruit of the winter melon vine; a green melon with pale green to orange flesh that keeps well"
    }

    class "_class_case_knifenwnartifactknife_tool" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "case_knife.n.wn.artifact..knife_tool"
        string rdf:definition = "a knife with a fixed blade that is carried in a sheath"
    }

    class "_class_case_knifenwnartifacttable_knife" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "case_knife.n.wn.artifact..table_knife"
        string rdf:definition = "a metal blade with a handle; used as cutlery"
    }

    class "_class_cash_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cash_bar.n.wn.artifact"
        string rdf:definition = "a counter at a large party where you can purchase drinks by the glass"
    }

    class "_class_cash_registernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cash_register.n.wn.artifact"
        string rdf:definition = "a cashbox with an adding machine to register transactions; used in shops to add up the bill"
    }

    class "_class_cashboxnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cashbox.n.wn.artifact"
        string rdf:definition = "a strongbox for holding cash"
    }

    class "_class_strongboxnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "strongbox.n.wn.artifact"
        string rdf:definition = "a strongly made box for holding money or valuables; can be locked"
    }

    class "_class_casserolenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "casserole.n.wn.artifact"
        string rdf:definition = "large deep dish in which food can be cooked and served"
    }

    class "_class_cassirinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cassiri.n.wn.food"
        string rdf:definition = "a drink resembling beer; made from fermented cassava juice"
    }

    class "_class_casternwnartifactshaker" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "caster.n.wn.artifact..shaker"
        string rdf:definition = "a shaker with a perforated top for sprinkling powdered sugar"
    }

    class "_class_castor_sugarnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "castor_sugar.n.wn.food"
        string rdf:definition = "very finely granulated sugar that was formerly sprinkled from a castor"
    }

    class "_class_cheesecakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cheesecake.n.wn.food"
        string rdf:definition = "made with sweetened cream cheese and eggs and cream baked in a crumb crust"
    }

    class "_class_powdered_sugarnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "powdered_sugar.n.wn.food"
        string rdf:definition = "sugar granulated into a fine powder"
    }

    class "_class_cat_bowlnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cat_bowl.n.wn.food"
        string rdf:definition = "(auxiliary concept in DFL, not in WordNET) a pet bowl intended for cats"
    }

    class "_class_pet_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pet_bowl.n.wn.artifact"
        string rdf:definition = "(auxliary concept in DFL, not in WordNET) a bowl used to serve pet food or water to animal companions"
    }

    class "_class_catawbanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "catawba.n.wn.food"
        string rdf:definition = "slipskin grape; a reddish American table grape"
    }

    class "_class_fox_grapenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fox_grape.n.wn.food"
        string rdf:definition = "purplish-black wild grape of the eastern United States with tough skins that slip easily from the flesh; cultivated in many varieties"
    }

    class "_class_cathedranwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cathedra.n.wn.artifact"
        string rdf:definition = "a throne that is the official chair of a bishop"
    }

    class "_class_gaddinwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gaddi.n.wn.artifact"
        string rdf:definition = "a cushion on a throne for a prince in India"
    }

    class "_class_thronenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "throne.n.wn.artifact"
        string rdf:definition = 'the chair of state for a monarch, bishop, etc.; "the king sat on his throne"'
    }

    class "_class_catlingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "catling.n.wn.artifact"
        string rdf:definition = "a long double-edged knife used for amputations"
    }

    class "_class_scalpelnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scalpel.n.wn.artifact"
        string rdf:definition = "a thin straight surgical knife used in dissection and surgery"
    }

    class "_class_surgical_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "surgical_knife.n.wn.artifact"
        string rdf:definition = "a very sharp knife used in surgery"
    }

    class "_class_catsup_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "catsup_bottle.n.wn.artifact"
        string rdf:definition = "a bottle that holds catsup"
    }

    class "_class_cauliflowernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cauliflower.n.wn.food"
        string rdf:definition = "compact head of white undeveloped flowers"
    }

    class "_class_cavity_wallnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cavity_wall.n.wn.artifact"
        string rdf:definition = "a wall formed of two thicknesses of masonry with a space between them"
    }

    class "_class_cayennenwnfoodchili_hot_pepper" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cayenne.n.wn.food..chili_hot_pepper"
        string rdf:definition = "a long and often twisted hot red pepper"
    }

    class "_class_chilinwnfoodhot_pepper" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chili.n.wn.food..hot_pepper"
        string rdf:definition = "very hot and finely tapering pepper of special pungency"
    }

    class "_class_upper_surfacenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "upper_surface.n.wn.artifact"
        string rdf:definition = "the side that is uppermost"
    }

    class "_class_celeriacnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "celeriac.n.wn.food"
        string rdf:definition = "thickened edible aromatic root of a variety of celery plant"
    }

    class "_class_celerynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "celery.n.wn.food"
        string rdf:definition = "stalks eaten raw or cooked or used as seasoning"
    }

    class "_class_cellnwnbiology" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cell.n.wn.biology"
    }

    class "_class_celtucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "celtuce.n.wn.food"
        string rdf:definition = "leaves having celery-like stems eaten raw or cooked"
    }

    class "_class_cerealnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cereal.n.wn.food"
        string rdf:definition = "a breakfast food prepared from grain"
    }

    class "_class_cereal_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cereal_bowl.n.wn.artifact"
        string rdf:definition = "a bowl for holding breakfast cereal"
    }

    class "_class_cerimannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ceriman.n.wn.food"
        string rdf:definition = "tropical cylindrical fruit resembling a pinecone with pineapple-banana flavor"
    }

    class "_class_certified_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "certified_milk.n.wn.food"
        string rdf:definition = "milk from dairies regulated by an authorized medical milk commission"
    }

    class "_class_chablisnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chablis.n.wn.food"
        string rdf:definition = "dry white table wine of Chablis, France or a wine resembling it"
    }

    class "_class_chafing_dishnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chafing_dish.n.wn.artifact"
        string rdf:definition = "a metal pan over a heater; used to cook or to keep things warm at the table"
    }

    class "_class_chair_of_statenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chair_of_state.n.wn.artifact"
        string rdf:definition = "a ceremonial chair for an exalted or powerful person"
    }

    class "_class_chaise_longuenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chaise_longue.n.wn.artifact"
        string rdf:definition = "a long chair; for reclining"
    }

    class "_class_loungevwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lounge.v.wn.contact.Theme"
    }

    class "_class_chalicenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chalice.n.wn.artifact"
        string rdf:definition = "a bowl-shaped drinking vessel; especially the Eucharistic cup"
    }

    class "_class_challahnwncooking" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "challah.n.wn.cooking"
        string rdf:definition = "(Judaism) a loaf of white bread containing eggs and leavened with yeast; often formed into braided loaves and glazed with eggs before baking"
    }

    class "_class_champagnenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "champagne.n.wn.food"
        string rdf:definition = "a white sparkling wine either produced in Champagne or resembling that produced there"
    }

    class "_class_sparkling_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sparkling_wine.n.wn.food"
        string rdf:definition = "effervescent wine"
    }

    class "_class_champagne_cupnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "champagne_cup.n.wn.food"
        string rdf:definition = "a punch containing a sparkling wine"
    }

    class "_class_cupnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cup.n.wn.food"
        string rdf:definition = "a punch served in a pitcher instead of a punch bowl"
    }

    class "_class_chapattinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chapatti.n.wn.food"
        string rdf:definition = "flat pancake-like bread cooked on a griddle"
    }

    class "_class_charcoal_burnernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "charcoal_burner.n.wn.artifact"
        string rdf:definition = "a stove that burns charcoal as fuel"
    }

    class "_class_primus_stovenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "primus_stove.n.wn.artifact"
        string rdf:definition = "a portable paraffin cooking stove; used by campers"
    }

    class "_class_chardnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chard.n.wn.food"
        string rdf:definition = "long succulent whitish stalks with large green leaves"
    }

    class "_class_chardonnaynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chardonnay.n.wn.food"
        string rdf:definition = "dry white table wine resembling Chablis but made from Chardonnay grapes"
    }

    class "_class_chartreusenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chartreuse.n.wn.food"
        string rdf:definition = "aromatic green or yellow liqueur flavored with orange peel and hyssop and peppermint oils; made at monastery near Grenoble, France"
    }

    class "_class_checkoutnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "checkout.n.wn.artifact"
        string rdf:definition = "a counter in a supermarket where you pay for your purchases"
    }

    class "_class_cheeseburgernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cheeseburger.n.wn.food"
        string rdf:definition = "a hamburger with melted cheese on it"
    }

    class "_class_chopped_steaknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chopped_steak.n.wn.food"
        string rdf:definition = "a patty of ground cooked beef"
    }

    class "_class_hamburgernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hamburger.n.wn.food"
        string rdf:definition = "a sandwich consisting of a fried cake of minced beef served on a bun, often with other ingredients"
    }

    class "_class_chemicalnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chemical.n.wn.substance"
        string rdf:definition = "material produced by or used in a reaction involving changes in atoms or molecules"
    }

    class "_class_materialnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "material.n.wn.substance"
        string rdf:definition = 'the tangible substance that goes into the makeup of a physical object; "coal is a hard black material"; "wheat is the stuff they use to make bread"'
    }

    class "_class_substancenwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "substance.n.wn.substance"
        string rdf:definition = 'material of a particular kind or constitution; "the immune response recognizes invading substances"'
    }

    class "_class_chemical_weaponnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chemical_weapon.n.wn.artifact"
        string rdf:definition = "chemical substances that can be delivered using munitions and dispersal devices to cause death or severe harm to people and animals and plants"
    }

    class "_class_weapon_of_mass_destructionnwnmilitary" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "weapon_of_mass_destruction.n.wn.military"
        string rdf:definition = "a weapon that kills or injures civilian as well as military personnel (nuclear and chemical and biological weapons)"
    }

    class "_class_chenin_blancnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chenin_blanc.n.wn.food"
        string rdf:definition = "made in California and the Loire valley in France"
    }

    class "_class_cherimoyanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cherimoya.n.wn.food"
        string rdf:definition = "large tropical fruit with leathery skin and soft pulp; related to custard apples"
    }

    class "_class_cherry_tomatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cherry_tomato.n.wn.food"
        string rdf:definition = "small red to yellow tomatoes"
    }

    class "_class_chest_of_drawersnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chest_of_drawers.n.wn.artifact"
        string rdf:definition = "furniture with drawers for keeping clothes"
    }

    class "_class_chesterfieldnwnartifactdavenport_convertible_sofa" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chesterfield.n.wn.artifact..davenport_convertible_sofa"
        string rdf:definition = "an overstuffed davenport with upright armrests"
    }

    class "_class_davenportnwnartifactconvertible_sofa" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "davenport.n.wn.artifact..convertible_sofa"
        string rdf:definition = "a large sofa usually convertible into a bed"
    }

    class "_class_chewvwnconsumptionPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chew.v.wn.consumption.Patient"
    }

    class "_class_chiantinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chianti.n.wn.food"
        string rdf:definition = "dry red Italian table wine from the Chianti region of Tuscany"
    }

    class "_class_chicken_sandwichnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chicken_sandwich.n.wn.food"
        string rdf:definition = "a sandwich made with a filling of sliced chicken"
    }

    class "_class_chickpeanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chickpea.n.wn.food"
        string rdf:definition = "large white roundish Asiatic legume; usually dried"
    }

    class "_class_chicorynwnfoodleaf" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chicory.n.wn.food..leaf"
        string rdf:definition = "crisp spiky leaves with somewhat bitter taste"
    }

    class "_class_salad_greennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salad_green.n.wn.food"
        string rdf:definition = "greens suitable for eating uncooked as in salads"
    }

    class "_class_chicorynwnfoodroot" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chicory.n.wn.food..root"
        string rdf:definition = "root of the chicory plant roasted and ground to substitute for or adulterate coffee"
    }

    class "_class_coffee_substitutenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee_substitute.n.wn.food"
        string rdf:definition = "a drink resembling coffee that is sometimes substituted for it"
    }

    class "_class_chiffon_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chiffon_cake.n.wn.food"
        string rdf:definition = "very light cake"
    }

    class "_class_chiffoniernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chiffonier.n.wn.artifact"
        string rdf:definition = "a tall elegant chest of drawers"
    }

    class "_class_hot_peppernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hot_pepper.n.wn.food"
        string rdf:definition = "any of various pungent capsicum fruits"
    }

    class "_class_chili_dognwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chili_dog.n.wn.food"
        string rdf:definition = "a hotdog with chili con carne on it"
    }

    class "_class_hotdognwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hotdog.n.wn.food"
        string rdf:definition = "a frankfurter served hot on a bun"
    }

    class "_class_chimney_breastnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chimney_breast.n.wn.artifact"
        string rdf:definition = "walls that project out from the wall of a room and surround the chimney base"
    }

    class "_class_china_cabinetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "china_cabinet.n.wn.artifact"
        string rdf:definition = "a cabinet (usually with glass doors) for storing and displaying china"
    }

    class "_class_chinawarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chinaware.n.wn.artifact"
        string rdf:definition = "dishware made of high quality porcelain"
    }

    class "_class_chinese_cabbagenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chinese_cabbage.n.wn.food"
        string rdf:definition = "elongated head of crisp celery-like stalks and light green leaves"
    }

    class "_class_chipotlenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chipotle.n.wn.food"
        string rdf:definition = "a ripe jalapeno that has been dried for use in cooking"
    }

    class "_class_jalapenonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jalapeno.n.wn.food"
        string rdf:definition = "hot green or red pepper of southwestern United States and Mexico"
    }

    class "_class_chocolate_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chocolate_cake.n.wn.food"
        string rdf:definition = "cake containing chocolate"
    }

    class "_class_chocolate_chip_cookienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chocolate_chip_cookie.n.wn.food"
        string rdf:definition = "cookies containing chocolate chips"
    }

    class "_class_chocolate_eclairnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chocolate_eclair.n.wn.food"
        string rdf:definition = "eclair topped with chocolate"
    }

    class "_class_eclairnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eclair.n.wn.food"
        string rdf:definition = "oblong cream puff"
    }

    class "_class_chocolate_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chocolate_milk.n.wn.food"
        string rdf:definition = "milk flavored with chocolate syrup"
    }

    class "_class_chopvwncontactdividePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chop.v.wn.contact..divide.Patient"
    }

    class "_class_chop_suey_greensnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chop_suey_greens.n.wn.food"
        string rdf:definition = "succulent and aromatic young dark green leaves used in Chinese and Vietnamese and Japanese cooking"
    }

    class "_class_chopsticknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chopstick.n.wn.artifact"
        string rdf:definition = "one of a pair of slender sticks used as oriental tableware to eat food with"
    }

    class "_class_sticknwnartifactimplement" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stick.n.wn.artifact..implement"
        string rdf:definition = 'an implement consisting of a length of wood; "he collected dry sticks for a campfire"; "the kid had a candied apple on a stick"'
    }

    class "_class_chordatenwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chordate.n.wn.animal"
    }

    class "_class_christmas_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "christmas_cake.n.wn.food"
        string rdf:definition = "a rich fruitcake (usually covered with icing and marzipan) and eaten at Christmas"
    }

    class "_class_fruitcakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fruitcake.n.wn.food"
        string rdf:definition = "a rich cake containing dried fruit and nuts and citrus peel and so on"
    }

    class "_class_cidernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cider.n.wn.food"
        string rdf:definition = "a beverage made from juice pressed from apples"
    }

    class "_class_cinnamon_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cinnamon_bread.n.wn.food"
        string rdf:definition = "bread flavored with cinnamon often containing raisins"
    }

    class "_class_cinnamon_rollnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cinnamon_roll.n.wn.food"
        string rdf:definition = "rolled dough spread with cinnamon and sugar (and raisins) then sliced before baking"
    }

    class "_class_cinnamon_toastnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cinnamon_toast.n.wn.food"
        string rdf:definition = "buttered toast with sugar and cinnamon (and nutmeg and grated lemon peel)"
    }

    class "_class_toastnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "toast.n.wn.food"
        string rdf:definition = "slices of bread that have been toasted"
    }

    class "_class_citrangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "citrange.n.wn.food"
        string rdf:definition = "more aromatic and acid tasting than oranges; used in beverages and marmalade"
    }

    class "_class_citrusnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "citrus.n.wn.food"
        string rdf:definition = "any of numerous fruits of the genus Citrus having thick rind and juicy pulp; grown in warm regions"
    }

    class "_class_citronnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "citron.n.wn.food"
        string rdf:definition = "large lemonlike fruit with thick aromatic rind; usually preserved"
    }

    class "_class_claretnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "claret.n.wn.food"
        string rdf:definition = "dry red Bordeaux or Bordeaux-like wine"
    }

    class "_class_claret_cupnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "claret_cup.n.wn.food"
        string rdf:definition = "a punch made of claret and brandy with lemon juice and sugar and sometimes sherry or curacao and fresh fruit"
    }

    class "_class_clasp_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clasp_knife.n.wn.artifact"
        string rdf:definition = "a large knife with one or more folding blades"
    }

    class "_class_pocketknifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pocketknife.n.wn.artifact"
        string rdf:definition = "a knife with a blade that folds into the handle; suitable for carrying in the pocket"
    }

    class "_class_foldvwnchangefoldPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fold.v.wn.change..fold.Patient"
    }

    class "_class_keyboard_instrumentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "keyboard_instrument.n.wn.artifact"
        string rdf:definition = "a musical instrument that is played by means of a keyboard"
    }

    class "_class_stringed_instrumentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stringed_instrument.n.wn.artifact"
        string rdf:definition = "a musical instrument in which taut strings provide the source of sound"
    }

    class "_class_cleansing_agentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cleansing_agent.n.wn.artifact"
        string rdf:definition = "a preparation used in cleaning something"
    }

    class "_class_formulationnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "formulation.n.wn.substance"
        string rdf:definition = 'a substance prepared according to a formula; "the physician prescribed a commercial preparation of the medicine"'
    }

    class "_class_cleavernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cleaver.n.wn.artifact"
        string rdf:definition = "a butcher's knife having a large square blade"
    }

    class "_class_clementinenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clementine.n.wn.food"
        string rdf:definition = "a mandarin orange of a deep reddish orange color and few seeds"
    }

    class "_class_mandarinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mandarin.n.wn.food"
        string rdf:definition = "a somewhat flat reddish-orange loose skinned citrus of China"
    }

    class "_class_climbvwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "climb.v.wn.motion.Theme"
    }

    class "_class_clingnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cling.n.wn.food"
        string rdf:definition = "fruit (especially peach) whose flesh adheres strongly to the pit"
    }

    class "_class_clogvwncontactobstructPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clog.v.wn.contact..obstruct.Patient"
    }

    class "_class_cloisonnenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cloisonne.n.wn.artifact"
        string rdf:definition = "enamelware in which colored areas are separated by thin metal strips"
    }

    class "_class_enamelwarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "enamelware.n.wn.artifact"
        string rdf:definition = "cooking utensil of enameled iron"
    }

    class "_class_clothevwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clothe.v.wn.contact.Theme"
    }

    class "_class_clothes_closetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clothes_closet.n.wn.artifact"
        string rdf:definition = "a closet where clothes are stored"
    }

    class "_class_clothes_dryernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clothes_dryer.n.wn.artifact"
        string rdf:definition = "a dryer that dries clothes wet from washing"
    }

    class "_class_dryernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dryer.n.wn.artifact"
        string rdf:definition = "an appliance that removes moisture"
    }

    class "_class_white_goodsnwnartifacthome_appliance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "white_goods.n.wn.artifact..home_appliance"
        string rdf:definition = "large electrical home appliances (refrigerators or washing machines etc.) that are typically finished in white enamel"
    }

    class "_class_clothingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clothing.n.wn.artifact"
        string rdf:definition = "a covering designed to be worn on a person's body"
    }

    class "_class_coveringnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "covering.n.wn.artifact"
        string rdf:definition = "an artifact that covers something else (usually to protect or shelter or conceal it)"
    }

    class "_class_deterioratevwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "deteriorate.v.wn.change.Patient"
    }

    class "_class_dressvwnbodychangeTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dress.v.wn.body..change.Theme"
    }

    class "_class_embroidervwncreationPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "embroider.v.wn.creation.Patient"
    }

    class "_class_holdvwncreationTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hold.v.wn.creation.Theme"
    }

    class "_class_insulatevwnchangeLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "insulate.v.wn.change.Location"
    }

    class "_class_patchvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "patch.v.wn.contact.Patient"
    }

    class "_class_rendvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rend.v.wn.contact.Patient"
    }

    class "_class_tearvwncontactagentivePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tear.v.wn.contact..agentive.Patient"
    }

    class "_class_travelvwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "travel.v.wn.motion.Theme"
    }

    class "_class_wearvwnbodyclothingTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wear.v.wn.body..clothing.Theme"
    }

    class "_class_wearvwnbodyput_onTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wear.v.wn.body..put_on.Theme"
    }

    class "_class_clover_leaf_rollnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clover_leaf_roll.n.wn.food"
        string rdf:definition = "yeast-raised dinner roll made by baking three small balls of dough in each cup of a muffin pan"
    }

    class "_class_club_sandwichnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "club_sandwich.n.wn.food"
        string rdf:definition = "made with three slices of usually toasted bread"
    }

    class "_class_coat_closetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coat_closet.n.wn.artifact"
        string rdf:definition = "a closet for storing outerwear"
    }

    class "_class_cobblernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cobbler.n.wn.food"
        string rdf:definition = "tall sweetened iced drink of wine or liquor with fruit"
    }

    class "_class_highballnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "highball.n.wn.food"
        string rdf:definition = "a mixed drink made of alcoholic liquor mixed with water or a carbonated beverage and served in a tall glass"
    }

    class "_class_coca_colanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coca_cola.n.wn.food"
        string rdf:definition = "Coca Cola is a trademarked cola"
    }

    class "_class_colanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cola.n.wn.food"
        string rdf:definition = "carbonated drink flavored with extract from kola nuts (`dope' is a southernism in the United States)"
    }

    class "_class_mixed_drinknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mixed_drink.n.wn.food"
        string rdf:definition = "made of two or more ingredients"
    }

    class "_class_cocktail_shakernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cocktail_shaker.n.wn.artifact"
        string rdf:definition = "a shaker for mixing cocktails"
    }

    class "_class_cocoanwnfoodbeverage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cocoa.n.wn.food..beverage"
        string rdf:definition = "a beverage made from cocoa powder and milk and sugar; usually drunk hot"
    }

    class "_class_cocoa_plumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cocoa_plum.n.wn.food"
        string rdf:definition = "plum-shaped whitish to almost black fruit used for preserves; tropical American"
    }

    class "_class_coconut_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coconut_cake.n.wn.food"
        string rdf:definition = "cake containing shredded coconut in batter and frosting"
    }

    class "_class_coconut_macaroonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coconut_macaroon.n.wn.food"
        string rdf:definition = "macaroon containing coconut"
    }

    class "_class_macaroonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "macaroon.n.wn.food"
        string rdf:definition = "chewy cookie usually containing almond paste"
    }

    class "_class_cocottenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cocotte.n.wn.artifact"
        string rdf:definition = "a small casserole in which individual portions can be cooked and served"
    }

    class "_class_cocozellenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cocozelle.n.wn.food"
        string rdf:definition = "squash resembling zucchini"
    }

    class "_class_summer_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "summer_squash.n.wn.food"
        string rdf:definition = "any of various fruits of the gourd family that mature during the summer; eaten while immature and before seeds and rind harden"
    }

    class "_class_coffee_cupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee_cup.n.wn.artifact"
        string rdf:definition = "a cup from which coffee is drunk"
    }

    class "_class_coffee_liqueurnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee_liqueur.n.wn.food"
        string rdf:definition = "coffee-flavored liqueur"
    }

    class "_class_coffee_makernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee_maker.n.wn.artifact"
        string rdf:definition = "a kitchen appliance for brewing coffee automatically"
    }

    class "_class_kitchen_appliancenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kitchen_appliance.n.wn.artifact"
        string rdf:definition = "a home appliance used in preparing food"
    }

    class "_class_dripvwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drip.v.wn.motion.Theme"
    }

    class "_class_coffee_mugnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee_mug.n.wn.artifact"
        string rdf:definition = "a mug intended for serving coffee"
    }

    class "_class_coffee_ringnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee_ring.n.wn.food"
        string rdf:definition = "ring-shaped coffeecake with fruits or nuts and often iced"
    }

    class "_class_coffeecakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffeecake.n.wn.food"
        string rdf:definition = "a cake or sweet bread usually served with coffee"
    }

    class "_class_coffee_urnnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee_urn.n.wn.artifact"
        string rdf:definition = "an urn in which coffee is made and kept hot"
    }

    class "_class_urnnwnartifactpot" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "urn.n.wn.artifact..pot"
        string rdf:definition = "a large pot for making coffee or tea"
    }

    class "_class_coffeepotnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffeepot.n.wn.artifact"
        string rdf:definition = "tall pot in which coffee is brewed"
    }

    class "_class_cognacnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cognac.n.wn.food"
        string rdf:definition = "high quality grape brandy distilled in the Cognac district of France"
    }

    class "_class_cold_ducknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cold_duck.n.wn.food"
        string rdf:definition = "pink sparkling wine originally from Germany"
    }

    class "_class_collardsnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "collards.n.wn.food"
        string rdf:definition = "kale that has smooth leaves"
    }

    class "_class_kalenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kale.n.wn.food"
        string rdf:definition = "coarse curly-leafed cabbage"
    }

    class "_class_collinsnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "collins.n.wn.food"
        string rdf:definition = "tall iced drink of liquor (usually gin) with fruit juice"
    }

    class "_class_comestible" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "comestible"
    }

    class "_class_foodnwnfoodnutrient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "food.n.wn.food..nutrient"
        string rdf:definition = "any substance that can be metabolized by an animal to give energy and build tissue"
    }

    class "_class_nourishvwnconsumptionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nourish.v.wn.consumption.Theme"
    }

    class "_class_commissarynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "commissary.n.wn.artifact"
        string rdf:definition = "a snack bar in a film studio"
    }

    class "_class_snack_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "snack_bar.n.wn.artifact"
        string rdf:definition = "usually inexpensive bar"
    }

    class "_class_communication" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "communication"
    }

    class "_class_compoundnwnchemistry" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "compound.n.wn.chemistry"
        string rdf:definition = "(chemistry) a substance formed by chemical union of two or more elements or ingredients in definite proportion by weight"
    }

    class "_class_concentratenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "concentrate.n.wn.food"
        string rdf:definition = "a concentrated form of a foodstuff; the bulk is reduced by removing water"
    }

    class "_class_foodstuffnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "foodstuff.n.wn.food"
        string rdf:definition = "a substance that can be used or prepared for use as food"
    }

    class "_class_concord_grapenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "concord_grape.n.wn.food"
        string rdf:definition = "slipskin grape; a purple table grape of the northeastern United States"
    }

    class "_class_concrete" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "concrete"
    }

    class "_class_condensatenwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "condensate.n.wn.substance"
        string rdf:definition = "a product of condensation"
    }

    class "_class_fresh_waternwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fresh_water.n.wn.substance"
        string rdf:definition = "water that is not salty"
    }

    class "_class_condensed_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "condensed_milk.n.wn.food"
        string rdf:definition = "sweetened evaporated milk"
    }

    class "_class_condimentnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "condiment.n.wn.food"
        string rdf:definition = 'a preparation (a sauce or relish or spice) to enhance flavor or enjoyment; "mustard and ketchup are condiments"'
    }

    class "_class_flavorernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flavorer.n.wn.food"
        string rdf:definition = "something added to food primarily for the savor it imparts"
    }

    class "_class_conduitnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "conduit.n.wn.artifact"
        string rdf:definition = 'a passage (a pipe or tunnel) through which water or electric wires can pass; "the computers were connected through a system of conduits"'
    }

    class "_class_passagenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "passage.n.wn.artifact"
        string rdf:definition = "a way through or along which someone or something may pass"
    }

    class "_class_conference_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "conference_table.n.wn.artifact"
        string rdf:definition = "the table that conferees sit around as they hold a meeting"
    }

    class "_class_confiturenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "confiture.n.wn.food"
        string rdf:definition = "preserved or candied fruit"
    }

    class "_class_congeenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "congee.n.wn.food"
        string rdf:definition = "a Chinese rice gruel eaten for breakfast"
    }

    class "_class_gruelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gruel.n.wn.food"
        string rdf:definition = "a thin porridge (usually oatmeal or cornmeal)"
    }

    class "_class_conservenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "conserve.n.wn.food"
        string rdf:definition = "fruit preserved by cooking with sugar"
    }

    class "_class_preservevwnchangeTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "preserve.v.wn.change.Theme"
    }

    class "_class_console_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "console_table.n.wn.artifact"
        string rdf:definition = "a small table fixed to a wall or designed to stand against a wall"
    }

    class "_class_consumer_goodsnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "consumer_goods.n.wn.artifact"
        string rdf:definition = "goods (as food or clothing) intended for direct use or consumption"
    }

    class "_class_instrumentalitynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "instrumentality.n.wn.artifact"
        string rdf:definition = "an artifact (or system of artifacts) that is instrumental in accomplishing some end"
    }

    class "_class_controlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "control.n.wn.artifact"
        string rdf:definition = 'a mechanism that controls the operation of a machine; "the speed controller on his turntable was not working properly"; "I turned the controls over to her"'
    }

    class "_class_mechanismnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mechanism.n.wn.artifact"
        string rdf:definition = "device consisting of a piece of machinery; has moving parts that perform some function"
    }

    class "_class_controlvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "control.v.wn.contact.Patient"
    }

    class "_class_convertiblenwnartifactsofa" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "convertible.n.wn.artifact..sofa"
        string rdf:definition = "a sofa that can be converted into a bed"
    }

    class "_class_cookvwncreationInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cook.v.wn.creation.Instrument"
    }

    class "_class_cookernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cooker.n.wn.artifact"
        string rdf:definition = "a utensil for cooking"
    }

    class "_class_cookie_jarnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cookie_jar.n.wn.artifact"
        string rdf:definition = "a jar in which cookies are kept (and sometimes money is hidden)"
    }

    class "_class_cookie_sheetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cookie_sheet.n.wn.artifact"
        string rdf:definition = "a cooking utensil consisting of a flat rectangular metal sheet used for baking cookies or biscuits"
    }

    class "_class_kitchen_utensilnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kitchen_utensil.n.wn.artifact"
        string rdf:definition = "a utensil used in preparing food"
    }

    class "_class_cookstovenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cookstove.n.wn.artifact"
        string rdf:definition = "a stove for cooking (especially a wood- or coal-burning kitchen stove)"
    }

    class "_class_coolvwnchangeforcedPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cool.v.wn.change..forced.Patient"
    }

    class "_class_coolernwnartifactrefrigerator" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cooler.n.wn.artifact..refrigerator"
        string rdf:definition = "a refrigerator for cooling liquids"
    }

    class "_class_coolernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cooler.n.wn.food"
        string rdf:definition = "an iced drink especially white wine and fruit juice"
    }

    class "_class_coquillenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coquille.n.wn.artifact"
        string rdf:definition = "a dish in the form of a scallop shell"
    }

    class "_class_corbel_stepnwnarchitecture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "corbel_step.n.wn.architecture"
        string rdf:definition = "(architecture) a step on the top of a gable wall"
    }

    class "_class_stairwaynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stairway.n.wn.artifact"
        string rdf:definition = "a way of access (upward and downward) consisting of a set of steps"
    }

    class "_class_stepnwnartifactsupport" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "step.n.wn.artifact..support"
        string rdf:definition = 'support consisting of a place to rest the foot while ascending or descending a stairway; "he paused on the bottom step"'
    }

    class "_class_corbie_gablenwnarchitecture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "corbie_gable.n.wn.architecture"
        string rdf:definition = "(architecture) a gable having corbie-steps or corbel steps"
    }

    class "_class_corn_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "corn_cake.n.wn.food"
        string rdf:definition = "baked in a pan or on a griddle (southern and midland)"
    }

    class "_class_corn_dabnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "corn_dab.n.wn.food"
        string rdf:definition = "small oval cake of corn bread baked or fried (chiefly southern)"
    }

    class "_class_corn_flakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "corn_flake.n.wn.food"
        string rdf:definition = "crisp flake made from corn"
    }

    class "_class_corn_fritternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "corn_fritter.n.wn.food"
        string rdf:definition = "fritter containing corn or corn kernels"
    }

    class "_class_corn_muffinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "corn_muffin.n.wn.food"
        string rdf:definition = "cornbread muffin"
    }

    class "_class_corn_whiskeynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "corn_whiskey.n.wn.food"
        string rdf:definition = "whiskey distilled from a mash of not less than 80 percent corn"
    }

    class "_class_cornish_pastynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cornish_pasty.n.wn.food"
        string rdf:definition = "meat pie with filling of meat and vegetables"
    }

    class "_class_pastynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pasty.n.wn.food"
        string rdf:definition = "small meat pie or turnover"
    }

    class "_class_cornponenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cornpone.n.wn.food"
        string rdf:definition = "cornbread often made without milk or eggs and baked or fried (southern)"
    }

    class "_class_corrodevwnchangeabout_causePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "corrode.v.wn.change..about_cause.Patient"
    }

    class "_class_corrodevwnchangeabout_patientTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "corrode.v.wn.change..about_patient.Theme"
    }

    class "_class_cortlandnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cortland.n.wn.food"
        string rdf:definition = "large apple with a red skin"
    }

    class "_class_cosnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cos.n.wn.food"
        string rdf:definition = "lettuce with long dark-green leaves in a loosely packed elongated head"
    }

    class "_class_cotnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cot.n.wn.artifact"
        string rdf:definition = "a small bed that folds up for storage or transport"
    }

    class "_class_cotes_de_provencenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cotes_de_provence.n.wn.food"
        string rdf:definition = "a wine from southeastern France on the Mediterranean coast"
    }

    class "_class_couchnwnartifactbed" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "couch.n.wn.artifact..bed"
        string rdf:definition = "a narrow bed on which a patient lies during psychiatric or psychoanalytic treatment"
    }

    class "_class_seatvwnstativeLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seat.v.wn.stative.Location"
    }

    class "_class_tabletopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tabletop.n.wn.artifact"
        string rdf:definition = "the top horizontal work surface of a table"
    }

    class "_class_cows_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cows_milk.n.wn.food"
        string rdf:definition = "milk obtained from dairy cows"
    }

    class "_class_cox_ZZ_s_orange_pippinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cox_ZZ_s_orange_pippin.n.wn.food"
        string rdf:definition = "a yellow Pippin with distinctive flavor"
    }

    class "_class_pippinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pippin.n.wn.food"
        string rdf:definition = "any of numerous superior eating apples with yellow or greenish yellow skin flushed with red"
    }

    class "_class_crab_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crab_apple.n.wn.food"
        string rdf:definition = 'small sour apple; suitable for preserving; "crabapples make a tangy jelly"'
    }

    class "_class_crackvwnchangebreakPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crack.v.wn.change..break.Patient"
    }

    class "_class_crackvwnchangefracturePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crack.v.wn.change..fracture.Patient"
    }

    class "_class_crackvwncookingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crack.v.wn.cooking.Patient"
    }

    class "_class_cracked_wheat_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cracked_wheat_bread.n.wn.food"
        string rdf:definition = "bread made with cracked wheat that has been ground fine"
    }

    class "_class_crackernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cracker.n.wn.food"
        string rdf:definition = "a thin crisp wafer made of flour and water with or without leavening and shortening; unsweetened or semisweet"
    }

    class "_class_cradlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cradle.n.wn.artifact"
        string rdf:definition = "a baby bed with sides and rockers"
    }

    class "_class_cranberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cranberry.n.wn.food"
        string rdf:definition = "very tart red berry used for sauce or juice"
    }

    class "_class_cranberry_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cranberry_juice.n.wn.food"
        string rdf:definition = "the juice of cranberries (always diluted and sweetened)"
    }

    class "_class_crapenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crape.n.wn.food"
        string rdf:definition = "small very thin pancake"
    }

    class "_class_cream_puffnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cream_puff.n.wn.food"
        string rdf:definition = "puff filled with cream or custard"
    }

    class "_class_puffnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "puff.n.wn.food"
        string rdf:definition = "a light inflated pastry or puff shell"
    }

    class "_class_cream_sodanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cream_soda.n.wn.food"
        string rdf:definition = "sweet carbonated drink flavored with vanilla"
    }

    class "_class_soft_drinknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soft_drink.n.wn.food"
        string rdf:definition = "nonalcoholic beverage (usually carbonated)"
    }

    class "_class_credenzanwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "credenza.n.wn.artifact"
        string rdf:definition = "a kind of sideboard or buffet"
    }

    class "_class_creme_de_cacaonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "creme_de_cacao.n.wn.food"
        string rdf:definition = "sweet liqueur flavored with vanilla and cacao beans"
    }

    class "_class_creme_de_fraisenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "creme_de_fraise.n.wn.food"
        string rdf:definition = "strawberry-flavored liqueur"
    }

    class "_class_creme_de_menthenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "creme_de_menthe.n.wn.food"
        string rdf:definition = "sweet green or white mint-flavored liqueur"
    }

    class "_class_crepe_suzettenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crepe_suzette.n.wn.food"
        string rdf:definition = "crepes flamed in a sweet orange-and-lemon flavored liqueur sauce"
    }

    class "_class_crescent_rollnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crescent_roll.n.wn.food"
        string rdf:definition = "very rich flaky crescent-shaped roll"
    }

    class "_class_cressnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cress.n.wn.food"
        string rdf:definition = "pungent leaves of any of numerous cruciferous herbs"
    }

    class "_class_cribnwnartifactbaby_bed" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crib.n.wn.artifact..baby_bed"
        string rdf:definition = "baby bed with high sides made of slats"
    }

    class "_class_crisphead_lettucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crisphead_lettuce.n.wn.food"
        string rdf:definition = 'lettuce with crisp tightly packed light-green leaves in a firm head; "iceberg is still the most popular lettuce"'
    }

    class "_class_crocknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crock.n.wn.artifact"
        string rdf:definition = "an earthen jar (made of baked clay)"
    }

    class "_class_crooknecknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crookneck.n.wn.food"
        string rdf:definition = "yellow squash with a thin curved neck and somewhat warty skin"
    }

    class "_class_yellow_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "yellow_squash.n.wn.food"
        string rdf:definition = "squash having yellow skin and yellowish flesh and usually elongated neck"
    }

    class "_class_cropnwnartifacthandle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crop.n.wn.artifact..handle"
        string rdf:definition = "the stock or handle of a whip"
    }

    class "_class_cross_bunnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cross_bun.n.wn.food"
        string rdf:definition = "moderately sweet raised roll containing spices and raisins and citron and decorated with a cross-shaped sugar glaze"
    }

    class "_class_croutonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crouton.n.wn.food"
        string rdf:definition = "a small piece of toasted or fried bread; served in soup or salads"
    }

    class "_class_cruetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cruet.n.wn.artifact"
        string rdf:definition = "bottle that holds wine or oil or vinegar for the table"
    }

    class "_class_cruet_standnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cruet_stand.n.wn.artifact"
        string rdf:definition = "a stand for cruets containing various condiments"
    }

    class "_class_racknwnartifactframework" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rack.n.wn.artifact..framework"
        string rdf:definition = "framework for holding objects"
    }

    class "_class_crullernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cruller.n.wn.food"
        string rdf:definition = "small friedcake formed into twisted strips and fried; richer than doughnuts"
    }

    class "_class_friedcakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "friedcake.n.wn.food"
        string rdf:definition = "small cake in the form of a ring or twist or ball or strip fried in deep fat"
    }

    class "_class_crumb_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crumb_cake.n.wn.food"
        string rdf:definition = "cake or coffeecake topped with a mixture of sugar and butter and flour"
    }

    class "_class_crumpetnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crumpet.n.wn.food"
        string rdf:definition = "a thick soft cake with a porous texture; cooked on a griddle"
    }

    class "_class_crusenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cruse.n.wn.artifact"
        string rdf:definition = "small jar; holds liquid (oil or water)"
    }

    class "_class_crushvwnchangefragmentationPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crush.v.wn.change..fragmentation.Patient"
    }

    class "_class_crystalnwnartifactglassware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crystal.n.wn.artifact..glassware"
        string rdf:definition = "glassware made of quartz"
    }

    class "_class_glasswarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "glassware.n.wn.artifact"
        string rdf:definition = "an article of tableware made of glass"
    }

    class "_class_cubevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cube.v.wn.contact.Patient"
    }

    class "_class_cucumbernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cucumber.n.wn.food"
        string rdf:definition = "cylindrical green fruit with thin green rind and white flesh eaten as a vegetable; related to melons"
    }

    class "_class_drinking_vesselnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drinking_vessel.n.wn.artifact"
        string rdf:definition = "a vessel intended for drinking"
    }

    class "_class_punchnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "punch.n.wn.food"
        string rdf:definition = "an iced mixed drink usually containing alcohol and prepared for multiple servings; normally served in a punch bowl"
    }

    class "_class_storage_spacenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "storage_space.n.wn.artifact"
        string rdf:definition = "the area in any structure that provides space for storage"
    }

    class "_class_cupcakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cupcake.n.wn.food"
        string rdf:definition = "small cake baked in a muffin tin"
    }

    class "_class_cuppanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cuppa.n.wn.food"
        string rdf:definition = "a cup of tea"
    }

    class "_class_curacaonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "curacao.n.wn.food"
        string rdf:definition = "flavored with sour orange peel"
    }

    class "_class_orange_liqueurnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "orange_liqueur.n.wn.food"
        string rdf:definition = "liqueur flavored with orange"
    }

    class "_class_curlvwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "curl.v.wn.contact.Instrument"
    }

    class "_class_curling_ironnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "curling_iron.n.wn.artifact"
        string rdf:definition = "a cylindrical metal home appliance that heats a lock of hair that has been curled around it"
    }

    class "_class_currantnwnfoodraisin" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "currant.n.wn.food..raisin"
        string rdf:definition = "small dried seedless raisin grown in the Mediterranean region and California; used in cooking"
    }

    class "_class_currency" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "currency"
    }

    class "_class_cushawnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cushaw.n.wn.food"
        string rdf:definition = "globose or ovoid squash with striped grey and green warty rind"
    }

    class "_class_cushionnwnartifactpadding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cushion.n.wn.artifact..padding"
        string rdf:definition = "a soft bag filled with air or a mass of padding such as feathers or foam rubber etc."
    }

    class "_class_paddingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "padding.n.wn.artifact"
        string rdf:definition = "artifact consisting of soft or resilient material used to fill or give shape or protect or add comfort"
    }

    class "_class_cutvwncontactincisionInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cut.v.wn.contact..incision.Instrument"
    }

    class "_class_cut_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cut_glass.n.wn.artifact"
        string rdf:definition = "glass decorated by cutting or grinding facets"
    }

    class "_class_cutternwnartifactcutting_implement" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cutter.n.wn.artifact..cutting_implement"
        string rdf:definition = "a cutting implement; a tool for cutting"
    }

    class "_class_skinvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "skin.v.wn.contact.Theme"
    }

    class "_class_stabvwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stab.v.wn.contact.Instrument"
    }

    class "_class_toolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tool.n.wn.artifact"
        string rdf:definition = "an implement used in the practice of a vocation"
    }

    class "_class_cutty_stoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cutty_stool.n.wn.artifact"
        string rdf:definition = "a low stool; formerly in Scotland, a seat in a church where an offender was publicly rebuked"
    }

    class "_class_daggernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dagger.n.wn.artifact"
        string rdf:definition = "a short knife with a pointed blade used for piercing or stabbing"
    }

    class "_class_knifenwnartifactweapon" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "knife.n.wn.artifact..weapon"
        string rdf:definition = "a weapon with a handle and blade with a sharp point"
    }

    class "_class_haftnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "haft.n.wn.artifact"
        string rdf:definition = "the handle of a weapon or tool"
    }

    class "_class_daintynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dainty.n.wn.food"
        string rdf:definition = "something considered choice to eat"
    }

    class "_class_daiquirinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "daiquiri.n.wn.food"
        string rdf:definition = "a cocktail made with rum and lime or lemon juice"
    }

    class "_class_rumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rum.n.wn.food"
        string rdf:definition = "liquor distilled from fermented molasses"
    }

    class "_class_dairy_productnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dairy_product.n.wn.food"
        string rdf:definition = "milk and butter and cheese"
    }

    class "_class_damsonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "damson.n.wn.food"
        string rdf:definition = "dark purple plum of the damson tree"
    }

    class "_class_dance_floornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dance_floor.n.wn.artifact"
        string rdf:definition = "a bare floor polished for dancing"
    }

    class "_class_dandelion_greennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dandelion_green.n.wn.food"
        string rdf:definition = "edible leaves of the common dandelion collected from the wild; used in salads and in making wine"
    }

    class "_class_danishnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "danish.n.wn.food"
        string rdf:definition = "light sweet yeast-raised roll usually filled with fruits or cheese"
    }

    class "_class_dark_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dark_bread.n.wn.food"
        string rdf:definition = "bread made with whole wheat flour"
    }

    class "_class_datenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "date.n.wn.food"
        string rdf:definition = "sweet edible fruit of the date palm with a single long woody seed"
    }

    class "_class_date_barnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "date_bar.n.wn.food"
        string rdf:definition = "fruit bar containing chopped dates"
    }

    class "_class_date_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "date_bread.n.wn.food"
        string rdf:definition = "bread containing chopped dates"
    }

    class "_class_date_nut_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "date_nut_bread.n.wn.food"
        string rdf:definition = "bread containing chopped dates and nuts"
    }

    class "_class_davenportnwnartifactdesk" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "davenport.n.wn.artifact..desk"
        string rdf:definition = "a small decorative writing desk"
    }

    class "_class_desknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "desk.n.wn.artifact"
        string rdf:definition = "a piece of furniture with a writing surface and usually drawers or other compartments"
    }

    class "_class_daybednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "daybed.n.wn.artifact"
        string rdf:definition = "an armless couch; a seat by day and a bed by night"
    }

    class "_class_deathbednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "deathbed.n.wn.artifact"
        string rdf:definition = "the bed on which a person dies"
    }

    class "_class_decaffeinated_coffeenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "decaffeinated_coffee.n.wn.food"
        string rdf:definition = "coffee with the caffeine removed"
    }

    class "_class_deck_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "deck_chair.n.wn.artifact"
        string rdf:definition = "a folding chair for use outdoors; a wooden frame supports a length of canvas"
    }

    class "_class_decomposevwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "decompose.v.wn.change.Patient"
    }

    class "_class_deep_dish_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "deep_dish_pie.n.wn.food"
        string rdf:definition = "a pie made of fruit with rich biscuit dough usually only on top of the fruit"
    }

    class "_class_deep_freezenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "deep_freeze.n.wn.artifact"
        string rdf:definition = "electric refrigerator (trade name Deepfreeze) in which food is frozen and stored for long periods of time"
    }

    class "_class_freezernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "freezer.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] electric refrigerator in which food is frozen and stored for long periods of time"
    }

    class "_class_deep_freezernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "deep_freezer.n.wn.artifact"
        string rdf:definition = "electric refrigerator (trade name Deepfreeze) in which food is frozen and stored for long periods of time"
    }

    class "_class_dehumidifiernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dehumidifier.n.wn.artifact"
        string rdf:definition = 'an applicance to extract moisture from the air and make the environment more comfortable; "in summer, we need to run the dehumidifier in the basement"'
    }

    class "_class_dryvwnchangeagentiveInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dry.v.wn.change..agentive.Instrument"
    }

    class "_class_deliciousnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "delicious.n.wn.food"
        string rdf:definition = "variety of sweet eating apples"
    }

    class "_class_delivervwncontactbringTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "deliver.v.wn.contact..bring.Theme"
    }

    class "_class_demeraranwnfoodrum" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "demerara.n.wn.food..rum"
        string rdf:definition = "dark rum from Guyana"
    }

    class "_class_demijohnnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "demijohn.n.wn.artifact"
        string rdf:definition = "large bottle with a short narrow neck; often has small handles at neck and is enclosed in wickerwork"
    }

    class "_class_demitassenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "demitasse.n.wn.artifact"
        string rdf:definition = "small coffee cup; for serving black coffee"
    }

    class "_class_denatured_alcoholnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "denatured_alcohol.n.wn.substance"
        string rdf:definition = "ethyl alcohol that is unfit for drinking but is still useful for other purposes"
    }

    class "_class_descendvwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "descend.v.wn.motion.Theme"
    }

    class "_class_dessert_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dessert_plate.n.wn.artifact"
        string rdf:definition = "a small plate on which dessert can be served"
    }

    class "_class_dessert_spoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dessert_spoon.n.wn.artifact"
        string rdf:definition = "a spoon larger than a teaspoon and smaller than a tablespoon"
    }

    class "_class_dessert_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dessert_wine.n.wn.food"
        string rdf:definition = "still sweet wine often served with dessert or after a meal"
    }

    class "_class_destroyvwncontactdamageInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "destroy.v.wn.contact..damage.Instrument"
    }

    class "_class_detergentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "detergent.n.wn.artifact"
        string rdf:definition = "a cleansing agent that differs from soap but can also emulsify oils and hold dirt in suspension"
    }

    class "_class_devicenwnartifactinstrumentality" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "device.n.wn.artifact..instrumentality"
        string rdf:definition = 'an instrumentality invented for a particular purpose; "the device is small enough to wear on your wrist"; "a device intended to conserve water"'
    }

    class "_class_failvwnchangemalfunctionPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fail.v.wn.change..malfunction.Patient"
    }

    class "_class_functionvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "function.v.wn.contact.Patient"
    }

    class "_class_handlevwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "handle.v.wn.contact.Theme"
    }

    class "_class_manipulatevwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "manipulate.v.wn.contact.Theme"
    }

    class "_class_operatevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "operate.v.wn.contact.Patient"
    }

    class "_class_runvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "run.v.wn.contact.Patient"
    }

    class "_class_devil_ZZ_s_foodnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "devil_ZZ_s_food.n.wn.food"
        string rdf:definition = "very dark chocolate cake"
    }

    class "_class_dewar_flasknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dewar_flask.n.wn.artifact"
        string rdf:definition = "vacuum flask that holds liquid air or helium for scientific experiments"
    }

    class "_class_vacuum_flasknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vacuum_flask.n.wn.artifact"
        string rdf:definition = "flask with double walls separated by vacuum; used to maintain substances at high or low temperatures"
    }

    class "_class_dewberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dewberry.n.wn.food"
        string rdf:definition = "blackberry-like fruits of any of several trailing blackberry bushes"
    }

    class "_class_diaper_packnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "diaper_pack.n.wn.artifact"
        string rdf:definition = "(auxiliary concept in DFL, not in WordNET) a pack in which new diapers are sold and stored"
    }

    class "_class_dika_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dika_bread.n.wn.food"
        string rdf:definition = "somewhat astringent paste prepared by grinding and heating seeds of the African wild mango; a staple food of some African peoples"
    }

    class "_class_dill_picklenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dill_pickle.n.wn.food"
        string rdf:definition = "pickle preserved in brine or vinegar flavored with dill seed"
    }

    class "_class_dining_room_furniturenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dining_room_furniture.n.wn.artifact"
        string rdf:definition = "furniture intended for use in a dining room"
    }

    class "_class_dining_room_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dining_room_table.n.wn.artifact"
        string rdf:definition = "dining-room furniture consisting of a table on which meals can be served"
    }

    class "_class_dining_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dining_table.n.wn.artifact"
        string rdf:definition = 'a table at which meals are served; "he helped her clear the dining table"; "a feast was spread upon the board"'
    }

    class "_class_dinner_servicenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dinner_service.n.wn.artifact"
        string rdf:definition = "a table service for serving dinner"
    }

    class "_class_servicenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "service.n.wn.artifact"
        string rdf:definition = "tableware consisting of a complete set of articles (silver or dishware) for use at table"
    }

    class "_class_dinner_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dinner_table.n.wn.artifact"
        string rdf:definition = "the dining table where dinner is served and eaten"
    }

    class "_class_dinnerwarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dinnerware.n.wn.artifact"
        string rdf:definition = "the tableware (plates and platters and serving bowls etc.) used in serving a meal"
    }

    class "_class_dirknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dirk.n.wn.artifact"
        string rdf:definition = "a relatively long dagger with a straight blade"
    }

    class "_class_discharge_pipenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "discharge_pipe.n.wn.artifact"
        string rdf:definition = "a pipe through which fluids can be discharged"
    }

    class "_class_pipenwnartifacttube" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pipe.n.wn.artifact..tube"
        string rdf:definition = "a long tube made of metal or plastic that is used to carry water or oil or gas etc."
    }

    class "_class_disconnectvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disconnect.v.wn.contact.Patient"
    }

    class "_class_ingredientnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ingredient.n.wn.food"
        string rdf:definition = 'food that is a component of a mixture in cooking; "the recipe lists all the fixings for a salad"'
    }

    class "_class_saucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sauce.n.wn.food"
        string rdf:definition = "flavorful relish or dressing or topping served as an accompaniment to food"
    }

    class "_class_disintegratevwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disintegrate.v.wn.change.Patient"
    }

    class "_class_disposalnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposal.n.wn.artifact"
        string rdf:definition = "a kitchen appliance for disposing of garbage"
    }

    class "_class_dispositionActor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Actor2"
    }

    class "_class_dispositionAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Agent"
    }

    class "_class_dispositionAsset" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Asset"
    }

    class "_class_dispositionAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Attribute"
    }

    class "_class_dispositionBeneficiary" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Beneficiary"
    }

    class "_class_dispositionCause" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Cause"
    }

    class "_class_dispositionDestination" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Destination"
    }

    class "_class_dispositionLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Location"
    }

    class "_class_dispositionExperiencer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Experiencer"
    }

    class "_class_dispositionExtent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Extent"
    }

    class "_class_dispositionInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Instrument"
    }

    class "_class_dispositionMaterial" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Material"
    }

    class "_class_dispositionPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Patient2"
    }

    class "_class_dispositionPredicate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Predicate"
    }

    class "_class_dispositionProduct" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Product"
    }

    class "_class_dispositionRecipient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Recipient"
    }

    class "_class_dispositionSource" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Source"
    }

    class "_class_dispositionStimulus" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Stimulus"
    }

    class "_class_dispositionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Theme2"
    }

    class "_class_dispositionTime" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Time"
    }

    class "_class_dispositionTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Topic"
    }

    class "_class_divannwnartifactsofa" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "divan.n.wn.artifact..sofa"
        string rdf:definition = "a long backless sofa (usually with pillows against a wall)"
    }

    class "_class_dividevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "divide.v.wn.contact.Patient"
    }

    class "_class_dixienwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dixie.n.wn.artifact"
        string rdf:definition = "a large metal pot (12 gallon camp kettle) for cooking; used in military camps"
    }

    class "_class_dixie_cupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dixie_cup.n.wn.artifact"
        string rdf:definition = "a disposable cup made of paper; for holding drinks"
    }

    class "_class_dog_biscuitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dog_biscuit.n.wn.food"
        string rdf:definition = "a hard biscuit for dogs"
    }

    class "_class_dog_bowlnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dog_bowl.n.wn.food"
        string rdf:definition = "(auxiliary concept in DFL, not in WordNET) a pet bowl intended for dogs"
    }

    class "_class_dom_pedronwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dom_pedro.n.wn.food"
        string rdf:definition = "South African mixed drink made by mixing ice cream with whisky"
    }

    class "_class_domestic_animalnwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "domestic_animal.n.wn.animal"
    }

    class "_class_movable_barriernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "movable_barrier.n.wn.artifact"
        string rdf:definition = "a barrier that can be moved to allow passage"
    }

    class "_class_doorknobnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "doorknob.n.wn.artifact"
        string rdf:definition = "a knob used to release the catch when opening a door (often called `doorhandle' in Great Britain)"
    }

    class "_class_knobnwnartifacthandle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "knob.n.wn.artifact..handle"
        string rdf:definition = "a round handle"
    }

    class "_class_doorwaynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "doorway.n.wn.artifact"
        string rdf:definition = 'the entrance (the space in a wall) through which you enter or leave a room or building; the space that a door can close; "he stuck his head in the doorway"'
    }

    class "_class_entrancenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "entrance.n.wn.artifact"
        string rdf:definition = 'something that provides access (to get in or get out); "they waited at the entrance to the garden"; "beggars waited just outside the entryway to the cathedral"'
    }

    class "_class_double_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "double_bed.n.wn.artifact"
        string rdf:definition = "a bed wide enough to accommodate two sleepers"
    }

    class "_class_double_boilernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "double_boiler.n.wn.artifact"
        string rdf:definition = "two saucepans, one fitting inside the other"
    }

    class "_class_saucepannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "saucepan.n.wn.artifact"
        string rdf:definition = "a deep pan with a handle; used for stewing or boiling"
    }

    class "_class_double_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "double_door.n.wn.artifact"
        string rdf:definition = "two vertical doors that meet in the middle of the door frame when closed"
    }

    class "_class_doughboynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "doughboy.n.wn.food"
        string rdf:definition = 'a rounded lump of dough that is deep-fried and served as hot bread; "the doughboy was a predecessor of the doughnut"'
    }

    class "_class_doughnutnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "doughnut.n.wn.food"
        string rdf:definition = "a small ring-shaped friedcake"
    }

    class "_class_dowdynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dowdy.n.wn.food"
        string rdf:definition = "deep-dish apple dessert covered with a rich crust"
    }

    class "_class_draftnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "draft.n.wn.food"
        string rdf:definition = 'a serving of drink (usually alcoholic) drawn from a keg; "they served beer on draft"'
    }

    class "_class_draft_beernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "draft_beer.n.wn.food"
        string rdf:definition = "beer drawn from a keg"
    }

    class "_class_drafting_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drafting_table.n.wn.artifact"
        string rdf:definition = "a worktable with adjustable top"
    }

    class "_class_worktablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "worktable.n.wn.artifact"
        string rdf:definition = "a table designed for a particular task"
    }

    class "_class_drambuienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drambuie.n.wn.food"
        string rdf:definition = "a sweet Scotch whisky liqueur"
    }

    class "_class_scotchnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scotch.n.wn.food"
        string rdf:definition = "whiskey distilled in Scotland; especially whiskey made from malted barley in a pot still"
    }

    class "_class_drawknifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drawknife.n.wn.artifact"
        string rdf:definition = "a woodworker's knife to shave surfaces"
    }

    class "_class_dress_racknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dress_rack.n.wn.artifact"
        string rdf:definition = "a rack used primarily to display dresses for sale in a store"
    }

    class "_class_dressernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dresser.n.wn.artifact"
        string rdf:definition = "a cabinet with shelves"
    }

    class "_class_dressing_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dressing_table.n.wn.artifact"
        string rdf:definition = "low table with mirror or mirrors where one sits while dressing or applying makeup"
    }

    class "_class_dried_apricotnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dried_apricot.n.wn.food"
        string rdf:definition = "apricots preserved by drying"
    }

    class "_class_dried_fruitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dried_fruit.n.wn.food"
        string rdf:definition = "fruit preserved by drying"
    }

    class "_class_drinkvwnconsumptionimbibePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drink.v.wn.consumption..imbibe.Patient"
    }

    class "_class_drip_coffeenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drip_coffee.n.wn.food"
        string rdf:definition = "coffee made by passing boiling water through a perforated container packed with finely ground coffee"
    }

    class "_class_drip_potnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drip_pot.n.wn.artifact"
        string rdf:definition = "a coffeepot for making drip coffee"
    }

    class "_class_dripping_pannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dripping_pan.n.wn.artifact"
        string rdf:definition = "pan for catching drippings under roasting meat"
    }

    class "_class_drop_biscuitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drop_biscuit.n.wn.food"
        string rdf:definition = "biscuit made from dough with enough milk that it can be dropped from a spoon"
    }

    class "_class_drop_leaf_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drop_leaf_table.n.wn.artifact"
        string rdf:definition = "a table that has a drop-leaf to enlarge its surface"
    }

    class "_class_drop_sconenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drop_scone.n.wn.food"
        string rdf:definition = "a scone made by dropping a spoonful of batter on a griddle"
    }

    class "_class_sconenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scone.n.wn.food"
        string rdf:definition = "small biscuit (rich with cream and eggs) cut into diamonds or sticks and baked in an oven or (especially originally) on a griddle"
    }

    class "_class_drupenwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drupe.n.wn.plant"
        string rdf:definition = "fleshy indehiscent fruit with a single seed: e.g. almond; peach; plum; cherry; elderberry; olive; jujube"
    }

    class "_class_fruitnwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fruit.n.wn.plant"
        string rdf:definition = "the ripened reproductive body of a seed plant"
    }

    class "_class_dry_vermouthnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dry_vermouth.n.wn.food"
        string rdf:definition = "dry pale amber variety"
    }

    class "_class_vermouthnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vermouth.n.wn.food"
        string rdf:definition = "any of several white wines flavored with aromatic herbs; used as aperitifs or in mixed drinks"
    }

    class "_class_dubonnetnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dubonnet.n.wn.food"
        string rdf:definition = "(trademark) a sweet aromatic French wine (red or white) used chiefly as an aperitif"
    }

    class "_class_duriannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "durian.n.wn.food"
        string rdf:definition = "huge fruit native to southeastern Asia `smelling like Hell and tasting like Heaven'; seeds are roasted and eaten like nuts"
    }

    class "_class_dutch_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dutch_door.n.wn.artifact"
        string rdf:definition = "an exterior door divided in two horizontally; either half can be closed or open independently"
    }

    class "_class_dutch_ovennwnartifactoven" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dutch_oven.n.wn.artifact..oven"
        string rdf:definition = "an oven consisting of a metal box for cooking in front of a fire"
    }

    class "_class_dutch_ovennwnartifactpot" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dutch_oven.n.wn.artifact..pot"
        string rdf:definition = "iron or earthenware cooking pot; used for stews"
    }

    class "_class_eames_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eames_chair.n.wn.artifact"
        string rdf:definition = "a chair designed by Charles Eames; originally made of molded plywood; seat and back shaped to fit the human body"
    }

    class "_class_easelnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "easel.n.wn.artifact"
        string rdf:definition = "an upright tripod for displaying something (usually an artist's canvas)"
    }

    class "_class_easter_eggnwnfoodhard_boiled_egg" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "easter_egg.n.wn.food..hard_boiled_egg"
        string rdf:definition = "a colored hard-boiled egg used to celebrate Easter"
    }

    class "_class_hard_boiled_eggnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hard_boiled_egg.n.wn.food"
        string rdf:definition = "an egg boiled gently until both the white and the yolk solidify"
    }

    class "_class_easy_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "easy_chair.n.wn.artifact"
        string rdf:definition = "a comfortable upholstered armchair"
    }

    class "_class_eatvwnconsumptionfoodPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eat.v.wn.consumption..food.Patient"
    }

    class "_class_eau_de_vienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eau_de_vie.n.wn.food"
        string rdf:definition = "strong coarse brandy"
    }

    class "_class_eccles_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eccles_cake.n.wn.food"
        string rdf:definition = "a flat round cake of sweetened pastry filled with dried fruit"
    }

    class "_class_edge_toolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "edge_tool.n.wn.artifact"
        string rdf:definition = "any cutting tool with a sharp cutting edge (as a chisel or knife or plane or gouge)"
    }

    class "_class_producenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "produce.n.wn.food"
        string rdf:definition = "fresh fruits and vegetable grown for the market"
    }

    class "_class_edible_pod_peanwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "edible_pod_pea.n.wn.plant"
        string rdf:definition = "a variety of pea plant producing peas having soft thick edible pods lacking the fibrous inner lining of the common pea"
    }

    class "_class_egg_creamnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "egg_cream.n.wn.food"
        string rdf:definition = "made of milk and flavored syrup with soda water"
    }

    class "_class_egg_cupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "egg_cup.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] a cup used to hold an egg; often used to serve boiled eggs"
    }

    class "_class_eggcupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eggcup.n.wn.artifact"
        string rdf:definition = "dishware consisting of a small cup for serving a boiled egg"
    }

    class "_class_eggnognwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eggnog.n.wn.food"
        string rdf:definition = "a punch made of sweetened milk or cream mixed with eggs and usually alcoholic liquor"
    }

    class "_class_eggplantnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eggplant.n.wn.food"
        string rdf:definition = "egg-shaped vegetable having a shiny skin typically dark purple but occasionally white or yellow"
    }

    class "_class_solanaceous_vegetablenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "solanaceous_vegetable.n.wn.food"
        string rdf:definition = "any of several fruits of plants of the family Solanaceae; especially of the genera Solanum, Capsicum, and Lycopersicon"
    }

    class "_class_elderberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "elderberry.n.wn.food"
        string rdf:definition = "berrylike fruit of an elder used for e.g. wines and jellies"
    }

    class "_class_electrical_devicenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "electrical_device.n.wn.artifact"
        string rdf:definition = "a device that produces or is powered by electricity"
    }

    class "_class_electric_frying_pannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "electric_frying_pan.n.wn.artifact"
        string rdf:definition = "a frying pan heated by electricity"
    }

    class "_class_frying_pannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "frying_pan.n.wn.artifact"
        string rdf:definition = "a pan used for frying foods"
    }

    class "_class_electric_rangenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "electric_range.n.wn.artifact"
        string rdf:definition = "a kitchen range in which the heat for cooking is provided by electric power"
    }

    class "_class_electric_refrigeratornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "electric_refrigerator.n.wn.artifact"
        string rdf:definition = "a refrigerator in which the coolant is pumped around by an electric motor"
    }

    class "_class_ice_makernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ice_maker.n.wn.artifact"
        string rdf:definition = "an appliance included in some electric refrigerators for making ice cubes"
    }

    class "_class_plug_invwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plug_in.v.wn.contact.Patient"
    }

    class "_class_switchvwnchangeTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "switch.v.wn.change.Theme"
    }

    class "_class_unplugvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "unplug.v.wn.contact.Patient"
    }

    class "_class_elixirnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "elixir.n.wn.food"
        string rdf:definition = "a substance believed to cure all ills"
    }

    class "_class_elixir_of_lifenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "elixir_of_life.n.wn.food"
        string rdf:definition = "a hypothetical substance believed to maintain life indefinitely; once sought by alchemists"
    }

    class "_class_elongated" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "elongated"
    }

    class "_class_emergevwnchangeTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "emerge.v.wn.change.Theme"
    }

    class "_class_emperornwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "emperor.n.wn.food"
        string rdf:definition = "red table grape of California"
    }

    class "_class_vinifera_grapenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vinifera_grape.n.wn.food"
        string rdf:definition = "grape from a cultivated variety of the common grape vine of Europe"
    }

    class "_class_empirenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "empire.n.wn.food"
        string rdf:definition = "an eating apple that somewhat resembles a McIntosh; used as both an eating and a cooking apple"
    }

    class "_class_english_muffinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "english_muffin.n.wn.food"
        string rdf:definition = "round, raised muffin cooked on a griddle; usually split and toasted before being eaten"
    }

    class "_class_entertainment_centernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "entertainment_center.n.wn.artifact"
        string rdf:definition = "a wall unit containing sound and television systems"
    }

    class "_class_wall_unitnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wall_unit.n.wn.artifact"
        string rdf:definition = "a piece of furniture having several units that stands against one wall of a room"
    }

    class "_class_leavevwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "leave.v.wn.motion.Theme"
    }

    class "_class_equipmentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "equipment.n.wn.artifact"
        string rdf:definition = "an instrumentality needed for an undertaking or to perform a service"
    }

    class "_class_performvwncreationTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "perform.v.wn.creation.Theme"
    }

    class "_class_erlenmeyer_flasknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "erlenmeyer_flask.n.wn.artifact"
        string rdf:definition = "a conical flask with a wide base and narrow neck"
    }

    class "_class_espresso_makernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "espresso_maker.n.wn.artifact"
        string rdf:definition = "a coffee maker that forces live steam under pressure through dark roasted coffee grounds"
    }

    class "_class_etagerenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "etagere.n.wn.artifact"
        string rdf:definition = "a piece of furniture with open shelves for displaying small ornaments"
    }

    class "_class_plant_productnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plant_product.n.wn.substance"
        string rdf:definition = "a product made from plant material"
    }

    class "_class_evaporated_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "evaporated_milk.n.wn.food"
        string rdf:definition = "milk concentrated by evaporation"
    }

    class "_class_exitvwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "exit.v.wn.motion.Theme"
    }

    class "_class_fabricnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fabric.n.wn.artifact"
    }

    class "_class_fastnachtnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fastnacht.n.wn.food"
        string rdf:definition = "doughnut traditionally eaten on Shrove Tuesday"
    }

    class "_class_regulatornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "regulator.n.wn.artifact"
        string rdf:definition = "any of various controls or devices for regulating or controlling fluid flow, pressure, temperature, etc."
    }

    class "_class_fauteuilnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fauteuil.n.wn.artifact"
        string rdf:definition = "an upholstered armchair"
    }

    class "_class_fava_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fava_bean.n.wn.food"
        string rdf:definition = "shell beans cooked as lima beans"
    }

    class "_class_shell_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shell_bean.n.wn.food"
        string rdf:definition = "unripe beans removed from the pod before cooking"
    }

    class "_class_feijoanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "feijoa.n.wn.food"
        string rdf:definition = "dark-green kiwi-sized tropical fruit with white flesh; used chiefly for jellies and preserves"
    }

    class "_class_fennelnwnfoodvegetable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fennel.n.wn.food..vegetable"
        string rdf:definition = "aromatic bulbous stem base eaten cooked or raw in salads"
    }

    class "_class_field_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "field_pea.n.wn.food"
        string rdf:definition = "coarse small-seeded pea often used as food when young and tender"
    }

    class "_class_field_soybeannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "field_soybean.n.wn.food"
        string rdf:definition = "seeds used as livestock feed"
    }

    class "_class_soynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soy.n.wn.food"
        string rdf:definition = "the most highly proteinaceous vegetable known; the fruit of the soybean plant is used in a variety of foods and as fodder (especially as a replacement for animal protein)"
    }

    class "_class_fignwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fig.n.wn.food"
        string rdf:definition = "fleshy sweet pear-shaped yellowish or purple multiple fruit eaten fresh or preserved or dried"
    }

    class "_class_fighting_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fighting_chair.n.wn.artifact"
        string rdf:definition = "a fixed chair from which a saltwater angler can fight a hooked fish"
    }

    class "_class_office_furniturenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "office_furniture.n.wn.artifact"
        string rdf:definition = "furniture intended for use in an office"
    }

    class "_class_finger_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "finger_bowl.n.wn.artifact"
        string rdf:definition = "small bowl for rinsing the fingers at table"
    }

    class "_class_fire_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fire_door.n.wn.artifact"
        string rdf:definition = "a fire-resistant door that can be closed to stop the spread of a fire"
    }

    class "_class_fireplugnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fireplug.n.wn.artifact"
        string rdf:definition = "an upright hydrant for drawing water to use in fighting a fire"
    }

    class "_class_hydrantnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hydrant.n.wn.artifact"
        string rdf:definition = "a discharge pipe with a valve and spout at which water may be drawn from the mains of waterworks"
    }

    class "_class_firewallnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "firewall.n.wn.artifact"
        string rdf:definition = "a fireproof (or fire-resistant) wall designed to prevent the spread of fire through a building or a vehicle"
    }

    class "_class_firewaternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "firewater.n.wn.food"
        string rdf:definition = "any strong spirits (such as strong whisky or rum)"
    }

    class "_class_fish_house_punchnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fish_house_punch.n.wn.food"
        string rdf:definition = "a punch made of rum and brandy and water or tea sweetened with sugar syrup"
    }

    class "_class_fish_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fish_knife.n.wn.artifact"
        string rdf:definition = "a small table knife with a spatula blade used for eating fish"
    }

    class "_class_fish_loafnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fish_loaf.n.wn.food"
        string rdf:definition = "flaked fish baked in a loaf with bread crumbs and various seasonings"
    }

    class "_class_meat_loafnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "meat_loaf.n.wn.food"
        string rdf:definition = "a baked loaf of ground meat"
    }

    class "_class_fish_slicenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fish_slice.n.wn.artifact"
        string rdf:definition = "a food turner with a broad blade used for turning or serving fish or other food that is cooked in a frying pan"
    }

    class "_class_turnernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turner.n.wn.artifact"
        string rdf:definition = "cooking utensil having a flat flexible part and a long handle; used for turning or serving food"
    }

    class "_class_fitmentnwnfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fitment.n.wn.furniture"
        string rdf:definition = 'any of the items furnishing or equipping a room (especially built-in furniture); "she liked the kitchen fitments"'
    }

    class "_class_fixvwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fix.v.wn.change.Patient"
    }

    class "_class_fizznwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fizz.n.wn.food"
        string rdf:definition = "an effervescent beverage (usually alcoholic)"
    }

    class "_class_flageoletnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flageolet.n.wn.food"
        string rdf:definition = "a French bean variety with light-colored seeds; usually dried"
    }

    class "_class_flame_tokaynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flame_tokay.n.wn.food"
        string rdf:definition = "purplish-red table grape"
    }

    class "_class_tokaynwnfoodvinifera_grape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tokay.n.wn.food..vinifera_grape"
        string rdf:definition = "variety of wine grape originally grown in Hungary; the prototype of vinifera grapes"
    }

    class "_class_flat_benchnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flat_bench.n.wn.artifact"
        string rdf:definition = "a bench on which a weightlifter lies to do exercises"
    }

    class "_class_flatbednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flatbed.n.wn.artifact"
        string rdf:definition = "an open truck bed or trailer with no sides; used to carry large heavy objects"
    }

    class "_class_truck_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "truck_bed.n.wn.artifact"
        string rdf:definition = "the floor or bottom of a wagon or truck or trailer"
    }

    class "_class_flatbrodnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flatbrod.n.wn.food"
        string rdf:definition = "the thin wafer-like bread of Scandinavia"
    }

    class "_class_flatironnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flatiron.n.wn.artifact"
        string rdf:definition = "an iron that was heated by placing it on a stove"
    }

    class "_class_ironnwnartifacthome_appliance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "iron.n.wn.artifact..home_appliance"
        string rdf:definition = "home appliance consisting of a flat metal base that is heated and used to smooth cloth"
    }

    class "_class_flatwarenwnartifactsilverware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flatware.n.wn.artifact..silverware"
        string rdf:definition = "silverware eating utensils"
    }

    class "_class_silverwarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "silverware.n.wn.artifact"
        string rdf:definition = "tableware made of silver or silver plate or pewter or stainless steel"
    }

    class "_class_flatwarenwnartifacttableware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flatware.n.wn.artifact..tableware"
        string rdf:definition = "tableware that is relatively flat and fashioned as a single piece"
    }

    class "_class_flatworknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flatwork.n.wn.artifact"
        string rdf:definition = "ironing that can be done mechanically"
    }

    class "_class_ironingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ironing.n.wn.artifact"
        string rdf:definition = 'garments (clothes or linens) that are to be (or have been) ironed; "there was a basketful of ironing to do"'
    }

    class "_class_flipnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flip.n.wn.food"
        string rdf:definition = "hot or cold alcoholic mixed drink containing a beaten egg"
    }

    class "_class_horizontal_surfacenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "horizontal_surface.n.wn.artifact"
        string rdf:definition = 'a flat surface at right angles to a plumb line; "park the car on the level"'
    }

    class "_class_floor_lampnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "floor_lamp.n.wn.artifact"
        string rdf:definition = "a lamp that stands on the floor"
    }

    class "_class_lampnwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lamp.n.wn.artifact..furniture"
        string rdf:definition = "a piece of furniture holding one or more electric light bulbs"
    }

    class "_class_floorboardnwnartifactfloor_surface" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "floorboard.n.wn.artifact..floor_surface"
        string rdf:definition = "the floor of an automobile"
    }

    class "_class_flowvwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flow.v.wn.motion.Theme"
    }

    class "_class_fluidnwnsubstanceflowable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fluid.n.wn.substance..flowable"
        string rdf:definition = "continuous amorphous matter that tends to flow and to conform to the outline of its container: a liquid or a gas"
    }

    class "_class_fluidnwnsubstanceroom_temperature" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fluid.n.wn.substance..room_temperature"
        string rdf:definition = "a substance that is fluid at room temperature and pressure"
    }

    class "_class_injectvwnmedicineTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "inject.v.wn.medicine.Theme"
    }

    class "_class_flutenwnartifactwineglass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flute.n.wn.artifact..wineglass"
        string rdf:definition = "a tall narrow wineglass"
    }

    class "_class_folding_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "folding_door.n.wn.artifact"
        string rdf:definition = "an interior door that opens by folding back in sections (rather than by swinging on hinges)"
    }

    class "_class_followvwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "follow.v.wn.motion.Theme"
    }

    class "_class_pickvwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pick.v.wn.change.Patient"
    }

    class "_class_piercevwncontactagentivePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pierce.v.wn.contact..agentive.Patient"
    }

    class "_class_pokevwncontactpiercePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "poke.v.wn.contact..pierce.Patient"
    }

    class "_class_turnvwnmotionflip_overTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turn.v.wn.motion..flip_over.Theme"
    }

    class "_class_food_processornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "food_processor.n.wn.artifact"
        string rdf:definition = "a kitchen appliance with interchangeable blades; used for shredding or blending or chopping or slicing food"
    }

    class "_class_footstoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "footstool.n.wn.artifact"
        string rdf:definition = "a low seat or a stool to rest the feet of a seated person"
    }

    class "_class_fordhooksnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fordhooks.n.wn.food"
        string rdf:definition = "relatively large lima beans"
    }

    class "_class_lima_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lima_bean.n.wn.food"
        string rdf:definition = "broad flat beans simmered gently; never eaten raw"
    }

    class "_class_fortified_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fortified_wine.n.wn.food"
        string rdf:definition = "wine to which alcohol (usually grape brandy) has been added"
    }

    class "_class_fortune_cookienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fortune_cookie.n.wn.food"
        string rdf:definition = "thin folded wafer containing a maxim on a slip of paper"
    }

    class "_class_four_posternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "four_poster.n.wn.artifact"
        string rdf:definition = "a bed with posts at the four corners that can be used to support a canopy or curtains"
    }

    class "_class_slipskin_grapenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "slipskin_grape.n.wn.food"
        string rdf:definition = "a grape whose skin slips readily from the pulp"
    }

    class "_class_frameworknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "framework.n.wn.artifact"
        string rdf:definition = "a structure supporting or containing something"
    }

    class "_class_supporting_structurenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "supporting_structure.n.wn.artifact"
        string rdf:definition = "a structure that serves to support something"
    }

    class "_class_frangipanenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "frangipane.n.wn.food"
        string rdf:definition = "pastry with a creamy almond-flavored filling"
    }

    class "_class_frankfurter_bunnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "frankfurter_bun.n.wn.food"
        string rdf:definition = "a long bun shaped to hold a frankfurter"
    }

    class "_class_freestonenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "freestone.n.wn.food"
        string rdf:definition = "fruit (especially peach) whose flesh does not adhere to the pit"
    }

    class "_class_freezevwnchangerefrigerateInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "freeze.v.wn.change..refrigerate.Instrument"
    }

    class "_class_freezevwnchangestate_changeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "freeze.v.wn.change..state_change.Instrument"
    }

    class "_class_freezevwnchangestate_changePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "freeze.v.wn.change..state_change.Patient"
    }

    class "_class_freezer_drawernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "freezer_drawer.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] drawer inside a fridge that can reach subzero temperatures"
    }

    class "_class_white_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "white_bread.n.wn.food"
        string rdf:definition = "bread made with finely ground and usually bleached wheat flour"
    }

    class "_class_french_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "french_door.n.wn.artifact"
        string rdf:definition = "a light door with transparent or glazed panels extending the full length"
    }

    class "_class_french_friesnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "french_fries.n.wn.food"
        string rdf:definition = "strips of potato fried in deep fat"
    }

    class "_class_french_fritternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "french_fritter.n.wn.food"
        string rdf:definition = "a deep-fried, yeast-raised doughnut dusted with confectioners' sugar"
    }

    class "_class_french_loafnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "french_loaf.n.wn.food"
        string rdf:definition = "a loaf of French bread"
    }

    class "_class_loaf_of_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "loaf_of_bread.n.wn.food"
        string rdf:definition = "a shaped mass of baked bread that is usually sliced before eating"
    }

    class "_class_french_pastrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "french_pastry.n.wn.food"
        string rdf:definition = "sweet filled pastry made of especially puff paste"
    }

    class "_class_french_sorrelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "french_sorrel.n.wn.food"
        string rdf:definition = "greens having small tart oval to pointed leaves; preferred to common sorrel for salads"
    }

    class "_class_french_windownwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "french_window.n.wn.artifact"
        string rdf:definition = "a French door situated in an exterior wall of a building"
    }

    class "_class_fresh_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fresh_bean.n.wn.food"
        string rdf:definition = "beans eaten before they are ripe as opposed to dried"
    }

    class "_class_waternwnsubstanceliquid" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "water.n.wn.substance..liquid"
        string rdf:definition = "binary compound that occurs at room temperature as a clear colorless odorless tasteless liquid; freezes into ice below 0 degrees centigrade and boils above 100 degrees centigrade; widely used as a solvent"
    }

    class "_class_frijolenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "frijole.n.wn.food"
        string rdf:definition = "Mexican bean; usually dried"
    }

    class "_class_front_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "front_door.n.wn.artifact"
        string rdf:definition = "exterior door (at the entrance) at the front of a building"
    }

    class "_class_frostvwncookingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "frost.v.wn.cooking.Patient"
    }

    class "_class_frozen_orange_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "frozen_orange_juice.n.wn.food"
        string rdf:definition = "orange juice that has been concentrated and frozen"
    }

    class "_class_orange_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "orange_juice.n.wn.food"
        string rdf:definition = "bottled or freshly squeezed juice of oranges"
    }

    class "_class_reproductive_structurenwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "reproductive_structure.n.wn.plant"
        string rdf:definition = "the parts of a plant involved in its reproduction"
    }

    class "_class_gathervwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gather.v.wn.contact.Theme"
    }

    class "_class_pickvwnconsumptionPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pick.v.wn.consumption.Patient"
    }

    class "_class_pickvwncontactgatherTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pick.v.wn.contact..gather.Theme"
    }

    class "_class_pullvwncontactforceTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pull.v.wn.contact..force.Theme"
    }

    class "_class_shrivelvwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shrivel.v.wn.change.Patient"
    }

    class "_class_fruit_punchnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fruit_punch.n.wn.food"
        string rdf:definition = "a punch made of fruit juices mixed with water or soda water (with or without alcohol)"
    }

    class "_class_frumentynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "frumenty.n.wn.food"
        string rdf:definition = "sweet spiced porridge made from hulled wheat"
    }

    class "_class_hot_cerealnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hot_cereal.n.wn.food"
        string rdf:definition = "a cereal that is served hot"
    }

    class "_class_fryvwncookingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fry.v.wn.cooking.Patient"
    }

    class "_class_functionvwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "function.v.wn.contact.Instrument"
    }

    class "_class_furnishingsnwnartifactinstrumentality" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "furnishings.n.wn.artifact..instrumentality"
        string rdf:definition = "(usually plural) the instrumentalities (furniture and appliances and other movable accessories including curtains and rugs) that make a home (or other area) livable"
    }

    class "_class_gallianonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "galliano.n.wn.food"
        string rdf:definition = "golden Italian liqueur flavored with herbs"
    }

    class "_class_game_equipmentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "game_equipment.n.wn.artifact"
        string rdf:definition = "equipment or apparatus used in playing a game"
    }

    class "_class_gaming_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gaming_table.n.wn.artifact"
        string rdf:definition = "a table used for gambling; may be equipped with a gameboard and slots for chips"
    }

    class "_class_garambullanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "garambulla.n.wn.food"
        string rdf:definition = "small berrylike fruit"
    }

    class "_class_garden_cressnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "garden_cress.n.wn.food"
        string rdf:definition = "cress cultivated for salads and garnishes"
    }

    class "_class_garlic_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "garlic_bread.n.wn.food"
        string rdf:definition = "French or Italian bread sliced and spread with garlic butter then crisped in the oven"
    }

    class "_class_garmentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "garment.n.wn.artifact"
        string rdf:definition = 'an article of clothing; "garments of the finest silk"'
    }

    class "_class_gas_ovennwnartifactdomestic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gas_oven.n.wn.artifact..domestic"
        string rdf:definition = "a domestic oven fueled by gas"
    }

    class "_class_gas_rangenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gas_range.n.wn.artifact"
        string rdf:definition = "a range with gas rings and an oven for cooking with gas"
    }

    class "_class_gastric_juicenwnbody" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gastric_juice.n.wn.body"
        string rdf:definition = "digestive secretions of the stomach glands consisting chiefly of hydrochloric acid and mucin and the enzymes pepsin and rennin and lipase"
    }

    class "_class_gateaunwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gateau.n.wn.food"
        string rdf:definition = "any of various rich and elaborate cakes"
    }

    class "_class_gateleg_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gateleg_table.n.wn.artifact"
        string rdf:definition = "a drop-leaf table with the drop-leaves supported by hinged legs"
    }

    class "_class_generic_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "generic_wine.n.wn.food"
        string rdf:definition = "wine that does not meet the minimum qualifications and standards for use of a designation by appellation of origin (where the grapes are grown) or by varietal content; may only be labeled by proprietary (made-up) name, by general color (such as `vin rouge', `vino rosso', `rotwein', `red wine', etc.), or by general class (as `vin ordinaire', `vin de table', `vino da tavola', `tafelwein', `table wine', etc.)"
    }

    class "_class_genevanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "geneva.n.wn.food"
        string rdf:definition = "gin made in the Netherlands"
    }

    class "_class_genipnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "genip.n.wn.food"
        string rdf:definition = "round one-inch Caribbean fruit with green leathery skin and sweet juicy translucent pulp; eaten like grapes"
    }

    class "_class_genipapnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "genipap.n.wn.food"
        string rdf:definition = "a succulent orange-sized tropical fruit with a thick rind"
    }

    class "_class_genoisenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "genoise.n.wn.food"
        string rdf:definition = "rich and delicate Italian sponge cake"
    }

    class "_class_gherkinnwnfoodcucumber" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gherkin.n.wn.food..cucumber"
        string rdf:definition = "small prickly cucumber"
    }

    class "_class_gherkinnwnfoodpickle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gherkin.n.wn.food..pickle"
        string rdf:definition = "any of various small cucumbers pickled whole"
    }

    class "_class_gimletnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gimlet.n.wn.food"
        string rdf:definition = "a cocktail made of gin or vodka and lime juice"
    }

    class "_class_gin_and_itnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gin_and_it.n.wn.food"
        string rdf:definition = "a cocktail made of gin and sweet vermouth"
    }

    class "_class_sweet_vermouthnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_vermouth.n.wn.food"
        string rdf:definition = "sweet dark amber variety"
    }

    class "_class_gin_and_tonicnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gin_and_tonic.n.wn.food"
        string rdf:definition = "gin and quinine water"
    }

    class "_class_tonicnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tonic.n.wn.food"
        string rdf:definition = "lime- or lemon-flavored carbonated water containing quinine"
    }

    class "_class_gin_rickeynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gin_rickey.n.wn.food"
        string rdf:definition = "a rickey made with gin"
    }

    class "_class_rickeynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rickey.n.wn.food"
        string rdf:definition = "a mixed drink made of sweetened lime juice and soda water usually with liquor"
    }

    class "_class_gin_slingnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gin_sling.n.wn.food"
        string rdf:definition = "a sling made with gin"
    }

    class "_class_ginger_alenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ginger_ale.n.wn.food"
        string rdf:definition = "ginger-flavored carbonated drink"
    }

    class "_class_ginger_beernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ginger_beer.n.wn.food"
        string rdf:definition = "carbonated slightly alcoholic drink flavored with fermented ginger"
    }

    class "_class_gingerbreadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gingerbread.n.wn.food"
        string rdf:definition = "cake flavored with ginger"
    }

    class "_class_gingerbread_mannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gingerbread_man.n.wn.food"
        string rdf:definition = "gingerbread cut in the shape of a person"
    }

    class "_class_glassnwnartifactglassware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "glass.n.wn.artifact..glassware"
        string rdf:definition = 'glassware collectively; "She collected old glass"'
    }

    class "_class_globe_peppernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "globe_pepper.n.wn.food"
        string rdf:definition = "round sweet pepper"
    }

    class "_class_gluten_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gluten_bread.n.wn.food"
        string rdf:definition = "bread made with gluten flour"
    }

    class "_class_goa_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "goa_bean.n.wn.food"
        string rdf:definition = "Old World tropical bean"
    }

    class "_class_goats_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "goats_milk.n.wn.food"
        string rdf:definition = "the milk of a goat"
    }

    class "_class_gobletnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "goblet.n.wn.artifact"
        string rdf:definition = "a drinking glass with a base and stem"
    }

    class "_class_goffernwnartifactiron" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "goffer.n.wn.artifact..iron"
        string rdf:definition = "an iron used to press pleats and ridges"
    }

    class "_class_gold_platenwnartifacttableware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gold_plate.n.wn.artifact..tableware"
        string rdf:definition = "tableware that is plated with gold"
    }

    class "_class_golden_deliciousnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "golden_delicious.n.wn.food"
        string rdf:definition = "a sweet eating apple with yellow skin"
    }

    class "_class_golden_gramnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "golden_gram.n.wn.food"
        string rdf:definition = "seed of the mung bean plant used for food"
    }

    class "_class_gooseberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gooseberry.n.wn.food"
        string rdf:definition = "currant-like berry used primarily in jams and jellies"
    }

    class "_class_gourdnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gourd.n.wn.artifact"
        string rdf:definition = "bottle made from the dried shell of a bottle gourd"
    }

    class "_class_grace_cupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grace_cup.n.wn.artifact"
        string rdf:definition = "cup to be passed around for the final toast after a meal"
    }

    class "_class_graham_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "graham_bread.n.wn.food"
        string rdf:definition = "bread made of graham (whole wheat) flour"
    }

    class "_class_graham_crackernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "graham_cracker.n.wn.food"
        string rdf:definition = "semisweet whole-wheat cracker"
    }

    class "_class_granadillanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "granadilla.n.wn.food"
        string rdf:definition = "the egg-shaped edible fruit of tropical American vines related to passionflowers"
    }

    class "_class_grand_marniernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grand_marnier.n.wn.food"
        string rdf:definition = "an orange-flavored French liqueur"
    }

    class "_class_granitewarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "graniteware.n.wn.artifact"
        string rdf:definition = "a kind of stone-grey enamelware"
    }

    class "_class_granny_smithnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "granny_smith.n.wn.food"
        string rdf:definition = "apple with a green skin and hard tart flesh"
    }

    class "_class_granolanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "granola.n.wn.food"
        string rdf:definition = "cereal made of especially rolled oats with dried fruits and nuts and honey or brown sugar"
    }

    class "_class_granola_barnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "granola_bar.n.wn.food"
        string rdf:definition = "cookie bar made of granola"
    }

    class "_class_granulated_sugarnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "granulated_sugar.n.wn.food"
        string rdf:definition = "sugar in the form of small grains"
    }

    class "_class_powdernwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "powder.n.wn.substance"
        string rdf:definition = "a solid substance in the form of tiny loose particles; a solid that has been pulverized"
    }

    class "_class_sugarnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar.n.wn.food"
        string rdf:definition = "a white crystalline carbohydrate used as a sweetener and preservative"
    }

    class "_class_grapenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grape.n.wn.food"
        string rdf:definition = "any of various juicy fruit of the genus Vitis with green or purple skins; grow in clusters"
    }

    class "_class_grape_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grape_juice.n.wn.food"
        string rdf:definition = "the juice of grapes"
    }

    class "_class_grapefruitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grapefruit.n.wn.food"
        string rdf:definition = "large yellow fruit with somewhat acid juicy pulp; usual serving consists of a half"
    }

    class "_class_grapefruit_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grapefruit_juice.n.wn.food"
        string rdf:definition = "the juice of grapefruits"
    }

    class "_class_grappanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grappa.n.wn.food"
        string rdf:definition = "Italian brandy made from residue of grapes after pressing"
    }

    class "_class_grasshoppernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grasshopper.n.wn.food"
        string rdf:definition = "a cocktail made of creme de menthe and cream (sometimes with creme de cacao)"
    }

    class "_class_gravynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gravy.n.wn.food"
        string rdf:definition = "a sauce made by adding stock, flour, or other ingredients to the juice and fat that drips from cooking meats"
    }

    class "_class_green_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "green_bean.n.wn.food"
        string rdf:definition = "immature bean pod eaten as a vegetable"
    }

    class "_class_onionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "onion.n.wn.food"
        string rdf:definition = "an aromatic flavorful vegetable"
    }

    class "_class_green_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "green_pea.n.wn.food"
        string rdf:definition = "fresh pea"
    }

    class "_class_green_peppernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "green_pepper.n.wn.food"
        string rdf:definition = "a sweet pepper that becomes red when ripe"
    }

    class "_class_green_soybeannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "green_soybean.n.wn.food"
        string rdf:definition = "seeds shelled and cooked as lima beans"
    }

    class "_class_greengagenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "greengage.n.wn.food"
        string rdf:definition = "sweet green or greenish-yellow variety of plum"
    }

    class "_class_gridnwnartifactcooking_utensil" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grid.n.wn.artifact..cooking_utensil"
        string rdf:definition = "a cooking utensil of parallel metal bars; used to grill fish or meat"
    }

    class "_class_griddlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "griddle.n.wn.artifact"
        string rdf:definition = "cooking utensil consisting of a flat heated surface (as on top of a stove) on which food is cooked"
    }

    class "_class_grimes_goldennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grimes_golden.n.wn.food"
        string rdf:definition = "yellow apple that ripens in late autumn; eaten raw"
    }

    class "_class_grissinonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grissino.n.wn.food"
        string rdf:definition = "a long slender crusty breadstick"
    }

    class "_class_gritsnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grits.n.wn.food"
        string rdf:definition = "coarsely ground hulled corn boiled as a breakfast dish in the southern United States"
    }

    class "_class_grognwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grog.n.wn.food"
        string rdf:definition = "rum cut with water"
    }

    class "_class_porridgenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "porridge.n.wn.food"
        string rdf:definition = "soft food made by boiling oatmeal or other meal or legumes in water or milk until thick"
    }

    class "_class_guavanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "guava.n.wn.food"
        string rdf:definition = "tropical fruit having yellow skin and pink pulp; eaten fresh or used for e.g. jellies"
    }

    class "_class_gueridonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gueridon.n.wn.artifact"
        string rdf:definition = "a small round table"
    }

    class "_class_guinnessnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "guinness.n.wn.food"
        string rdf:definition = "a kind of bitter stout"
    }

    class "_class_stoutnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stout.n.wn.food"
        string rdf:definition = "a strong very dark heavy-bodied ale made from pale malt and roasted unmalted barley and (often) caramel malt with hops"
    }

    class "_class_gumbonwnfoodvegetable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gumbo.n.wn.food..vegetable"
        string rdf:definition = "long mucilaginous green pods; may be simmered or sauteed but used especially in soups and stews"
    }

    class "_class_gyronwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gyro.n.wn.food"
        string rdf:definition = "a Greek sandwich: sliced roast lamb with onion and tomato stuffed into pita bread"
    }

    class "_class_pitanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pita.n.wn.food"
        string rdf:definition = "usually small round bread that can open into a pocket for filling"
    }

    class "_class_hallstandnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hallstand.n.wn.artifact"
        string rdf:definition = "a piece of furniture where coats and hats and umbrellas can be hung; usually has a mirror"
    }

    class "_class_ham_and_eggsnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ham_and_eggs.n.wn.food"
        string rdf:definition = "eggs (scrambled or fried) served with ham"
    }

    class "_class_ham_sandwichnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ham_sandwich.n.wn.food"
        string rdf:definition = "a sandwich made with a filling of sliced ham"
    }

    class "_class_hamburger_bunnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hamburger_bun.n.wn.food"
        string rdf:definition = "a round bun shaped to hold a hamburger patty"
    }

    class "_class_hammocknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hammock.n.wn.artifact"
        string rdf:definition = "a hanging bed of canvas or rope netting (usually suspended between two trees); swings easily"
    }

    class "_class_hand_blowernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hand_blower.n.wn.artifact"
        string rdf:definition = "a hand-held electric blower that can blow warm air onto the hair; used for styling hair"
    }

    class "_class_hard_cidernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hard_cider.n.wn.food"
        string rdf:definition = "alcoholic drink from fermented cider; `cider' and `cyder' are European (especially British) usages for the fermented beverage"
    }

    class "_class_hard_rollnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hard_roll.n.wn.food"
        string rdf:definition = "yeast-raised roll with a hard crust"
    }

    class "_class_hardtacknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hardtack.n.wn.food"
        string rdf:definition = "very hard unsalted biscuit or bread; a former ship's staple"
    }

    class "_class_haricot_vertnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "haricot_vert.n.wn.food"
        string rdf:definition = "very small and slender green bean"
    }

    class "_class_harvey_wallbangernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "harvey_wallbanger.n.wn.food"
        string rdf:definition = "a cocktail made of vodka or gin and orange juice and Galliano"
    }

    class "_class_hasty_puddingnwnfoodmush" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hasty_pudding.n.wn.food..mush"
        string rdf:definition = "cornmeal mush served with sweetening (maple syrup or brown sugar)"
    }

    class "_class_hatchbacknwnartifactcar_door" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hatchback.n.wn.artifact..car_door"
        string rdf:definition = "a sloping rear car door that is lifted to open"
    }

    class "_class_head_cabbagenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "head_cabbage.n.wn.food"
        string rdf:definition = "any of several varieties of cabbage having a large compact globular head; may be steamed or boiled or stir-fried or used raw in coleslaw"
    }

    class "_class_herb_teanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "herb_tea.n.wn.food"
        string rdf:definition = "tea-like drink made of leaves of various herbs"
    }

    class "_class_high_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "high_table.n.wn.artifact"
        string rdf:definition = "a dining table in a dining-hall raised on a platform; seats are reserved for distinguished persons"
    }

    class "_class_highball_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "highball_glass.n.wn.artifact"
        string rdf:definition = "a tall glass for serving highballs"
    }

    class "_class_highboynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "highboy.n.wn.artifact"
        string rdf:definition = "a tall chest of drawers divided into two sections and supported on four legs"
    }

    class "_class_highchairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "highchair.n.wn.artifact"
        string rdf:definition = "a chair for feeding a very young child; has four long legs and a footrest and a detachable tray"
    }

    class "_class_hipflasknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hipflask.n.wn.artifact"
        string rdf:definition = "a flask that holds spirits"
    }

    class "_class_hitvwncontactstrikeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hit.v.wn.contact..strike.Instrument"
    }

    class "_class_hoe_handlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hoe_handle.n.wn.artifact"
        string rdf:definition = "the handle of a hoe"
    }

    class "_class_hoecakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hoecake.n.wn.food"
        string rdf:definition = "thin usually unleavened johnnycake made of cornmeal; originally baked on the blade of a hoe over an open fire (southern)"
    }

    class "_class_johnnycakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "johnnycake.n.wn.food"
        string rdf:definition = "cornbread usually cooked pancake-style on a griddle (chiefly New England)"
    }

    class "_class_hog_plumnwnfoodtropical" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hog_plum.n.wn.food..tropical"
        string rdf:definition = "yellow oval tropical fruit"
    }

    class "_class_hog_plumnwnfoodunited_states" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hog_plum.n.wn.food..united_states"
        string rdf:definition = "fruit of the wild plum of southern United States"
    }

    class "_class_hollowwarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hollowware.n.wn.artifact"
        string rdf:definition = "silverware serving dishes"
    }

    class "_class_home_brewnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "home_brew.n.wn.food"
        string rdf:definition = "an alcoholic beverage (especially beer) made at home"
    }

    class "_class_home_friesnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "home_fries.n.wn.food"
        string rdf:definition = "sliced pieces of potato fried in a pan until brown and crisp"
    }

    class "_class_homogenized_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "homogenized_milk.n.wn.food"
        string rdf:definition = "milk with the fat particles broken up and dispersed uniformly so the cream will not rise"
    }

    class "_class_honeynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "honey.n.wn.food"
        string rdf:definition = "a sweet yellow liquid produced by bees"
    }

    class "_class_sweeteningnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweetening.n.wn.food"
        string rdf:definition = "something added to foods to make them taste sweeter"
    }

    class "_class_scoopvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scoop.v.wn.contact.Patient"
    }

    class "_class_honey_bunnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "honey_bun.n.wn.food"
        string rdf:definition = "rolled dough spread with sugar and nuts then sliced and baked in muffin tins with honey or sugar and butter in the bottom"
    }

    class "_class_honey_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "honey_cake.n.wn.food"
        string rdf:definition = "a spicy cake partially sweetened with honey"
    }

    class "_class_hoochnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hooch.n.wn.food"
        string rdf:definition = "an illicitly distilled (and usually inferior) alcoholic liquor"
    }

    class "_class_hornnwnartifactpommel" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "horn.n.wn.artifact..pommel"
        string rdf:definition = "a high pommel of a Western saddle (usually metal covered with leather)"
    }

    class "_class_pommelnwnartifactsaddle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pommel.n.wn.artifact..saddle"
        string rdf:definition = "handgrip formed by the raised front part of a saddle"
    }

    class "_class_hospital_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hospital_bed.n.wn.artifact"
        string rdf:definition = "a single bed with a frame in three sections so the head or middle or foot can be raised as required"
    }

    class "_class_single_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "single_bed.n.wn.artifact"
        string rdf:definition = "a bed for one occupant"
    }

    class "_class_hostnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "host.n.wn.food"
        string rdf:definition = "a technical name for the bread used in the service of Mass or Holy Communion"
    }

    class "_class_peppernwnfoodsolanaceous_vegetable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pepper.n.wn.food..solanaceous_vegetable"
        string rdf:definition = "sweet and hot varieties of fruits of plants of the genus Capsicum"
    }

    class "_class_hot_toddynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hot_toddy.n.wn.food"
        string rdf:definition = "a mixed drink made of liquor and water with sugar and spices and served hot"
    }

    class "_class_hubbard_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hubbard_squash.n.wn.food"
        string rdf:definition = "large football-shaped winter squash with a warty grey-green rind"
    }

    class "_class_huckleberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "huckleberry.n.wn.food"
        string rdf:definition = "blue-black berry similar to blueberries and bilberries of the eastern United States"
    }

    class "_class_human" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "human"
    }

    class "_class_personnwnbody" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "person.n.wn.body"
    }

    class "_class_humidifiernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "humidifier.n.wn.artifact"
        string rdf:definition = 'an appliance designed to add moisture to the air in a building; "The humidifier assures the appropriate moisture level for our paintings"'
    }

    class "_class_moistenvwnchangeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "moisten.v.wn.change.Instrument"
    }

    class "_class_hunting_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hunting_knife.n.wn.artifact"
        string rdf:definition = "a large sharp knife with a handle shaped to fit the grip"
    }

    class "_class_hush_puppynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hush_puppy.n.wn.food"
        string rdf:definition = "deep-fried cornbread ball (southern)"
    }

    class "_class_hydromelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hydromel.n.wn.food"
        string rdf:definition = "honey diluted in water; becomes mead when fermented"
    }

    class "_class_ice_machinenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ice_machine.n.wn.artifact"
        string rdf:definition = "an electric refrigerator to supply ice cubes"
    }

    class "_class_ice_teanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ice_tea.n.wn.food"
        string rdf:definition = "strong tea served over ice"
    }

    class "_class_ice_waternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ice_water.n.wn.food"
        string rdf:definition = "water served ice-cold or with ice"
    }

    class "_class_iced_coffeenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "iced_coffee.n.wn.food"
        string rdf:definition = "a strong sweetened coffee served over ice with cream"
    }

    class "_class_iced_tea_spoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "iced_tea_spoon.n.wn.artifact"
        string rdf:definition = "a teaspoon with a long handle"
    }

    class "_class_icing_sugarnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "icing_sugar.n.wn.food"
        string rdf:definition = "finely powdered sugar used to make icing"
    }

    class "_class_ilamanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ilama.n.wn.food"
        string rdf:definition = "whitish tropical fruit with a pinkish tinge related to custard apples; grown in the southern United States"
    }

    class "_class_implementnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "implement.n.wn.artifact"
        string rdf:definition = "instrumentation (a piece of equipment or tool) used to effect an end"
    }

    class "_class_inhalernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "inhaler.n.wn.artifact"
        string rdf:definition = "a dispenser that produces a chemical vapor to be inhaled in order to relieve nasal congestion"
    }

    class "_class_ink_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ink_bottle.n.wn.artifact"
        string rdf:definition = "a bottle of ink"
    }

    class "_class_instant_coffeenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "instant_coffee.n.wn.food"
        string rdf:definition = 'dehydrated coffee that can be made into a drink by adding hot water; "the advantages of instant coffee are speed of preparation and long shelf life"'
    }

    class "_class_instrumentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "instrument.n.wn.artifact"
        string rdf:definition = "a device that requires skill for proper use"
    }

    class "_class_repairvwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "repair.v.wn.change.Patient"
    }

    class "_class_int_control" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "int_control"
    }

    class "_class_invertebratenwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "invertebrate.n.wn.animal"
    }

    class "_class_irishnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "irish.n.wn.food"
        string rdf:definition = "whiskey made in Ireland chiefly from barley"
    }

    class "_class_irish_coffeenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "irish_coffee.n.wn.food"
        string rdf:definition = "sweetened coffee with Irish whiskey and whipped cream"
    }

    class "_class_irish_soda_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "irish_soda_bread.n.wn.food"
        string rdf:definition = "round loaf made with soda and buttermilk; often containing caraway seeds and raisins"
    }

    class "_class_ironvwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "iron.v.wn.contact.Instrument"
    }

    class "_class_pressvwncontactcompressTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "press.v.wn.contact..compress.Theme"
    }

    class "_class_iron_outvwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "iron_out.v.wn.contact.Instrument"
    }

    class "_class_italian_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "italian_bread.n.wn.food"
        string rdf:definition = "unsweetened yeast-raised bread made without shortening and baked in long thick loaves with tapered ends"
    }

    class "_class_jaboticabanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jaboticaba.n.wn.food"
        string rdf:definition = "tough-skinned purple grapelike tropical fruit grown in Brazil"
    }

    class "_class_jacket_potatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jacket_potato.n.wn.food"
        string rdf:definition = "a baked potato served with the jacket on"
    }

    class "_class_jackfruitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jackfruit.n.wn.food"
        string rdf:definition = "immense East Indian fruit resembling breadfruit; it contains an edible pulp and nutritious seeds that are commonly roasted"
    }

    class "_class_jaffa_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jaffa_orange.n.wn.food"
        string rdf:definition = "sweet almost seedless orange of Israel"
    }

    class "_class_sweet_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_orange.n.wn.food"
        string rdf:definition = "orange with sweet juicy pulp; often has a thin skin"
    }

    class "_class_jamnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jam.n.wn.food"
        string rdf:definition = "preserve of crushed fruit"
    }

    class "_class_jamaica_rumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jamaica_rum.n.wn.food"
        string rdf:definition = "heavy pungent rum from Jamaica"
    }

    class "_class_jampotnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jampot.n.wn.artifact"
        string rdf:definition = "a jar for holding jellies or preserves"
    }

    class "_class_jar_of_picklesnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jar_of_pickles.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNet] a jar of pickles"
    }

    class "_class_jellyrollnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jellyroll.n.wn.food"
        string rdf:definition = "thin sheet of sponge cake spread with jelly and then rolled up to make a cylindrical cake"
    }

    class "_class_jeroboamnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jeroboam.n.wn.artifact"
        string rdf:definition = "a large wine bottle (holds 4/5 of a gallon)"
    }

    class "_class_jerusalem_artichokenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jerusalem_artichoke.n.wn.food"
        string rdf:definition = "sunflower tuber eaten raw or boiled or sliced thin and fried as Saratoga chips"
    }

    class "_class_tubernwnplantplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tuber.n.wn.plant..plant"
        string rdf:definition = "a fleshy underground stem or root serving for reproductive and food storage"
    }

    class "_class_jewish_rye_breadnwnjudaism" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jewish_rye_bread.n.wn.judaism"
        string rdf:definition = "(Judaism) bread made with rye flour; usually contains caraway seeds"
    }

    class "_class_jonathannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jonathan.n.wn.food"
        string rdf:definition = "red late-ripening apple; primarily eaten raw"
    }

    class "_class_jug_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jug_wine.n.wn.food"
        string rdf:definition = "inexpensive wine sold in large bottles or jugs"
    }

    class "_class_liquid_body_substancenwnbody" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "liquid_body_substance.n.wn.body"
        string rdf:definition = "the liquid parts of the body"
    }

    class "_class_jujubenwnfoodedible_fruit" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jujube.n.wn.food..edible_fruit"
        string rdf:definition = "dark red plumlike fruit of Old World buckthorn trees"
    }

    class "_class_julepnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "julep.n.wn.food"
        string rdf:definition = "bourbon and sugar and mint over crushed ice"
    }

    class "_class_julienne_vegetablenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "julienne_vegetable.n.wn.food"
        string rdf:definition = "a vegetable cut into thin strips (usually used as a garnish)"
    }

    class "_class_jumblenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jumble.n.wn.food"
        string rdf:definition = "small flat ring-shaped cake or cookie"
    }

    class "_class_kahluanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kahlua.n.wn.food"
        string rdf:definition = "coffee-flavored liqueur made in Mexico"
    }

    class "_class_kai_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kai_apple.n.wn.food"
        string rdf:definition = "South African fruit smelling and tasting like apricots; used for pickles and preserves"
    }

    class "_class_kaiser_rollnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kaiser_roll.n.wn.food"
        string rdf:definition = "rounded raised poppy-seed roll made of a square piece of dough by folding the corners in to the center"
    }

    class "_class_kashanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kasha.n.wn.food"
        string rdf:definition = "boiled or baked buckwheat"
    }

    class "_class_kavanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kava.n.wn.food"
        string rdf:definition = "an alcoholic drink made from the aromatic roots of the kava shrub"
    }

    class "_class_kentucky_wondernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kentucky_wonder.n.wn.food"
        string rdf:definition = "flat-podded green bean"
    }

    class "_class_ketembillanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ketembilla.n.wn.food"
        string rdf:definition = "maroon-purple gooseberry-like fruit of India having tart-sweet purple pulp used especially for preserves"
    }

    class "_class_kettlenwnartifactpot" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kettle.n.wn.artifact..pot"
        string rdf:definition = "a metal pot for stewing or boiling; usually has a lid"
    }

    class "_class_key_limenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "key_lime.n.wn.food"
        string rdf:definition = "small yellow-green limes of southern Florida"
    }

    class "_class_limenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lime.n.wn.food"
        string rdf:definition = "the green acidic fruit of any of various lime trees"
    }

    class "_class_musical_instrumentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "musical_instrument.n.wn.artifact"
        string rdf:definition = "any of various devices or contrivances that can be used to produce musical tones or sounds"
    }

    class "_class_kidney_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kidney_bean.n.wn.food"
        string rdf:definition = "large dark red bean; usually dried"
    }

    class "_class_kidney_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kidney_pie.n.wn.food"
        string rdf:definition = "like steak and kidney pie but without steak"
    }

    class "_class_meat_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "meat_pie.n.wn.food"
        string rdf:definition = "pie made with meat or fowl enclosed in pastry or covered with pastry or biscuit dough"
    }

    class "_class_killvwncontactintentionalInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kill.v.wn.contact..intentional.Instrument"
    }

    class "_class_kirpannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kirpan.n.wn.artifact"
        string rdf:definition = "a ceremonial four-inch curved dagger that Sikh men and women are obliged to wear at all times"
    }

    class "_class_kirschnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kirsch.n.wn.food"
        string rdf:definition = "from fermented juice of black morello cherries"
    }

    class "_class_kissnwnfoodcookie" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kiss.n.wn.food..cookie"
        string rdf:definition = "a cookie made of egg whites and sugar"
    }

    class "_class_kitchen_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kitchen_table.n.wn.artifact"
        string rdf:definition = "a table in the kitchen"
    }

    class "_class_utensilnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "utensil.n.wn.artifact"
        string rdf:definition = "an implement for practical use (especially in a household)"
    }

    class "_class_kiwinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kiwi.n.wn.food"
        string rdf:definition = "fuzzy brown egg-shaped fruit with slightly tart green flesh"
    }

    class "_class_weaponnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "weapon.n.wn.artifact"
        string rdf:definition = 'any instrument or instrumentality used in fighting or hunting; "he was licensed to carry a weapon"'
    }

    class "_class_raisevwnmotionliftPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "raise.v.wn.motion..lift.Patient"
    }

    class "_class_kohlrabinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kohlrabi.n.wn.food"
        string rdf:definition = "fleshy turnip-shaped edible stem of the kohlrabi plant"
    }

    class "_class_koumissnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "koumiss.n.wn.food"
        string rdf:definition = "an alcoholic beverage made from fermented mare's milk; made originally by nomads of central Asia"
    }

    class "_class_krisnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kris.n.wn.artifact"
        string rdf:definition = "a Malayan dagger with a wavy blade"
    }

    class "_class_kummelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kummel.n.wn.food"
        string rdf:definition = "liqueur flavored with caraway seed or cumin"
    }

    class "_class_kumquatnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kumquat.n.wn.food"
        string rdf:definition = "small oval citrus fruit with thin sweet rind and very acid pulp"
    }

    class "_class_kvassnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kvass.n.wn.food"
        string rdf:definition = "fermented beverage resembling beer but made from rye or barley"
    }

    class "_class_kylixnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kylix.n.wn.artifact"
        string rdf:definition = "a shallow drinking cup with two handles; used in ancient Greece"
    }

    class "_class_lab_benchnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lab_bench.n.wn.artifact"
        string rdf:definition = "a workbench in a laboratory"
    }

    class "_class_workbenchnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "workbench.n.wn.artifact"
        string rdf:definition = "a strong worktable for a carpenter or mechanic"
    }

    class "_class_lacingnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lacing.n.wn.food"
        string rdf:definition = "a small amount of liquor added to a food or beverage"
    }

    class "_class_ladder_backnwnartifactchair" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ladder_back.n.wn.artifact..chair"
        string rdf:definition = "a chair with a ladder-back"
    }

    class "_class_ladyfingernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ladyfinger.n.wn.food"
        string rdf:definition = "small finger-shaped sponge cake"
    }

    class "_class_lamb_ZZ_s_quarternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lamb_ZZ_s_quarter.n.wn.food"
        string rdf:definition = "leaves collected from the wild"
    }

    class "_class_lightvwnchangeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "light.v.wn.change.Instrument"
    }

    class "_class_lightenvwnchangeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lighten.v.wn.change.Instrument"
    }

    class "_class_lancetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lancet.n.wn.artifact"
        string rdf:definition = "a surgical knife with a pointed double-edged blade; used for punctures and small incisions"
    }

    class "_class_lane_ZZ_s_prince_albertnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lane_ZZ_s_prince_albert.n.wn.food"
        string rdf:definition = "apple used primarily in cooking"
    }

    class "_class_lansehnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lanseh.n.wn.food"
        string rdf:definition = "East Indian tart yellow berrylike fruit"
    }

    class "_class_larvanwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "larva.n.wn.animal"
    }

    class "_class_lawn_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lawn_chair.n.wn.artifact"
        string rdf:definition = "chair left outside for use on a lawn or in a garden"
    }

    class "_class_lawn_furniturenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lawn_furniture.n.wn.artifact"
        string rdf:definition = "furniture intended for use on a lawn or in a garden"
    }

    class "_class_layer_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "layer_cake.n.wn.food"
        string rdf:definition = "cake having layers held together by a sweet filling and usually covered with frosting"
    }

    class "_class_leadvwnmotionconductTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lead.v.wn.motion..conduct.Theme"
    }

    class "_class_leaf_lettucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "leaf_lettuce.n.wn.food"
        string rdf:definition = "lettuce with loosely curled leaves that do not form a compact head"
    }

    class "_class_lecternnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lectern.n.wn.artifact"
        string rdf:definition = "desk or stand with a slanted top used to hold a text at the proper height for a lecturer"
    }

    class "_class_standnwnartifacttable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stand.n.wn.artifact..table"
        string rdf:definition = 'a small table for holding articles of various kinds; "a bedside stand"'
    }

    class "_class_leeknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "leek.n.wn.food"
        string rdf:definition = "related to onions; white cylindrical bulb and flat dark-green leaves"
    }

    class "_class_lemonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lemon.n.wn.food"
        string rdf:definition = "yellow oval fruit with juicy acidic flesh"
    }

    class "_class_lemon_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lemon_juice.n.wn.food"
        string rdf:definition = "usually freshly squeezed juice of lemons"
    }

    class "_class_lemon_meringue_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lemon_meringue_pie.n.wn.food"
        string rdf:definition = "pie containing lemon custard and topped with meringue"
    }

    class "_class_lemonadenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lemonade.n.wn.food"
        string rdf:definition = "sweetened beverage of diluted lemon juice"
    }

    class "_class_lentilnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lentil.n.wn.food"
        string rdf:definition = "round flat seed of the lentil plant used for food"
    }

    class "_class_letter_openernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "letter_opener.n.wn.artifact"
        string rdf:definition = "dull knife used to cut open the envelopes in which letters are mailed or to slit uncut pages of books"
    }

    class "_class_liebfraumilchnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "liebfraumilch.n.wn.food"
        string rdf:definition = "a sweetened Rhenish wine (especially one from Hesse in western Germany)"
    }

    class "_class_rhine_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rhine_wine.n.wn.food"
        string rdf:definition = "any of several white wines from the Rhine River valley in Germany (`hock' is British usage)"
    }

    class "_class_light_beernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "light_beer.n.wn.food"
        string rdf:definition = "lager with reduced alcohol content"
    }

    class "_class_lime_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lime_juice.n.wn.food"
        string rdf:definition = "usually freshly squeezed juice of limes"
    }

    class "_class_limeadenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "limeade.n.wn.food"
        string rdf:definition = "sweetened beverage of lime juice and water"
    }

    class "_class_limpanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "limpa.n.wn.food"
        string rdf:definition = "a rye bread made with molasses or brown sugar"
    }

    class "_class_lingonberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lingonberry.n.wn.food"
        string rdf:definition = "tart red berries similar to American cranberries but smaller"
    }

    class "_class_linoleum_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "linoleum_knife.n.wn.artifact"
        string rdf:definition = "a knife having a short stiff blade with a curved point used for cutting linoleum"
    }

    class "_class_liqueur_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "liqueur_glass.n.wn.artifact"
        string rdf:definition = "a small glass for serving a small amount of liqueur (typically after dinner)"
    }

    class "_class_scattervwncontactdistributeTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scatter.v.wn.contact..distribute.Theme"
    }

    class "_class_spillvwncontactliquidTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spill.v.wn.contact..liquid.Theme"
    }

    class "_class_sprayvwncontactabout_patientTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spray.v.wn.contact..about_patient.Theme"
    }

    class "_class_sprayvwncontactcoverTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spray.v.wn.contact..cover.Theme"
    }

    class "_class_sprayvwncontactscatterTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spray.v.wn.contact..scatter.Theme"
    }

    class "_class_sprinklevwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sprinkle.v.wn.contact.Theme"
    }

    class "_class_liquidnwnsubstancefluid" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "liquid.n.wn.substance..fluid"
        string rdf:definition = "fluid matter having no fixed shape but a fixed volume"
    }

    class "_class_liquidnwnsubstanceroom_temperature" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "liquid.n.wn.substance..room_temperature"
        string rdf:definition = "a substance that is liquid at room temperature and pressure"
    }

    class "_class_litchinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "litchi.n.wn.food"
        string rdf:definition = "Chinese fruit having a thin brittle shell enclosing a sweet jellylike pulp and a single seed; often dried"
    }

    class "_class_lithia_waternwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lithia_water.n.wn.substance"
        string rdf:definition = "mineral water containing lithium salts"
    }

    class "_class_mineral_waternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mineral_water.n.wn.food"
        string rdf:definition = "water naturally or artificially impregnated with mineral salts or gasses; often effervescent; often used therapeutically"
    }

    class "_class_loblollynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "loblolly.n.wn.food"
        string rdf:definition = "thick gruel"
    }

    class "_class_lobster_tartnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lobster_tart.n.wn.food"
        string rdf:definition = "a pastry shell filled with cooked lobster"
    }

    class "_class_tartnwnfoodpie" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tart.n.wn.food..pie"
        string rdf:definition = "a small open pie with a fruit filling"
    }

    class "_class_loganberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "loganberry.n.wn.food"
        string rdf:definition = "large red variety of the dewberry"
    }

    class "_class_longanberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "longanberry.n.wn.food"
        string rdf:definition = "Asian fruit similar to litchi"
    }

    class "_class_loquatnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "loquat.n.wn.food"
        string rdf:definition = "yellow olive-sized semitropical fruit with a large free stone and relatively little flesh; used for jellies"
    }

    class "_class_lotanwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lota.n.wn.artifact"
        string rdf:definition = "a globular water bottle used in Asia"
    }

    class "_class_love_seatnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "love_seat.n.wn.artifact"
        string rdf:definition = "small sofa that seats two people"
    }

    class "_class_low_fat_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "low_fat_milk.n.wn.food"
        string rdf:definition = "milk from which some of the cream has been removed"
    }

    class "_class_lowboynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lowboy.n.wn.artifact"
        string rdf:definition = "a low chest or table with drawers and supported on four legs"
    }

    class "_class_lower_berthnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lower_berth.n.wn.artifact"
        string rdf:definition = "the lower of two berths"
    }

    class "_class_machine" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "machine"
    }

    class "_class_machinenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "machine.n.wn.artifact"
    }

    class "_class_machinenwnartifactdevice" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "machine.n.wn.artifact..device"
        string rdf:definition = "any mechanical or electrical device that transmits or modifies energy to perform or assist in the performance of human tasks"
    }

    class "_class_maconnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "macon.n.wn.food"
        string rdf:definition = "fine Burgundy wine usually white and dry"
    }

    class "_class_macounnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "macoun.n.wn.food"
        string rdf:definition = "similar to McIntosh; juicy and late-ripening"
    }

    class "_class_mcintoshnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mcintosh.n.wn.food"
        string rdf:definition = "early-ripening apple popular in the northeastern United States; primarily eaten raw but suitable for applesauce"
    }

    class "_class_madeiranwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "madeira.n.wn.food"
        string rdf:definition = "an amber dessert wine from the Madeira Islands"
    }

    class "_class_madeira_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "madeira_cake.n.wn.food"
        string rdf:definition = "a rich sponge cake with close texture; intended to be eaten with a glass of Madeira wine"
    }

    class "_class_magazine_racknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "magazine_rack.n.wn.artifact"
        string rdf:definition = "a rack for displaying magazines"
    }

    class "_class_magnumnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "magnum.n.wn.artifact"
        string rdf:definition = "a large wine bottle for liquor or wine"
    }

    class "_class_malmseynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "malmsey.n.wn.food"
        string rdf:definition = "sweet Madeira wine"
    }

    class "_class_maltnwnfoodlager" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "malt.n.wn.food..lager"
        string rdf:definition = "a lager of high alcohol content; by law it is considered too alcoholic to be sold as lager or beer"
    }

    class "_class_mameynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mamey.n.wn.food"
        string rdf:definition = "globular or ovoid tropical fruit with thick russet leathery rind and juicy yellow or reddish flesh"
    }

    class "_class_mammalnwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mammal.n.wn.animal"
    }

    class "_class_mangel_wurzelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mangel_wurzel.n.wn.food"
        string rdf:definition = "cultivated as feed for livestock"
    }

    class "_class_manglenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mangle.n.wn.artifact"
        string rdf:definition = "clothes dryer for drying and ironing laundry by passing it between two heavy heated rollers"
    }

    class "_class_mangonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mango.n.wn.food"
        string rdf:definition = "large oval tropical fruit having smooth skin, juicy aromatic pulp, and a large hairy seed"
    }

    class "_class_mangosteennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mangosteen.n.wn.food"
        string rdf:definition = "two- to three-inch tropical fruit with juicy flesh suggestive of both peaches and pineapples"
    }

    class "_class_manhattannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "manhattan.n.wn.food"
        string rdf:definition = "a cocktail made with whiskey and sweet vermouth with a dash of bitters"
    }

    class "_class_manzanillanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "manzanilla.n.wn.food"
        string rdf:definition = "very dry pale sherry from Spain"
    }

    class "_class_marangnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "marang.n.wn.food"
        string rdf:definition = "tropical fruit from the Philippines having a mass of small seeds embedded in sweetish white pulp"
    }

    class "_class_maraschinonwnfoodliqueur" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "maraschino.n.wn.food..liqueur"
        string rdf:definition = "distilled from fermented juice of bitter wild marasca cherries"
    }

    class "_class_marble_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "marble_cake.n.wn.food"
        string rdf:definition = "made of light and dark batter very lightly blended"
    }

    class "_class_marcnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "marc.n.wn.food"
        string rdf:definition = "made from residue of grapes or apples after pressing"
    }

    class "_class_margaritanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "margarita.n.wn.food"
        string rdf:definition = "a cocktail made of tequila and triple sec with lime and lemon juice"
    }

    class "_class_marmitenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "marmite.n.wn.artifact"
        string rdf:definition = "a large pot especially one with legs used e.g. for cooking soup"
    }

    class "_class_marriage_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "marriage_bed.n.wn.artifact"
        string rdf:definition = "the bed shared by a newly wed couple"
    }

    class "_class_marrownwnfoodsummer_squash" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "marrow.n.wn.food..summer_squash"
        string rdf:definition = "large elongated squash with creamy to deep green skins"
    }

    class "_class_marrowfat_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "marrowfat_pea.n.wn.food"
        string rdf:definition = "a variety of large pea that is commonly processed and sold in cans"
    }

    class "_class_marsalanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "marsala.n.wn.food"
        string rdf:definition = "dark sweet or semisweet dessert wine from Sicily"
    }

    class "_class_martininwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "martini.n.wn.food"
        string rdf:definition = "a cocktail made of gin (or vodka) with dry vermouth"
    }

    class "_class_mashed_potatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mashed_potato.n.wn.food"
        string rdf:definition = "potato that has been peeled and boiled and then mashed"
    }

    class "_class_mason_jarnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mason_jar.n.wn.artifact"
        string rdf:definition = "a glass jar with an air-tight screw top; used in home canning"
    }

    class "_class_matenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mate.n.wn.food"
        string rdf:definition = "South American tea-like drink made from leaves of a South American holly called mate"
    }

    class "_class_matzonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "matzo.n.wn.food"
        string rdf:definition = "brittle flat bread eaten at Passover"
    }

    class "_class_may_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "may_wine.n.wn.food"
        string rdf:definition = "a punch made of Moselle and sugar and sparkling water or champagne flavored with sweet woodruff"
    }

    class "_class_meadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mead.n.wn.food"
        string rdf:definition = "made of fermented honey and water"
    }

    class "_class_skewervwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "skewer.v.wn.contact.Theme"
    }

    class "_class_stewvwncookingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stew.v.wn.cooking.Patient"
    }

    class "_class_meat_counternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "meat_counter.n.wn.artifact"
        string rdf:definition = "counter where meats are displayed for sale"
    }

    class "_class_meat_safenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "meat_safe.n.wn.artifact"
        string rdf:definition = "a safe for storing meat"
    }

    class "_class_safenwnartifactcupboard" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "safe.n.wn.artifact..cupboard"
        string rdf:definition = "a ventilated or refrigerated cupboard for securing provisions from pests"
    }

    class "_class_medical_instrumentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "medical_instrument.n.wn.artifact"
        string rdf:definition = "instrument used in the practice of medicine"
    }

    class "_class_medicine_chestnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "medicine_chest.n.wn.artifact"
        string rdf:definition = "cabinet that holds medicines and toiletries"
    }

    class "_class_medlarnwnfoodcrabapple" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "medlar.n.wn.food..crabapple"
        string rdf:definition = "crabapple-like fruit used for preserves"
    }

    class "_class_medlarnwnfoodsouth_african" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "medlar.n.wn.food..south_african"
        string rdf:definition = "a South African globular fruit with brown leathery skin and pithy flesh having a sweet-acid taste"
    }

    class "_class_medocnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "medoc.n.wn.food"
        string rdf:definition = "red Bordeaux wine from the Medoc district of southwestern France"
    }

    class "_class_melba_toastnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "melba_toast.n.wn.food"
        string rdf:definition = "very thin crisp brown toast"
    }

    class "_class_melonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "melon.n.wn.food"
        string rdf:definition = "any of numerous fruits of the gourd family having a hard rind and sweet juicy flesh"
    }

    class "_class_melon_ballnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "melon_ball.n.wn.food"
        string rdf:definition = "a bite of melon cut as a sphere"
    }

    class "_class_mercy_seatnwnartifactthrone" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mercy_seat.n.wn.artifact..throne"
        string rdf:definition = "the throne of God"
    }

    class "_class_merlotnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "merlot.n.wn.food"
        string rdf:definition = "dry red wine made from a grape grown widely in Bordeaux and California"
    }

    class "_class_mescalnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mescal.n.wn.food"
        string rdf:definition = "a colorless Mexican liquor distilled from fermented juices of certain desert plants of the genus Agavaceae (especially the century plant)"
    }

    class "_class_metheglinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "metheglin.n.wn.food"
        string rdf:definition = "spiced or medicated mead"
    }

    class "_class_methylated_spiritnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "methylated_spirit.n.wn.substance"
        string rdf:definition = "ethyl alcohol denatured with methyl alcohol to prevent its use as an alcoholic beverage"
    }

    class "_class_microwavenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "microwave.n.wn.artifact"
        string rdf:definition = "kitchen appliance that cooks food by passing an electromagnetic wave through it; heat results from the absorption of energy by the water molecules in the food"
    }

    class "_class_milknwnfoodfoodstuff" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "milk.n.wn.food..foodstuff"
        string rdf:definition = "any of several nutritive milklike liquids"
    }

    class "_class_milk_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "milk_bar.n.wn.artifact"
        string rdf:definition = "snack bar that sells milk drinks and light refreshments (such as ice cream)"
    }

    class "_class_milk_punchnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "milk_punch.n.wn.food"
        string rdf:definition = "a punch made of spirits and milk and sugar and spices"
    }

    class "_class_milking_stoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "milking_stool.n.wn.artifact"
        string rdf:definition = "low three-legged stool with a half round seat; used to sit on while milking a cow"
    }

    class "_class_mimosanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mimosa.n.wn.food"
        string rdf:definition = "a mixed drink containing champagne and orange juice"
    }

    class "_class_mincevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mince.v.wn.contact.Patient"
    }

    class "_class_mince_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mince_pie.n.wn.food"
        string rdf:definition = "pie containing mincemeat"
    }

    class "_class_minibarnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "minibar.n.wn.artifact"
        string rdf:definition = "sideboard with compartments for holding bottles"
    }

    class "_class_mixvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mix.v.wn.contact.Patient"
    }

    class "_class_mixernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mixer.n.wn.food"
        string rdf:definition = "club soda or fruit juice used to mix with alcohol"
    }

    class "_class_mixing_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mixing_bowl.n.wn.artifact"
        string rdf:definition = "bowl used with an electric mixer"
    }

    class "_class_mixing_faucetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mixing_faucet.n.wn.artifact"
        string rdf:definition = "single faucet for separate hot and cold water pipes"
    }

    class "_class_mochanwnfoodcoffee" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mocha.n.wn.food..coffee"
        string rdf:definition = "a superior dark coffee made from beans from Arabia"
    }

    class "_class_molasses_cookienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "molasses_cookie.n.wn.food"
        string rdf:definition = "very spicy cookies sweetened partially with molasses"
    }

    class "_class_moldervwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "molder.v.wn.change.Patient"
    }

    class "_class_mombinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mombin.n.wn.food"
        string rdf:definition = "purplish tropical fruit"
    }

    class "_class_montrachetnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "montrachet.n.wn.food"
        string rdf:definition = "a white Burgundy wine"
    }

    class "_class_moonshinenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "moonshine.n.wn.food"
        string rdf:definition = "whiskey illegally distilled from a corn mash"
    }

    class "_class_mop_handlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mop_handle.n.wn.artifact"
        string rdf:definition = "the handle of a mop"
    }

    class "_class_morellonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "morello.n.wn.food"
        string rdf:definition = "cultivated sour cherry with dark-colored skin and juice"
    }

    class "_class_morris_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "morris_chair.n.wn.artifact"
        string rdf:definition = "an armchair with an adjustable back"
    }

    class "_class_mosellenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "moselle.n.wn.food"
        string rdf:definition = "German white wine from the Moselle valley or a similar wine made elsewhere"
    }

    class "_class_motorized_wheelchairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "motorized_wheelchair.n.wn.artifact"
        string rdf:definition = "a wheelchair propelled by a motor"
    }

    class "_class_mueslinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "muesli.n.wn.food"
        string rdf:definition = "mixture of untoasted dry cereals and fruits"
    }

    class "_class_mulberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mulberry.n.wn.food"
        string rdf:definition = "sweet usually dark purple blackberry-like fruit of any of several mulberry trees of the genus Morus"
    }

    class "_class_mulled_cidernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mulled_cider.n.wn.food"
        string rdf:definition = "sweet cider heated with spices and citrus fruit"
    }

    class "_class_mulled_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mulled_wine.n.wn.food"
        string rdf:definition = "wine heated with sugar and spices and often citrus fruit"
    }

    class "_class_munich_beernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "munich_beer.n.wn.food"
        string rdf:definition = "a dark lager produced in Munich since the 10th century; has a distinctive taste of malt"
    }

    class "_class_murphy_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "murphy_bed.n.wn.artifact"
        string rdf:definition = "a bed that can be folded or swung into a cabinet when not being used"
    }

    class "_class_muscadetnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "muscadet.n.wn.food"
        string rdf:definition = "dry white wine from the Loire valley in France"
    }

    class "_class_muscadinenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "muscadine.n.wn.food"
        string rdf:definition = "dull-purple grape of southern United States"
    }

    class "_class_muscatnwnfoodfortified_wine" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "muscat.n.wn.food..fortified_wine"
        string rdf:definition = "wine from muscat grapes"
    }

    class "_class_muscatnwnfoodvinifera_grape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "muscat.n.wn.food..vinifera_grape"
        string rdf:definition = "sweet aromatic grape used for raisins and wine"
    }

    class "_class_mushroomnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mushroom.n.wn.food"
        string rdf:definition = "fleshy body of any of numerous edible fungi"
    }

    class "_class_music_standnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "music_stand.n.wn.artifact"
        string rdf:definition = "a light stand for holding sheets of printed music"
    }

    class "_class_music_stoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "music_stool.n.wn.artifact"
        string rdf:definition = "a stool for piano players; usually adjustable in height"
    }

    class "_class_playvwnmusicperformTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "play.v.wn.music..perform.Theme"
    }

    class "_class_musnudnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "musnud.n.wn.artifact"
        string rdf:definition = "a seat with a cushion that is used as a throne by Indian princes"
    }

    class "_class_mustnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "must.n.wn.food"
        string rdf:definition = "grape juice before or during fermentation"
    }

    class "_class_mustache_cupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mustache_cup.n.wn.artifact"
        string rdf:definition = "a drinking cup with a bar inside the rim to keep a man's mustache out of the drink"
    }

    class "_class_mustardnwnfoodcruciferous_vegetable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mustard.n.wn.food..cruciferous_vegetable"
        string rdf:definition = "leaves eaten as cooked greens"
    }

    class "_class_nada_daiquirinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nada_daiquiri.n.wn.food"
        string rdf:definition = "a daiquiri made without alcohol"
    }

    class "_class_nannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nan.n.wn.food"
        string rdf:definition = "leavened bread baked in a clay oven in India; usually shaped like a teardrop"
    }

    class "_class_napoleonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "napoleon.n.wn.food"
        string rdf:definition = "a rectangular piece of pastry with thin flaky layers and filled with custard cream"
    }

    class "_class_navel_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "navel_orange.n.wn.food"
        string rdf:definition = "seedless orange enclosing a small secondary fruit at the apex"
    }

    class "_class_navy_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "navy_bean.n.wn.food"
        string rdf:definition = "white-seeded bean; usually dried"
    }

    class "_class_near_beernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "near_beer.n.wn.food"
        string rdf:definition = "drink that resembles beer but with less than 1/2 percent alcohol"
    }

    class "_class_nebuchadnezzarnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nebuchadnezzar.n.wn.artifact"
        string rdf:definition = "a very large wine bottle holding the equivalent of 20 normal bottles of wine; used especially for display"
    }

    class "_class_nectarnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nectar.n.wn.food"
        string rdf:definition = "fruit juice especially when undiluted"
    }

    class "_class_nectarinenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nectarine.n.wn.food"
        string rdf:definition = "a variety or mutation of the peach that has a smooth skin"
    }

    class "_class_negusnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "negus.n.wn.food"
        string rdf:definition = "wine and hot water with sugar and lemon juice and nutmeg"
    }

    class "_class_nestnwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nest.n.wn.artifact..furniture"
        string rdf:definition = "furniture pieces made to fit close together"
    }

    class "_class_net_melonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "net_melon.n.wn.food"
        string rdf:definition = "the fruit of a variety of muskmelon vine; a melon with netlike markings and deep green flesh"
    }

    class "_class_neutral_spiritsnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "neutral_spirits.n.wn.food"
        string rdf:definition = "nonflavored alcohol of 95 percent or 190 proof used for blending with straight whiskies and in making gin and liqueurs"
    }

    class "_class_newtown_wondernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "newtown_wonder.n.wn.food"
        string rdf:definition = "apple used primarily in cooking"
    }

    class "_class_nipanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nipa.n.wn.food"
        string rdf:definition = "made from sap of the Australasian nipa palm"
    }

    class "_class_nonrigid" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nonrigid"
    }

    class "_class_northern_spynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "northern_spy.n.wn.food"
        string rdf:definition = "large late-ripening apple with skin striped with yellow and red"
    }

    class "_class_notions_counternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "notions_counter.n.wn.artifact"
        string rdf:definition = "counter where notions are sold"
    }

    class "_class_nut_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nut_bread.n.wn.food"
        string rdf:definition = "bread containing chopped nuts"
    }

    class "_class_oatcakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "oatcake.n.wn.food"
        string rdf:definition = "thin flat unleavened cake of baked oatmeal"
    }

    class "_class_oatmeal_cookienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "oatmeal_cookie.n.wn.food"
        string rdf:definition = "cookies containing rolled oats"
    }

    class "_class_objectnwnobject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "object.n.wn.object"
    }

    class "_class_oenomelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "oenomel.n.wn.food"
        string rdf:definition = "wine mixed with honey"
    }

    class "_class_oktoberfestnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "oktoberfest.n.wn.food"
        string rdf:definition = "a strong lager made originally in Germany for the Oktoberfest celebration; sweet and copper-colored"
    }

    class "_class_old_fashionednwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "old_fashioned.n.wn.food"
        string rdf:definition = "a cocktail made of whiskey and bitters and sugar with fruit slices"
    }

    class "_class_omelet_pannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "omelet_pan.n.wn.artifact"
        string rdf:definition = "pan for cooking omelets"
    }

    class "_class_onion_bagelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "onion_bagel.n.wn.food"
        string rdf:definition = "bagel flavored with onion"
    }

    class "_class_onion_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "onion_bread.n.wn.food"
        string rdf:definition = "bread containing finely minced onions"
    }

    class "_class_open_face_sandwichnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "open_face_sandwich.n.wn.food"
        string rdf:definition = "sandwich without a covering slice of bread"
    }

    class "_class_passvwnmotiongo_throughTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pass.v.wn.motion..go_through.Theme"
    }

    class "_class_operating_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "operating_table.n.wn.artifact"
        string rdf:definition = "table on which the patient lies during a surgical operation"
    }

    class "_class_orange_sodanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "orange_soda.n.wn.food"
        string rdf:definition = "orange-flavored carbonated drink"
    }

    class "_class_orange_toastnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "orange_toast.n.wn.food"
        string rdf:definition = "buttered toast with sugar and grated orange rind and a little orange juice"
    }

    class "_class_orangeadenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "orangeade.n.wn.food"
        string rdf:definition = "sweetened beverage of diluted orange juice"
    }

    class "_class_oreonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "oreo.n.wn.food"
        string rdf:definition = "chocolate cookie with white cream filling"
    }

    class "_class_organization" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "organization"
    }

    class "_class_ottomannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ottoman.n.wn.artifact"
        string rdf:definition = "thick cushion used as a seat"
    }

    class "_class_ouzonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ouzo.n.wn.food"
        string rdf:definition = "a Greek liquor flavored with anise"
    }

    class "_class_ovenwarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ovenware.n.wn.artifact"
        string rdf:definition = "heat-resistant dishware in which food can be cooked as well as served"
    }

    class "_class_overheadnwnseafaring" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "overhead.n.wn.seafaring"
        string rdf:definition = "(nautical) the top surface of an enclosed space on a ship"
    }

    class "_class_oyster_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "oyster_bar.n.wn.artifact"
        string rdf:definition = "a bar (as in a restaurant) that specializes in oysters prepared in different ways"
    }

    class "_class_oyster_crackernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "oyster_cracker.n.wn.food"
        string rdf:definition = "a small dry usually round cracker"
    }

    class "_class_oyster_plantnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "oyster_plant.n.wn.food"
        string rdf:definition = "long white salsify"
    }

    class "_class_salsifynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salsify.n.wn.food"
        string rdf:definition = "either of two long roots eaten cooked"
    }

    class "_class_pablumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pablum.n.wn.food"
        string rdf:definition = "a soft form of cereal for infants"
    }

    class "_class_packagenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "package.n.wn.artifact"
        string rdf:definition = "a wrapped container"
    }

    class "_class_tievwncontactbindPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tie.v.wn.contact..bind.Patient"
    }

    class "_class_pale_alenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pale_ale.n.wn.food"
        string rdf:definition = "an amber colored ale brewed with pale malts; similar to bitter but drier and lighter"
    }

    class "_class_pan_gravynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pan_gravy.n.wn.food"
        string rdf:definition = "the seasoned but not thickened juices that drip from cooking meats; often a little water is added"
    }

    class "_class_pancake_turnernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pancake_turner.n.wn.artifact"
        string rdf:definition = "turner for serving or turning pancakes"
    }

    class "_class_pancreatic_juicenwnbody" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pancreatic_juice.n.wn.body"
        string rdf:definition = "a fluid secreted into the duodenum by the pancreas; important for breaking down starches and proteins and fats"
    }

    class "_class_panhandlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "panhandle.n.wn.artifact"
        string rdf:definition = "the handle of a pan"
    }

    class "_class_papawnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "papaw.n.wn.food"
        string rdf:definition = "fruit with yellow flesh; related to custard apples"
    }

    class "_class_papayanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "papaya.n.wn.food"
        string rdf:definition = "large oval melon-like tropical fruit with yellowish flesh"
    }

    class "_class_papaya_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "papaya_juice.n.wn.food"
        string rdf:definition = "juice from papayas"
    }

    class "_class_paper_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "paper_plate.n.wn.artifact"
        string rdf:definition = "a disposable plate made of cardboard"
    }

    class "_class_parangnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "parang.n.wn.artifact"
        string rdf:definition = "a stout straight knife used in Malaysia and Indonesia"
    }

    class "_class_parapetnwnartifactwall" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "parapet.n.wn.artifact..wall"
        string rdf:definition = "a low wall along the edge of a roof or balcony"
    }

    class "_class_parernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "parer.n.wn.artifact"
        string rdf:definition = "a small sharp knife used in paring fruits or vegetables"
    }

    class "_class_parfait_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "parfait_glass.n.wn.artifact"
        string rdf:definition = "a tall slender glass with a short stem in which parfait is served"
    }

    class "_class_park_benchnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "park_bench.n.wn.artifact"
        string rdf:definition = "a bench in a public park"
    }

    class "_class_parker_house_rollnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "parker_house_roll.n.wn.food"
        string rdf:definition = "yeast-raised dinner roll made by folding a disk of dough before baking"
    }

    class "_class_parquetnwnartifactfloor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "parquet.n.wn.artifact..floor"
        string rdf:definition = "a floor made of parquetry"
    }

    class "_class_parsnipnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "parsnip.n.wn.food"
        string rdf:definition = "whitish edible root; eaten cooked"
    }

    class "_class_parsons_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "parsons_table.n.wn.artifact"
        string rdf:definition = "a sturdy rectangular table with block legs at the four corners; the top and the legs are the same width"
    }

    class "_class_partitionnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "partition.n.wn.artifact"
        string rdf:definition = "a vertical structure that divides or separates (as a wall divides one room from another)"
    }

    class "_class_partitionvwnchangeTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "partition.v.wn.change.Theme"
    }

    class "_class_pascal_celerynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pascal_celery.n.wn.food"
        string rdf:definition = "any of several types of commercially grown celery having green stalks"
    }

    class "_class_pasteurized_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pasteurized_milk.n.wn.food"
        string rdf:definition = "milk that has been exposed briefly to high temperatures to destroy microorganisms and prevent fermentation"
    }

    class "_class_pastisnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pastis.n.wn.food"
        string rdf:definition = "similar to absinthe but containing no wormwood"
    }

    class "_class_pattynwnfoodpie" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "patty.n.wn.food..pie"
        string rdf:definition = "small pie or pasty"
    }

    class "_class_patty_pannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "patty_pan.n.wn.artifact"
        string rdf:definition = "a pan for cooking patties or pasties"
    }

    class "_class_patty_shellnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "patty_shell.n.wn.food"
        string rdf:definition = "shell of puff paste"
    }

    class "_class_pattypan_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pattypan_squash.n.wn.food"
        string rdf:definition = "round greenish-white squash having one face flattened with a scalloped edge"
    }

    class "_class_peachnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "peach.n.wn.food"
        string rdf:definition = "downy juicy fruit with sweet yellowish or whitish flesh"
    }

    class "_class_peacock_thronenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "peacock_throne.n.wn.artifact"
        string rdf:definition = "the golden throne of former kings of Delhi; stolen by the Persians in 1739 and subsequently lost; symbol of the former Shah of Iran"
    }

    class "_class_pearmainnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pearmain.n.wn.food"
        string rdf:definition = "any of several varieties of apples with red skins"
    }

    class "_class_pecan_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pecan_pie.n.wn.food"
        string rdf:definition = "pie made of pecans and sugar and corn syrup and butter and eggs"
    }

    class "_class_pedestal_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pedestal_table.n.wn.artifact"
        string rdf:definition = "a table supported by a single central column"
    }

    class "_class_pedimentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pediment.n.wn.artifact"
        string rdf:definition = "a triangular gable between a horizontal entablature and a sloping roof"
    }

    class "_class_penalty_boxnwnice_hockey" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "penalty_box.n.wn.ice_hockey"
        string rdf:definition = "(ice hockey) an enclosed bench to the side of an ice-hockey rink for players who are serving time penalties"
    }

    class "_class_penknifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "penknife.n.wn.artifact"
        string rdf:definition = "a small pocketknife; originally used to cut quill pens"
    }

    class "_class_pepper_spraynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pepper_spray.n.wn.artifact"
        string rdf:definition = "a nonlethal aerosol spray made with the pepper derivative oleoresin capiscum; used to cause temporary blindness and incapacitate an attacker; also used as a bear deterrent"
    }

    class "_class_pepsinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pepsi.n.wn.food"
        string rdf:definition = "Pepsi Cola is a trademarked cola"
    }

    class "_class_percolatornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "percolator.n.wn.artifact"
        string rdf:definition = "a coffeepot in which boiling water ascends through a central tube and filters back down through a basket of ground coffee beans"
    }

    class "_class_perishablesnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "perishables.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] an artifact designed to directly contain a perishable food item"
    }

    class "_class_pernodnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pernod.n.wn.food"
        string rdf:definition = "(registered trademark) a liqueur flavored with anise"
    }

    class "_class_perrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "perry.n.wn.food"
        string rdf:definition = "a fermented and often effervescent beverage made from juice of pears; similar in taste to hard cider"
    }

    class "_class_persian_melonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "persian_melon.n.wn.food"
        string rdf:definition = "the fruit of a variety of winter melon vine; a large green melon with orange flesh"
    }

    class "_class_persimmonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "persimmon.n.wn.food"
        string rdf:definition = "orange fruit resembling a plum; edible when fully ripe"
    }

    class "_class_petit_fournwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "petit_four.n.wn.food"
        string rdf:definition = "small (individual) frosted and ornamented cake"
    }

    class "_class_petri_dishnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "petri_dish.n.wn.artifact"
        string rdf:definition = "a shallow dish used to culture bacteria"
    }

    class "_class_pewnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pew.n.wn.artifact"
        string rdf:definition = "long bench with backs; used in church by the congregation"
    }

    class "_class_pfannkuchennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pfannkuchen.n.wn.food"
        string rdf:definition = "puffy mildly sweet lemon-flavored egg mixture sprinkled with confectioners' sugar and served with jam or a wine or fruit sauce"
    }

    class "_class_phialnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "phial.n.wn.artifact"
        string rdf:definition = "a small bottle that contains a drug (especially a sealed sterile container for injection by needle)"
    }

    class "_class_philternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "philter.n.wn.food"
        string rdf:definition = "a drink credited with magical power; can make the one who takes it love the one who gave it"
    }

    class "_class_potionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "potion.n.wn.food"
        string rdf:definition = "a medicinal or magical or poisonous beverage"
    }

    class "_class_phosphatenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "phosphate.n.wn.food"
        string rdf:definition = "carbonated drink with fruit syrup and a little phosphoric acid"
    }

    class "_class_relishnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "relish.n.wn.food"
        string rdf:definition = "spicy or savory condiment"
    }

    class "_class_pie_crustnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pie_crust.n.wn.food"
        string rdf:definition = "pastry used to hold pie fillings"
    }

    class "_class_pieplantnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pieplant.n.wn.food"
        string rdf:definition = "long pinkish sour leafstalks usually eaten cooked and sweetened"
    }

    class "_class_pier_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pier_table.n.wn.artifact"
        string rdf:definition = "a low table set below a pier glass"
    }

    class "_class_pill_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pill_bottle.n.wn.artifact"
        string rdf:definition = "a small bottle for holding pills"
    }

    class "_class_pilsnernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pilsner.n.wn.food"
        string rdf:definition = "a pale lager with strong flavor of hops; first brewed in the Bohemian town of Pilsen"
    }

    class "_class_pimentonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pimento.n.wn.food"
        string rdf:definition = "fully ripened sweet red pepper; usually cooked"
    }

    class "_class_pina_coladanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pina_colada.n.wn.food"
        string rdf:definition = "a mixed drink made of pineapple juice and coconut cream and rum"
    }

    class "_class_pineapplenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pineapple.n.wn.food"
        string rdf:definition = "large sweet fleshy tropical fruit with a terminal tuft of stiff leaves; widely cultivated"
    }

    class "_class_pineapple_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pineapple_juice.n.wn.food"
        string rdf:definition = "the juice of pineapples (usually bottled or canned)"
    }

    class "_class_pink_ladynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pink_lady.n.wn.food"
        string rdf:definition = "a cocktail made of gin and brandy with lemon juice and grenadine shaken with an egg white and ice"
    }

    class "_class_pinot_blancnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pinot_blanc.n.wn.food"
        string rdf:definition = "dry white California table wine made from white Pinot grapes"
    }

    class "_class_pinot_noirnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pinot_noir.n.wn.food"
        string rdf:definition = "dry red California table wine made from purple Pinot grapes"
    }

    class "_class_pinto_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pinto_bean.n.wn.food"
        string rdf:definition = "mottled or spotted bean of southwestern United States; usually dried"
    }

    class "_class_pinwheel_rollnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pinwheel_roll.n.wn.food"
        string rdf:definition = "pinwheel-shaped rolls spread with cinnamon and sugar and filled with e.g. jam before baking"
    }

    class "_class_tubenwnartifactconduit" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tube.n.wn.artifact..conduit"
        string rdf:definition = "conduit consisting of a long hollow object (usually cylindrical) used to hold and conduct objects or liquids or gases"
    }

    class "_class_pitahayanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pitahaya.n.wn.food"
        string rdf:definition = "highly colored edible fruit of pitahaya cactus having bright red juice; often as large as a peach"
    }

    class "_class_place_settingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "place_setting.n.wn.artifact"
        string rdf:definition = 'a table service for one person; "a place setting of sterling flatware"'
    }

    class "_class_plank_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plank_bed.n.wn.artifact"
        string rdf:definition = "a bed of boards (without a mattress)"
    }

    class "_class_plantnwnbotany" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plant.n.wn.botany"
    }

    class "_class_plant_materialnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plant_material.n.wn.substance"
        string rdf:definition = "material derived from plants"
    }

    class "_class_plant_organnwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plant_organ.n.wn.plant"
        string rdf:definition = "a functional and structural unit of a plant or fungus"
    }

    class "_class_plant_partnwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plant_part.n.wn.plant"
        string rdf:definition = "any part of a plant or fungus"
    }

    class "_class_plantainnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plantain.n.wn.food"
        string rdf:definition = "starchy banana-like fruit; eaten (always cooked) as a staple vegetable throughout the tropics"
    }

    class "_class_planternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "planter.n.wn.artifact"
        string rdf:definition = "a decorative pot for house plants"
    }

    class "_class_potnwnartifactflowerpot" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pot.n.wn.artifact..flowerpot"
        string rdf:definition = "a container in which plants are cultivated"
    }

    class "_class_planter_ZZ_s_punchnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "planter_ZZ_s_punch.n.wn.food"
        string rdf:definition = "a cocktail made of rum and lime or lemon juice with sugar and sometimes bitters"
    }

    class "_class_platennwnartifacttable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "platen.n.wn.artifact..table"
        string rdf:definition = "work table of a machine tool"
    }

    class "_class_platform_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "platform_bed.n.wn.artifact"
        string rdf:definition = "a bed without springs"
    }

    class "_class_platform_rockernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "platform_rocker.n.wn.artifact"
        string rdf:definition = "rocking chair on a stationary base"
    }

    class "_class_platternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "platter.n.wn.artifact"
        string rdf:definition = "a large shallow dish used for serving food"
    }

    class "_class_plonknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plonk.n.wn.food"
        string rdf:definition = "a cheap wine of inferior quality"
    }

    class "_class_plum_tomatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plum_tomato.n.wn.food"
        string rdf:definition = "a kind of cherry tomato that is frequently used in cooking rather than eaten raw"
    }

    class "_class_plumcotnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plumcot.n.wn.food"
        string rdf:definition = "hybrid between plum and apricot"
    }

    class "_class_plural" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plural"
    }

    class "_class_poached_eggnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "poached_egg.n.wn.food"
        string rdf:definition = "egg cooked in gently boiling water"
    }

    class "_class_pointy" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pointy"
    }

    class "_class_pokevwncontactstirInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "poke.v.wn.contact..stir.Instrument"
    }

    class "_class_polentanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "polenta.n.wn.food"
        string rdf:definition = "a thick mush made of cornmeal boiled in stock or water"
    }

    class "_class_pomegranatenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pomegranate.n.wn.food"
        string rdf:definition = "large globular fruit having many seeds with juicy red pulp in a tough brownish-red rind"
    }

    class "_class_pomelonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pomelo.n.wn.food"
        string rdf:definition = "large pear-shaped fruit similar to grapefruit but with coarse dry pulp"
    }

    class "_class_pommelnwnartifactgymnastics" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pommel.n.wn.artifact..gymnastics"
        string rdf:definition = "a handgrip that a gymnast uses when performing exercises on a pommel horse"
    }

    class "_class_pond_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pond_apple.n.wn.food"
        string rdf:definition = "ovoid yellow fruit with very fragrant peach-colored flesh; related to custard apples"
    }

    class "_class_poniardnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "poniard.n.wn.artifact"
        string rdf:definition = "a dagger with a slender blade"
    }

    class "_class_pool_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pool_table.n.wn.artifact"
        string rdf:definition = "game equipment consisting of a heavy table on which pool is played"
    }

    class "_class_soda_waternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soda_water.n.wn.food"
        string rdf:definition = "effervescent beverage artificially charged with carbon dioxide"
    }

    class "_class_pop_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pop_bottle.n.wn.artifact"
        string rdf:definition = "a bottle for holding soft drinks"
    }

    class "_class_popovernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "popover.n.wn.food"
        string rdf:definition = "light hollow muffin made of a puff batter (individual Yorkshire pudding) baked in a deep muffin cup"
    }

    class "_class_poppernwnartifactcooker" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "popper.n.wn.artifact..cooker"
        string rdf:definition = "a container for cooking popcorn"
    }

    class "_class_porringernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "porringer.n.wn.artifact"
        string rdf:definition = 'a shallow metal bowl (usually with a handle); "the child was eating pottage from a porringer"'
    }

    class "_class_portnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "port.n.wn.food"
        string rdf:definition = "sweet dark-red dessert wine originally from Portugal"
    }

    class "_class_porternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "porter.n.wn.food"
        string rdf:definition = "a very dark sweet ale brewed from roasted unmalted barley"
    }

    class "_class_postumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "postum.n.wn.food"
        string rdf:definition = "trade mark for a coffee substitute invented by C. W. Post and made with chicory and roasted grains"
    }

    class "_class_potato_pancakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "potato_pancake.n.wn.food"
        string rdf:definition = "made of grated potato and egg with a little flour"
    }

    class "_class_potbellynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "potbelly.n.wn.artifact"
        string rdf:definition = "a bulbous stove in which wood or coal is burned"
    }

    class "_class_poteennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "poteen.n.wn.food"
        string rdf:definition = "unlawfully distilled Irish whiskey"
    }

    class "_class_potherbnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "potherb.n.wn.food"
        string rdf:definition = "any of various herbaceous plants whose leaves or stems or flowers are cooked and used for food or seasoning"
    }

    class "_class_pottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pottle.n.wn.artifact"
        string rdf:definition = "a pot that holds 2 quarts"
    }

    class "_class_pousse_cafenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pousse_cafe.n.wn.food"
        string rdf:definition = "small drink served after dinner (especially several liqueurs poured carefully so as to remain in separate layers)"
    }

    class "_class_spillvwncontactsolidTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spill.v.wn.contact..solid.Theme"
    }

    class "_class_strewvwncontactagentiveTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "strew.v.wn.contact..agentive.Theme"
    }

    class "_class_travelvwnmotionPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "travel.v.wn.motion.Patient"
    }

    class "_class_preparevwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "prepare.v.wn.change.Patient"
    }

    class "_class_pretzelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pretzel.n.wn.food"
        string rdf:definition = "glazed and salted cracker typically in the shape of a loose knot"
    }

    class "_class_prickly_pearnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "prickly_pear.n.wn.food"
        string rdf:definition = "round or pear-shaped spiny fruit of any of various prickly pear cacti"
    }

    class "_class_prie_dieunwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "prie_dieu.n.wn.artifact"
        string rdf:definition = "low bench for kneeling on"
    }

    class "_class_primanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "prima.n.wn.food"
        string rdf:definition = "used primarily as eating apples"
    }

    class "_class_profiterolenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "profiterole.n.wn.food"
        string rdf:definition = "a small hollow pastry that is typically filled with cream and covered with chocolate"
    }

    class "_class_proof_spiritnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "proof_spirit.n.wn.food"
        string rdf:definition = "a mixture containing half alcohol by volume at 60 degrees Fahrenheit"
    }

    class "_class_prosceniumnwnartifactwall_architecture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "proscenium.n.wn.artifact..wall_architecture"
        string rdf:definition = "the wall that separates the stage from the auditorium in a modern theater"
    }

    class "_class_prunenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "prune.n.wn.food"
        string rdf:definition = "dried plum"
    }

    class "_class_prune_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "prune_cake.n.wn.food"
        string rdf:definition = "moist cake containing prunes that have been made into a puree"
    }

    class "_class_pruning_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pruning_knife.n.wn.artifact"
        string rdf:definition = "a knife with a curved or hooked blade"
    }

    class "_class_prunonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pruno.n.wn.food"
        string rdf:definition = "a liquor concocted from a mixture of ingredients (such as prunes and raisins and milk and sugar) that can be fermented to produce alcohol; made by prison inmates"
    }

    class "_class_puffed_ricenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "puffed_rice.n.wn.food"
        string rdf:definition = "puffy rice kernels"
    }

    class "_class_puffed_wheatnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "puffed_wheat.n.wn.food"
        string rdf:definition = "puffy wheat berries"
    }

    class "_class_pulasannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pulasan.n.wn.food"
        string rdf:definition = "fruit of an East Indian tree similar to the rambutan but sweeter"
    }

    class "_class_pulquenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pulque.n.wn.food"
        string rdf:definition = "fermented Mexican drink from juice of various agave plants especially the maguey"
    }

    class "_class_pulsenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pulse.n.wn.food"
        string rdf:definition = "edible seeds of various pod-bearing plants (peas or beans or lentils etc.)"
    }

    class "_class_pumpkinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pumpkin.n.wn.food"
        string rdf:definition = "usually large pulpy deep-yellow round fruit of the squash family maturing in late summer or early autumn"
    }

    class "_class_pumpkin_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pumpkin_pie.n.wn.food"
        string rdf:definition = "pie made of mashed pumpkin and milk and eggs and sugar"
    }

    class "_class_punch_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "punch_bowl.n.wn.artifact"
        string rdf:definition = "a large bowl for serving beverages; usually with a ladle"
    }

    class "_class_purifyvwnchemistryPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "purify.v.wn.chemistry.Patient"
    }

    class "_class_purple_onionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "purple_onion.n.wn.food"
        string rdf:definition = "flat mild onion having purplish tunics; used as garnish on hamburgers and salads"
    }

    class "_class_spanish_onionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spanish_onion.n.wn.food"
        string rdf:definition = "large mild and succulent onion; often eaten raw"
    }

    class "_class_quaffnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "quaff.n.wn.food"
        string rdf:definition = "a hearty draft"
    }

    class "_class_quandongnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "quandong.n.wn.food"
        string rdf:definition = "red Australian fruit; used for dessert or in jam"
    }

    class "_class_quichenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "quiche.n.wn.food"
        string rdf:definition = "a tart filled with rich unsweetened custard; often contains other ingredients (as cheese or ham or seafood or vegetables)"
    }

    class "_class_quiche_lorrainenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "quiche_lorraine.n.wn.food"
        string rdf:definition = "quiche made with cheese and bacon"
    }

    class "_class_quincenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "quince.n.wn.food"
        string rdf:definition = "aromatic acid-tasting pear-shaped fruit used in preserves"
    }

    class "_class_radicchionwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "radicchio.n.wn.food"
        string rdf:definition = "prized variety of chicory having globose heads of red leaves"
    }

    class "_class_radishnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "radish.n.wn.food"
        string rdf:definition = "pungent fleshy edible root"
    }

    class "_class_rainnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rain.n.wn.substance"
        string rdf:definition = "drops of fresh water that fall as precipitation from clouds"
    }

    class "_class_raisin_brannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "raisin_bran.n.wn.food"
        string rdf:definition = "bran flakes with raisins"
    }

    class "_class_raisin_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "raisin_bread.n.wn.food"
        string rdf:definition = "bread containing raisins"
    }

    class "_class_raisin_cookienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "raisin_cookie.n.wn.food"
        string rdf:definition = "cookie containing raisins"
    }

    class "_class_raisin_nut_cookienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "raisin_nut_cookie.n.wn.food"
        string rdf:definition = "cookie filled with a paste of raisins and nuts"
    }

    class "_class_rake_handlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rake_handle.n.wn.artifact"
        string rdf:definition = "the handle of a rake"
    }

    class "_class_rambutannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rambutan.n.wn.food"
        string rdf:definition = "pleasantly acid bright red oval Malayan fruit covered with soft spines"
    }

    class "_class_ramekinnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ramekin.n.wn.artifact"
        string rdf:definition = "a small fireproof dish used for baking and serving individual portions"
    }

    class "_class_raspberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "raspberry.n.wn.food"
        string rdf:definition = "red or black edible aggregate berries usually smaller than the related blackberries"
    }

    class "_class_ratafianwnfoodliqueur" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ratafia.n.wn.food..liqueur"
        string rdf:definition = "sweet liqueur made from wine and brandy flavored with plum or peach or apricot kernels and bitter almonds"
    }

    class "_class_ratafianwnfoodmacaroon" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ratafia.n.wn.food..macaroon"
        string rdf:definition = "macaroon flavored with ratafia liqueur"
    }

    class "_class_raw_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "raw_milk.n.wn.food"
        string rdf:definition = "unpasteurized milk"
    }

    class "_class_raw_vegetablenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "raw_vegetable.n.wn.food"
        string rdf:definition = "an uncooked vegetable"
    }

    class "_class_reading_lampnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "reading_lamp.n.wn.artifact"
        string rdf:definition = "a lamp that provides light for reading"
    }

    class "_class_reception_desknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "reception_desk.n.wn.artifact"
        string rdf:definition = "a counter (as in a hotel) where guests are received"
    }

    class "_class_reclinernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "recliner.n.wn.artifact"
        string rdf:definition = "an armchair whose back can be lowered and foot can be raised to allow the sitter to recline in it"
    }

    class "_class_red_cabbagenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "red_cabbage.n.wn.food"
        string rdf:definition = "compact head of purplish-red leaves"
    }

    class "_class_red_currantnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "red_currant.n.wn.food"
        string rdf:definition = "small red berries used primarily in jams and jellies"
    }

    class "_class_red_deliciousnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "red_delicious.n.wn.food"
        string rdf:definition = "a sweet eating apple with bright red skin; most widely grown apple worldwide"
    }

    class "_class_refectory_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "refectory_table.n.wn.artifact"
        string rdf:definition = "a long narrow dining table supported by a stretcher between two trestles"
    }

    class "_class_refreshernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "refresher.n.wn.food"
        string rdf:definition = 'a drink that refreshes; "he stopped at the bar for a quick refresher"'
    }

    class "_class_refrigerator_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "refrigerator_door.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] the door of a refrigerator"
    }

    class "_class_refrigerator_drawernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "refrigerator_drawer.n.wn.artifact"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] drawer inside a refrigerator"
    }

    class "_class_refrigerator_cookienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "refrigerator_cookie.n.wn.food"
        string rdf:definition = "dough formed into a roll and chilled in the refrigerator then sliced and baked"
    }

    class "_class_regionnwnlocationspatial" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "region.n.wn.location..spatial"
    }

    class "_class_retsinanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "retsina.n.wn.food"
        string rdf:definition = "Greek wine flavored with resin"
    }

    class "_class_reubennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "reuben.n.wn.food"
        string rdf:definition = "a hot sandwich with corned beef and Swiss cheese and sauerkraut on rye bread"
    }

    class "_class_revolving_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "revolving_door.n.wn.artifact"
        string rdf:definition = "a door consisting of four orthogonal partitions that rotate about a central pivot; a door designed to equalize the air pressure in tall buildings"
    }

    class "_class_rhone_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rhone_wine.n.wn.food"
        string rdf:definition = "any of various wines from the Rhone River valley in France"
    }

    class "_class_rhubarb_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rhubarb_pie.n.wn.food"
        string rdf:definition = "pie containing diced rhubarb and much sugar"
    }

    class "_class_ribiernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ribier.n.wn.food"
        string rdf:definition = "dark reddish-purple table grape of California"
    }

    class "_class_rieslingnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "riesling.n.wn.food"
        string rdf:definition = "fragrant dry or sweet white wine from the Rhine valley or a similar wine from California"
    }

    class "_class_rifle_buttnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rifle_butt.n.wn.artifact"
        string rdf:definition = "the butt end of a rifle"
    }

    class "_class_riojanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rioja.n.wn.food"
        string rdf:definition = "dry red table wine from the Rioja region of northern Spain"
    }

    class "_class_roasternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "roaster.n.wn.artifact"
        string rdf:definition = "a special cooking pan for roasting"
    }

    class "_class_rob_roynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rob_roy.n.wn.food"
        string rdf:definition = "a manhattan cocktail made with Scotch whiskey"
    }

    class "_class_rock_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rock_cake.n.wn.food"
        string rdf:definition = "a small cake with a hard surface said to resemble a rock"
    }

    class "_class_roll_onnwnartifactdispenser" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "roll_on.n.wn.artifact..dispenser"
        string rdf:definition = "a dispenser of a liquid cosmetic (such as a deodorant) having a revolving ball as an applicator"
    }

    class "_class_rolled_biscuitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rolled_biscuit.n.wn.food"
        string rdf:definition = "biscuit made from dough rolled and cut"
    }

    class "_class_rome_beautynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rome_beauty.n.wn.food"
        string rdf:definition = "large red apple used primarily for baking"
    }

    class "_class_root_beernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "root_beer.n.wn.food"
        string rdf:definition = "carbonated drink containing extracts of roots and herbs"
    }

    class "_class_rose_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rose_apple.n.wn.food"
        string rdf:definition = "fragrant oval yellowish tropical fruit used in jellies and confections"
    }

    class "_class_rotgutnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rotgut.n.wn.food"
        string rdf:definition = "any alcoholic beverage of inferior quality"
    }

    class "_class_rotisserienwnartifactoven" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rotisserie.n.wn.artifact..oven"
        string rdf:definition = "an oven or broiler equipped with a rotating spit on which meat cooks as it turns"
    }

    class "_class_round_bottom_flasknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "round_bottom_flask.n.wn.artifact"
        string rdf:definition = "a spherical flask with a narrow neck"
    }

    class "_class_rugulahnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rugulah.n.wn.food"
        string rdf:definition = "pastry made with a cream cheese dough and different fillings (as raisins and walnuts and cinnamon or chocolate and walnut and apricot preserves)"
    }

    class "_class_rum_slingnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rum_sling.n.wn.food"
        string rdf:definition = "a sling made with rum"
    }

    class "_class_rummernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rummer.n.wn.artifact"
        string rdf:definition = "a large drinking glass (ovoid bowl on a stem) for drinking toasts"
    }

    class "_class_runcible_spoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "runcible_spoon.n.wn.artifact"
        string rdf:definition = "a fork-like spoon with a cutting edge; coined by Edward Lear"
    }

    class "_class_rutabaganwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rutabaga.n.wn.food"
        string rdf:definition = "the large yellow root of a rutabaga plant used as food"
    }

    class "_class_turnipnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turnip.n.wn.food"
        string rdf:definition = "root of any of several members of the mustard family"
    }

    class "_class_ryenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rye.n.wn.food"
        string rdf:definition = "whiskey distilled from rye or rye and malt"
    }

    class "_class_sacknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sack.n.wn.food"
        string rdf:definition = "any of various light dry strong white wine from Spain and Canary Islands (including sherry)"
    }

    class "_class_saint_emilionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "saint_emilion.n.wn.food"
        string rdf:definition = "full-bodied red wine from around the town of Saint Emilion in Bordeaux"
    }

    class "_class_sakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sake.n.wn.food"
        string rdf:definition = "Japanese alcoholic beverage made from fermented rice; usually served hot"
    }

    class "_class_salad_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salad_bar.n.wn.artifact"
        string rdf:definition = "a bar where diners can assemble a salad to their own taste"
    }

    class "_class_salad_burnetnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salad_burnet.n.wn.food"
        string rdf:definition = "leaves sometimes used for salad"
    }

    class "_class_salad_forknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salad_fork.n.wn.artifact"
        string rdf:definition = "a fork intended for eating salads"
    }

    class "_class_salad_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salad_plate.n.wn.artifact"
        string rdf:definition = "a plate or bowl for individual servings of salad"
    }

    class "_class_sally_lunnnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sally_lunn.n.wn.food"
        string rdf:definition = "a flat round slightly sweet teacake usually served hot"
    }

    class "_class_teacakenwnfoodcake" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "teacake.n.wn.food..cake"
        string rdf:definition = "any of various small cakes or cookies often served with tea"
    }

    class "_class_salmon_loafnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salmon_loaf.n.wn.food"
        string rdf:definition = "fish loaf made with flaked salmon"
    }

    class "_class_salt_rising_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salt_rising_bread.n.wn.food"
        string rdf:definition = "white wheat bread raised by a salt-tolerant bacterium in a mixture of salt and either cornmeal or potato pulp"
    }

    class "_class_saltinenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "saltine.n.wn.food"
        string rdf:definition = "a cracker sprinkled with salt before baking"
    }

    class "_class_sambucanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sambuca.n.wn.food"
        string rdf:definition = "an Italian liqueur made with elderberries and flavored with licorice"
    }

    class "_class_samovarnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "samovar.n.wn.artifact"
        string rdf:definition = "a metal urn with a spigot at the base; used in Russia to boil water for tea"
    }

    class "_class_snack_foodnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "snack_food.n.wn.food"
        string rdf:definition = "food for light meals or for eating between meals"
    }

    class "_class_wrapvwncontactcoverTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wrap.v.wn.contact..cover.Theme"
    }

    class "_class_sapodillanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sapodilla.n.wn.food"
        string rdf:definition = "tropical fruit with a rough brownish skin and very sweet brownish pulp"
    }

    class "_class_sapotenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sapote.n.wn.food"
        string rdf:definition = "brown oval fruit flesh makes excellent sherbet"
    }

    class "_class_sarsaparillanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sarsaparilla.n.wn.food"
        string rdf:definition = "carbonated drink flavored with an extract from sarsaparilla root or with birch oil and sassafras"
    }

    class "_class_saskatoonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "saskatoon.n.wn.food"
        string rdf:definition = "edible purple or red berries"
    }

    class "_class_satsumanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "satsuma.n.wn.food"
        string rdf:definition = "medium-sized largely seedless mandarin orange with thin smooth skin"
    }

    class "_class_saucepotnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "saucepot.n.wn.artifact"
        string rdf:definition = "a cooking pot that has handles on either side and tight fitting lid; used for stewing or boiling"
    }

    class "_class_saucernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "saucer.n.wn.artifact"
        string rdf:definition = "a small shallow dish for holding a cup at the table"
    }

    class "_class_sausage_rollnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sausage_roll.n.wn.food"
        string rdf:definition = "sausage meat rolled and baked in pastry"
    }

    class "_class_sauternenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sauterne.n.wn.food"
        string rdf:definition = "semisweet golden-colored table or dessert wine from around Bordeaux in France; similar wine from California"
    }

    class "_class_sauvignon_blancnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sauvignon_blanc.n.wn.food"
        string rdf:definition = "a California wine"
    }

    class "_class_savarinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "savarin.n.wn.food"
        string rdf:definition = "a sponge cake baked in a ring mold"
    }

    class "_class_savoy_cabbagenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "savoy_cabbage.n.wn.food"
        string rdf:definition = "head of soft crinkly leaves"
    }

    class "_class_sazeracnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sazerac.n.wn.food"
        string rdf:definition = "a cocktail made with bourbon with bitters and Pernod and sugar served with lemon peel"
    }

    class "_class_scalar" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scalar"
    }

    class "_class_scalded_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scalded_milk.n.wn.food"
        string rdf:definition = "milk heated almost to boiling"
    }

    class "_class_scarlet_runnernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scarlet_runner.n.wn.food"
        string rdf:definition = "long bean pods usually sliced into half-inch lengths; a favorite in Britain"
    }

    class "_class_scavengernwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scavenger.n.wn.animal"
    }

    class "_class_schnappsnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "schnapps.n.wn.food"
        string rdf:definition = "any of various strong liquors especially a Dutch spirit distilled from potatoes"
    }

    class "_class_schoonernwnartifactglass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "schooner.n.wn.artifact..glass"
        string rdf:definition = "a large beer glass"
    }

    class "_class_scorzoneranwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scorzonera.n.wn.food"
        string rdf:definition = "long black salsify"
    }

    class "_class_scotch_and_sodanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scotch_and_soda.n.wn.food"
        string rdf:definition = "a highball with Scotch malt whiskey and club soda"
    }

    class "_class_scrambled_eggnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scrambled_egg.n.wn.food"
        string rdf:definition = "eggs beaten and cooked to a soft firm consistency while stirring"
    }

    class "_class_screen_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "screen_door.n.wn.artifact"
        string rdf:definition = 'a door that consists of a frame holding metallic or plastic netting; used to allow ventilation and to keep insects from entering a building through the open door; "he heard the screen door slam as she left"'
    }

    class "_class_screwdrivernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "screwdriver.n.wn.food"
        string rdf:definition = "a cocktail made with vodka and orange juice"
    }

    class "_class_scrumpynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scrumpy.n.wn.food"
        string rdf:definition = "strong cider (as made in western England)"
    }

    class "_class_scuppernongnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scuppernong.n.wn.food"
        string rdf:definition = "amber-green muscadine grape of southeastern United States"
    }

    class "_class_scyphusnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scyphus.n.wn.artifact"
        string rdf:definition = "an ancient Greek drinking cup; two handles and footed base"
    }

    class "_class_seckelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seckel.n.wn.food"
        string rdf:definition = "small yellowish- to reddish-brown pear"
    }

    class "_class_secretarynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "secretary.n.wn.artifact"
        string rdf:definition = "a desk used for writing"
    }

    class "_class_sectionalnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sectional.n.wn.artifact"
        string rdf:definition = "a piece of furniture made up of sections that can be arranged individually or together"
    }

    class "_class_seedcakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seedcake.n.wn.food"
        string rdf:definition = "a sweet cake flavored with sesame or caraway seeds and lemon"
    }

    class "_class_seeded_raisinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seeded_raisin.n.wn.food"
        string rdf:definition = "seeded grape that has been dried"
    }

    class "_class_seedless_raisinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seedless_raisin.n.wn.food"
        string rdf:definition = "dried seedless grape"
    }

    class "_class_seidelnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seidel.n.wn.artifact"
        string rdf:definition = "a glass for beer"
    }

    class "_class_seltzernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seltzer.n.wn.food"
        string rdf:definition = "naturally effervescent mineral water"
    }

    class "_class_semi_skimmed_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "semi_skimmed_milk.n.wn.food"
        string rdf:definition = "milk from which some of the cream has been removed"
    }

    class "_class_separatevwncontactcomponentsPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "separate.v.wn.contact..components.Patient"
    }

    class "_class_sergernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "serger.n.wn.artifact"
        string rdf:definition = "a sewing machine that overcasts the raw edges of a fabric with a V-shaped stitch"
    }

    class "_class_sewing_machinenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sewing_machine.n.wn.artifact"
        string rdf:definition = "a textile machine used as a home appliance for sewing"
    }

    class "_class_serving_dishnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "serving_dish.n.wn.artifact"
        string rdf:definition = "a dish used for serving food"
    }

    class "_class_setteenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "settee.n.wn.artifact"
        string rdf:definition = "a small sofa"
    }

    class "_class_settlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "settle.n.wn.artifact"
        string rdf:definition = "a long wooden bench with a back"
    }

    class "_class_sewvwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sew.v.wn.contact.Instrument"
    }

    class "_class_sew_togethervwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sew_together.v.wn.contact.Instrument"
    }

    class "_class_textile_machinenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "textile_machine.n.wn.artifact"
        string rdf:definition = "a machine for making textiles"
    }

    class "_class_stitchvwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stitch.v.wn.contact.Instrument"
    }

    class "_class_shallotnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shallot.n.wn.food"
        string rdf:definition = "small mild-flavored onion-like or garlic-like clustered bulbs used for seasoning"
    }

    class "_class_shawnee_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shawnee_cake.n.wn.food"
        string rdf:definition = "form of johnnycake"
    }

    class "_class_shepherd_ZZ_s_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shepherd_ZZ_s_pie.n.wn.food"
        string rdf:definition = "pie of hash covered with mashed potatoes and browned in the oven"
    }

    class "_class_sheratonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sheraton.n.wn.artifact"
        string rdf:definition = "a furniture style that originated in England around 1800; simple in design with straight lines and classical ornamentation"
    }

    class "_class_shooflynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shoofly.n.wn.artifact"
        string rdf:definition = "a child's rocking chair with the seat built between two flat sides that are shaped to resemble an animal (such as a swan or duck)"
    }

    class "_class_shoofly_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shoofly_pie.n.wn.food"
        string rdf:definition = "open pie filled with a mixture of sweet crumbs and molasses"
    }

    class "_class_shortbreadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shortbread.n.wn.food"
        string rdf:definition = "very rich thick butter cookie"
    }

    class "_class_shortcakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shortcake.n.wn.food"
        string rdf:definition = "very short biscuit dough baked as individual biscuits or a round loaf; served with sweetened fruit and usually whipped cream"
    }

    class "_class_shot_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shot_glass.n.wn.artifact"
        string rdf:definition = "a small glass adequate to hold a single swallow of whiskey"
    }

    class "_class_sickbednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sickbed.n.wn.artifact"
        string rdf:definition = "the bed on which a sick person lies"
    }

    class "_class_sidenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "side.n.wn.artifact"
        string rdf:definition = 'an extended outer surface of an object; "he turned the box over to examine the bottom side"; "they painted all four sides of the house"'
    }

    class "_class_side_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "side_door.n.wn.artifact"
        string rdf:definition = "an exterior door at one side of a building"
    }

    class "_class_sidecarnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sidecar.n.wn.food"
        string rdf:definition = "a cocktail made of orange liqueur with lemon juice and brandy"
    }

    class "_class_sidewallnwnartifactwall" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sidewall.n.wn.artifact..wall"
        string rdf:definition = "a wall that forms the side of a structure"
    }

    class "_class_sieva_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sieva_bean.n.wn.food"
        string rdf:definition = "small flat green bean similar to lima beans"
    }

    class "_class_silver_platenwnartifacttableware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "silver_plate.n.wn.artifact..tableware"
        string rdf:definition = "tableware that is plated with silver"
    }

    class "_class_simnelnwnfoodbread" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "simnel.n.wn.food..bread"
        string rdf:definition = "a crisp bread of fine white flour"
    }

    class "_class_simnelnwnfoodfruitcake" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "simnel.n.wn.food..fruitcake"
        string rdf:definition = "a fruitcake (sometimes covered with almond paste) eaten at mid-Lent or Easter or Christmas"
    }

    class "_class_skillet_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "skillet_bread.n.wn.food"
        string rdf:definition = "usually cooked in a skillet over an open fire: especially cornbread with ham bits and sometimes Irish soda bread"
    }

    class "_class_skillet_corn_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "skillet_corn_bread.n.wn.food"
        string rdf:definition = "cornbread usually containing ham or bacon bits and cooked in a skillet"
    }

    class "_class_skillynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "skilly.n.wn.food"
        string rdf:definition = "a thin porridge or soup (usually oatmeal and water flavored with meat)"
    }

    class "_class_skim_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "skim_milk.n.wn.food"
        string rdf:definition = "milk from which the cream has been skimmed"
    }

    class "_class_skimmernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "skimmer.n.wn.artifact"
        string rdf:definition = "a cooking utensil used to skim fat from the surface of liquids"
    }

    class "_class_sleepernwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sleeper.n.wn.artifact..furniture"
        string rdf:definition = "a piece of furniture that can be opened up into a bed"
    }

    class "_class_sleigh_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sleigh_bed.n.wn.artifact"
        string rdf:definition = "a bed with solid headboard and footboard that roll outward at the top"
    }

    class "_class_slicernwnartifactknife" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "slicer.n.wn.artifact..knife"
        string rdf:definition = "knife especially designed for slicing particular foods, as cheese"
    }

    class "_class_slinger_ringnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "slinger_ring.n.wn.artifact"
        string rdf:definition = "dispenser consisting of a tubular ring around the propeller hub of an airplane through which antifreeze solution is spread over the blades"
    }

    class "_class_slivovitznwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "slivovitz.n.wn.food"
        string rdf:definition = "a colorless plum brandy popular in the Balkans"
    }

    class "_class_sloenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sloe.n.wn.food"
        string rdf:definition = "small sour dark purple fruit of especially the Allegheny plum bush"
    }

    class "_class_sloe_ginnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sloe_gin.n.wn.food"
        string rdf:definition = "gin flavored with sloes (fruit of the blackthorn)"
    }

    class "_class_slopnwnfoodbeverage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "slop.n.wn.food..beverage"
        string rdf:definition = "wet feed (especially for pigs) consisting of mostly kitchen waste mixed with water or skimmed or sour milk"
    }

    class "_class_slop_basinnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "slop_basin.n.wn.artifact"
        string rdf:definition = "a bowl into which the dregs of teacups and coffee cups are emptied at the table"
    }

    class "_class_sloppy_joenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sloppy_joe.n.wn.food"
        string rdf:definition = "ground beef (not a patty) cooked in a spicy sauce and served on a bun"
    }

    class "_class_slugnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "slug.n.wn.food"
        string rdf:definition = 'an amount of an alcoholic drink (usually liquor) that is poured or gulped; "he took a slug of hard liquor"'
    }

    class "_class_smelling_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "smelling_bottle.n.wn.artifact"
        string rdf:definition = "a bottle containing smelling salts"
    }

    class "_class_smoothienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "smoothie.n.wn.food"
        string rdf:definition = "a thick smooth drink consisting of fresh fruit pureed with ice cream or yoghurt or milk"
    }

    class "_class_snap_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "snap_bean.n.wn.food"
        string rdf:definition = "tender green beans without strings that easily snap into sections"
    }

    class "_class_snifternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "snifter.n.wn.artifact"
        string rdf:definition = "a globular glass with a small top; used for serving brandy"
    }

    class "_class_snow_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "snow_pea.n.wn.food"
        string rdf:definition = "green peas with flat edible pods"
    }

    class "_class_snow_peanwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "snow_pea.n.wn.plant"
        string rdf:definition = "variety of pea plant producing peas having thin flat edible pods"
    }

    class "_class_soap_dispensernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soap_dispenser.n.wn.artifact"
        string rdf:definition = "dispenser of liquid soap"
    }

    class "_class_soavenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soave.n.wn.food"
        string rdf:definition = "dry white Italian wine from Verona"
    }

    class "_class_soda_crackernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soda_cracker.n.wn.food"
        string rdf:definition = "unsweetened cracker leavened slightly with soda and cream of tartar"
    }

    class "_class_soda_fountainnwnartifactbar" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soda_fountain.n.wn.artifact..bar"
        string rdf:definition = "a counter where ice cream and sodas and sundaes are prepared and served"
    }

    class "_class_soft_boiled_eggnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soft_boiled_egg.n.wn.food"
        string rdf:definition = "[DFL auxiliary concept, not in WordNET] an egg that has been boiled for a shorter time, so that its yolk remains liquid"
    }

    class "_class_soft_pretzelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soft_pretzel.n.wn.food"
        string rdf:definition = "a pretzel made of soft bread"
    }

    class "_class_soft_rollnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soft_roll.n.wn.food"
        string rdf:definition = "yeast-raised roll with a soft crust"
    }

    class "_class_solid" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "solid"
    }

    class "_class_sorbnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sorb.n.wn.food"
        string rdf:definition = "acid gritty-textured fruit"
    }

    class "_class_sorrelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sorrel.n.wn.food"
        string rdf:definition = "large sour-tasting arrowhead-shaped leaves used in salads and sauces"
    }

    class "_class_soup_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soup_bowl.n.wn.artifact"
        string rdf:definition = "a bowl for serving soup"
    }

    class "_class_soup_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soup_plate.n.wn.artifact"
        string rdf:definition = "a deep plate with a wide rim"
    }

    class "_class_soupspoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soupspoon.n.wn.artifact"
        string rdf:definition = "a spoon with a rounded bowl for eating soup"
    }

    class "_class_sournwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sour.n.wn.food"
        string rdf:definition = "a cocktail made of a liquor (especially whiskey or gin) mixed with lemon or lime juice and sugar"
    }

    class "_class_sour_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sour_bread.n.wn.food"
        string rdf:definition = "made with a starter of a small amount of dough in which fermentation is active"
    }

    class "_class_sour_gourdnwnfoodafrican" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sour_gourd.n.wn.food..african"
        string rdf:definition = "African gourd-like fruit with edible pulp"
    }

    class "_class_sour_gourdnwnfoodaustralian" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sour_gourd.n.wn.food..australian"
        string rdf:definition = "acid-tasting Australian gourd-like fruit with a woody rind and large seeds"
    }

    class "_class_sour_mashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sour_mash.n.wn.food"
        string rdf:definition = "any whiskey distilled from sour mash"
    }

    class "_class_sour_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sour_milk.n.wn.food"
        string rdf:definition = "milk that has turned sour"
    }

    class "_class_soursopnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soursop.n.wn.food"
        string rdf:definition = "large spiny tropical fruit with tart pulp related to custard apples"
    }

    class "_class_spaghetti_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spaghetti_squash.n.wn.food"
        string rdf:definition = "medium-sized oval squash with flesh in the form of strings that resemble spaghetti"
    }

    class "_class_specimen_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "specimen_bottle.n.wn.artifact"
        string rdf:definition = "a bottle for holding urine specimens"
    }

    class "_class_spice_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spice_cake.n.wn.food"
        string rdf:definition = "cake flavored with spices"
    }

    class "_class_spice_cookienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spice_cookie.n.wn.food"
        string rdf:definition = "cookie flavored with spices"
    }

    class "_class_spice_racknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spice_rack.n.wn.artifact"
        string rdf:definition = "a rack for displaying containers filled with spices"
    }

    class "_class_spidernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spider.n.wn.artifact"
        string rdf:definition = "a skillet made of cast iron"
    }

    class "_class_spin_dryernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spin_dryer.n.wn.artifact"
        string rdf:definition = "a clothes dryer that uses centrifugal motion to dry the clothes that are put into it"
    }

    class "_class_spinachnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spinach.n.wn.food"
        string rdf:definition = "dark green leaves; eaten cooked or raw in salads"
    }

    class "_class_spirit_stovenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spirit_stove.n.wn.artifact"
        string rdf:definition = "a stove that burns a volatile liquid fuel such as alcohol"
    }

    class "_class_spirits_of_winenwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spirits_of_wine.n.wn.substance"
        string rdf:definition = "rectified ethyl alcohol"
    }

    class "_class_split_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "split_pea.n.wn.food"
        string rdf:definition = "dried hulled pea; used in soup"
    }

    class "_class_spoon_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spoon_bread.n.wn.food"
        string rdf:definition = "soft bread made of cornmeal and sometimes rice or hominy; must be served with a spoon (chiefly southern)"
    }

    class "_class_spring_waternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spring_water.n.wn.food"
        string rdf:definition = "water from a spring"
    }

    class "_class_spritzernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spritzer.n.wn.food"
        string rdf:definition = "a mixed drink made of wine mixed with a sparkling water"
    }

    class "_class_spruce_beernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spruce_beer.n.wn.food"
        string rdf:definition = "a brew made by fermenting molasses and other sugars with the sap of spruce trees (sometimes with malt)"
    }

    class "_class_squabnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "squab.n.wn.artifact"
        string rdf:definition = "a soft padded sofa"
    }

    class "_class_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "squash.n.wn.food"
        string rdf:definition = "edible fruit of a squash plant; eaten as a vegetable"
    }

    class "_class_squashvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "squash.v.wn.contact.Patient"
    }

    class "_class_squash_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "squash_pie.n.wn.food"
        string rdf:definition = "similar to pumpkin pie but made with winter squash instead of pumpkin"
    }

    class "_class_swervevwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "swerve.v.wn.motion.Theme"
    }

    class "_class_turnvwnmotionmoveTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turn.v.wn.motion..move.Theme"
    }

    class "_class_weavevwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "weave.v.wn.motion.Theme"
    }

    class "_class_stalknwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stalk.n.wn.plant"
        string rdf:definition = "a slender or elongated structure that supports a plant or fungus or a plant part or plant organ"
    }

    class "_class_staymannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stayman.n.wn.food"
        string rdf:definition = "apple grown chiefly in the Shenandoah Valley"
    }

    class "_class_stayman_winesapnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stayman_winesap.n.wn.food"
        string rdf:definition = "crisp tart apple; good for eating raw and suitable for cooking"
    }

    class "_class_steak_and_kidney_pienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "steak_and_kidney_pie.n.wn.food"
        string rdf:definition = "steak with sauteed kidneys and onions cooked in wine and stock then covered with pastry and baked"
    }

    class "_class_steak_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "steak_knife.n.wn.artifact"
        string rdf:definition = "a sharp table knife used in eating steak"
    }

    class "_class_steam_ironnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "steam_iron.n.wn.artifact"
        string rdf:definition = "a pressing iron that can emit steam"
    }

    class "_class_steamernwnartifactcooking_utensil" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "steamer.n.wn.artifact..cooking_utensil"
        string rdf:definition = "a cooking utensil that can be used to cook food by steaming it"
    }

    class "_class_steel_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "steel_plate.n.wn.artifact"
        string rdf:definition = "a plate of steel"
    }

    class "_class_step_stoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "step_stool.n.wn.artifact"
        string rdf:definition = "a stool that has one or two steps that fold under the seat"
    }

    class "_class_stewing_pannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stewing_pan.n.wn.artifact"
        string rdf:definition = "a saucepan used for stewing"
    }

    class "_class_stilettonwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stiletto.n.wn.artifact"
        string rdf:definition = "a small dagger with a tapered blade"
    }

    class "_class_stingernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stinger.n.wn.food"
        string rdf:definition = "a cocktail made of made of creme de menthe and brandy"
    }

    class "_class_stockpotnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stockpot.n.wn.artifact"
        string rdf:definition = "a pot used for preparing soup stock"
    }

    class "_class_stopnwnmusic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stop.n.wn.music"
        string rdf:definition = '(music) a knob on an organ that is pulled to change the sound quality from the organ pipes; "the organist pulled out all the stops"'
    }

    class "_class_stopcocknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stopcock.n.wn.artifact"
        string rdf:definition = "faucet consisting of a rotating device for regulating flow of a liquid"
    }

    class "_class_storm_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "storm_door.n.wn.artifact"
        string rdf:definition = "an extra outer door for protection against severe weather or winter"
    }

    class "_class_straight_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "straight_chair.n.wn.artifact"
        string rdf:definition = "a straight-backed chair without arms"
    }

    class "_class_straw_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "straw_wine.n.wn.food"
        string rdf:definition = "sweet wine from grapes partially sun-dried on the vine or on straw mats"
    }

    class "_class_strawberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "strawberry.n.wn.food"
        string rdf:definition = "sweet fleshy red fruit"
    }

    class "_class_strawberry_daiquirinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "strawberry_daiquiri.n.wn.food"
        string rdf:definition = "daiquiri with crushed strawberries"
    }

    class "_class_strawberry_jamnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "strawberry_jam.n.wn.food"
        string rdf:definition = "made with strawberries"
    }

    class "_class_streuselnwnfoodpastry_baked_goods" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "streusel.n.wn.food..pastry_baked_goods"
        string rdf:definition = "pastry with a topping of streusel"
    }

    class "_class_string_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "string_bean.n.wn.food"
        string rdf:definition = "green beans with strings that must be removed"
    }

    class "_class_strudelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "strudel.n.wn.food"
        string rdf:definition = "thin sheet of filled dough rolled and baked"
    }

    class "_class_student_lampnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "student_lamp.n.wn.artifact"
        string rdf:definition = "a reading lamp with a flexible neck; used on a desk"
    }

    class "_class_studio_couchnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "studio_couch.n.wn.artifact"
        string rdf:definition = "convertible consisting of an upholstered couch that can be converted into a double bed"
    }

    class "_class_substance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "substance"
    }

    class "_class_suck_outvwncontactLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "suck_out.v.wn.contact.Location"
    }

    class "_class_sudsnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "suds.n.wn.food"
        string rdf:definition = "a dysphemism for beer (especially for lager that effervesces)"
    }

    class "_class_sugar_beetnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_beet.n.wn.food"
        string rdf:definition = "white-rooted beet grown as a source of sugar"
    }

    class "_class_sugar_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_bowl.n.wn.artifact"
        string rdf:definition = "a dish in which sugar is served"
    }

    class "_class_sugar_cookienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_cookie.n.wn.food"
        string rdf:definition = "cookies sprinkled with granulated sugar"
    }

    class "_class_sugar_snap_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_snap_pea.n.wn.food"
        string rdf:definition = "green peas with edible pods that are very crisp and not flat"
    }

    class "_class_sugar_snap_peanwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_snap_pea.n.wn.plant"
        string rdf:definition = "variety of pea plant producing peas having crisp rounded edible pods"
    }

    class "_class_sugar_spoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_spoon.n.wn.artifact"
        string rdf:definition = "a spoon for serving sugar; often made in the shape of a seashell"
    }

    class "_class_sugar_waternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_water.n.wn.food"
        string rdf:definition = "water sweetened with sugar"
    }

    class "_class_sugarberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugarberry.n.wn.food"
        string rdf:definition = "small edible dark purple to black berry with large pits; southern United States"
    }

    class "_class_sultananwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sultana.n.wn.food"
        string rdf:definition = "pale yellow seedless grape used for raisins and wine"
    }

    class "_class_sun_teanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sun_tea.n.wn.food"
        string rdf:definition = "tea made by exposing tea leaves steeped in water to the direct rays of the sun; usually served with ice"
    }

    class "_class_supply_closetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "supply_closet.n.wn.artifact"
        string rdf:definition = "a closet for storing supplies"
    }

    class "_class_surfacenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "surface.n.wn.artifact"
        string rdf:definition = 'the outer boundary of an artifact or a material layer constituting or resembling such a boundary; "there is a special cleaner for these surfaces"; "the cloth had a pattern of red dots on a white surface"'
    }

    class "_class_surgical_instrumentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "surgical_instrument.n.wn.artifact"
        string rdf:definition = "a medical instrument used in surgery"
    }

    class "_class_surgical_spiritnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "surgical_spirit.n.wn.substance"
        string rdf:definition = "methylated spirit used in the practice of medicine (especially for cleansing the skin before injections or before surgery)"
    }

    class "_class_sushi_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sushi_bar.n.wn.artifact"
        string rdf:definition = "a bar where sushi is served"
    }

    class "_class_swedish_rye_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "swedish_rye_bread.n.wn.food"
        string rdf:definition = "a moist aromatic yeast-raised bread made with rye flour and molasses and orange rind"
    }

    class "_class_sweet_calabashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_calabash.n.wn.food"
        string rdf:definition = "apple-sized passion fruit of the West Indies"
    }

    class "_class_sweet_cidernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_cider.n.wn.food"
        string rdf:definition = "unfermented cider"
    }

    class "_class_sweet_potatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_potato.n.wn.food"
        string rdf:definition = "the edible tuberous root of the sweet potato vine which is grown widely in warm regions of the United States"
    }

    class "_class_sweetsopnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweetsop.n.wn.food"
        string rdf:definition = "sweet pulpy tropical fruit with thick scaly rind and shiny black seeds"
    }

    class "_class_switchbladenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "switchblade.n.wn.artifact"
        string rdf:definition = "a pocketknife with a blade that springs open at the press of a button"
    }

    class "_class_swivel_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "swivel_chair.n.wn.artifact"
        string rdf:definition = "a chair that swivels on its base"
    }

    class "_class_swizzlenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "swizzle.n.wn.food"
        string rdf:definition = "any of various tall frothy mixed drinks made usually of rum and lime juice and sugar shaken with ice"
    }

    class "_class_syllabubnwnfooddrink" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "syllabub.n.wn.food..drink"
        string rdf:definition = "spiced hot milk with rum or wine"
    }

    class "_class_tabasconwnfoodhot_pepper" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tabasco.n.wn.food..hot_pepper"
        string rdf:definition = "very hot red peppers; usually long and thin; some very small"
    }

    class "_class_tablenwnartifactprepared" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "table.n.wn.artifact..prepared"
        string rdf:definition = 'a piece of furniture with tableware for a meal laid out on it; "I reserved a table at my favorite restaurant"'
    }

    class "_class_table_lampnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "table_lamp.n.wn.artifact"
        string rdf:definition = "a lamp that sits on a table"
    }

    class "_class_table_servicenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "table_service.n.wn.artifact"
        string rdf:definition = "tableware consisting of a complete set of articles (silver or dishware) for use at table"
    }

    class "_class_table_tennis_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "table_tennis_table.n.wn.artifact"
        string rdf:definition = "a table used for playing table tennis"
    }

    class "_class_table_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "table_wine.n.wn.food"
        string rdf:definition = "wine containing not more than 14 percent alcohol usually served with a meal"
    }

    class "_class_tablet_armed_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tablet_armed_chair.n.wn.artifact"
        string rdf:definition = "a chair with an arm that has been widened for writing"
    }

    class "_class_work_surfacenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "work_surface.n.wn.artifact"
        string rdf:definition = "a horizontal surface for supporting objects used in working or playing games"
    }

    class "_class_warenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ware.n.wn.artifact"
        string rdf:definition = "articles of the same kind or material; usually used in combination: `silverware', `software'"
    }

    class "_class_taboretnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "taboret.n.wn.artifact"
        string rdf:definition = "a low stool in the shape of a drum"
    }

    class "_class_tamarindnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tamarind.n.wn.food"
        string rdf:definition = "large tropical seed pod with very tangy pulp that is eaten fresh or cooked with rice and fish or preserved for curries and chutneys"
    }

    class "_class_tandoornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tandoor.n.wn.artifact"
        string rdf:definition = "a clay oven used in northern India and Pakistan"
    }

    class "_class_tangelonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tangelo.n.wn.food"
        string rdf:definition = "large sweet juicy hybrid between tangerine and grapefruit having a thick wrinkled skin"
    }

    class "_class_tangerinenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tangerine.n.wn.food"
        string rdf:definition = "any of various deep orange mandarins grown in the United States and southern Africa"
    }

    class "_class_tap_waternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tap_water.n.wn.food"
        string rdf:definition = "water directly from the spigot"
    }

    class "_class_taronwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "taro.n.wn.food"
        string rdf:definition = "tropical starchy tuberous root"
    }

    class "_class_tartnwnfoodpastry_baked_goods" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tart.n.wn.food..pastry_baked_goods"
        string rdf:definition = "a pastry cup with a filling of fruit or custard and no top crust"
    }

    class "_class_tartletnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tartlet.n.wn.food"
        string rdf:definition = "a small tart usually used as a canape"
    }

    class "_class_tea_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tea_bread.n.wn.food"
        string rdf:definition = "sweetened buns to be eaten with tea"
    }

    class "_class_tea_like_drinknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tea_like_drink.n.wn.food"
        string rdf:definition = "a beverage that resembles tea but is not made from tea leaves"
    }

    class "_class_tea_makernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tea_maker.n.wn.artifact"
        string rdf:definition = "a covered spoon with perforations"
    }

    class "_class_tea_servicenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tea_service.n.wn.artifact"
        string rdf:definition = "a set of china or silverware for serving tea"
    }

    class "_class_tea_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tea_table.n.wn.artifact"
        string rdf:definition = "a small table for serving afternoon tea"
    }

    class "_class_tea_urnnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tea_urn.n.wn.artifact"
        string rdf:definition = "an urn in which tea is brewed and from which it is served"
    }

    class "_class_teacakenwnfoodcookie" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "teacake.n.wn.food..cookie"
        string rdf:definition = "flat semisweet cookie or biscuit usually served with tea"
    }

    class "_class_teacupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "teacup.n.wn.artifact"
        string rdf:definition = "a cup from which tea is drunk"
    }

    class "_class_teakettlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "teakettle.n.wn.artifact"
        string rdf:definition = "kettle for boiling water to make tea"
    }

    class "_class_teapotnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "teapot.n.wn.artifact"
        string rdf:definition = "pot for brewing tea; usually has a spout and handle"
    }

    class "_class_temple_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "temple_orange.n.wn.food"
        string rdf:definition = "large sweet easily-peeled Florida fruit with deep orange rind"
    }

    class "_class_tequilanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tequila.n.wn.food"
        string rdf:definition = "Mexican liquor made from fermented juices of an agave plant"
    }

    class "_class_thermosnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "thermos.n.wn.artifact"
        string rdf:definition = "vacuum flask that preserves temperature of hot or cold drinks"
    }

    class "_class_thompson_seedlessnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "thompson_seedless.n.wn.food"
        string rdf:definition = "seedless green table grape of California"
    }

    class "_class_tilt_top_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tilt_top_table.n.wn.artifact"
        string rdf:definition = "a pedestal table whose top is hinged so that it can be tilted to a vertical position"
    }

    class "_class_timbalenwnfoodpastry_baked_goods" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "timbale.n.wn.food..pastry_baked_goods"
        string rdf:definition = "small pastry shell for creamy mixtures of minced foods"
    }

    class "_class_time" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "time"
    }

    class "_class_toad_in_holenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "toad_in_hole.n.wn.food"
        string rdf:definition = "sausage baked in batter"
    }

    class "_class_toasternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "toaster.n.wn.artifact"
        string rdf:definition = "a kitchen appliance (usually electric) for toasting bread"
    }

    class "_class_toaster_ovennwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "toaster_oven.n.wn.artifact"
        string rdf:definition = "kitchen appliance consisting of a small electric oven for toasting or warming food"
    }

    class "_class_toasting_forknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "toasting_fork.n.wn.artifact"
        string rdf:definition = "long-handled fork for cooking or toasting frankfurters or bread etc. (especially over an open fire)"
    }

    class "_class_tobynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "toby.n.wn.artifact"
        string rdf:definition = "a drinking mug in the shape of a stout man wearing a three-cornered hat"
    }

    class "_class_toilet_seatnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "toilet_seat.n.wn.artifact"
        string rdf:definition = "the hinged seat on a toilet"
    }

    class "_class_tokaynwnfoodwine" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tokay.n.wn.food..wine"
        string rdf:definition = "Hungarian wine made from Tokay grapes"
    }

    class "_class_tom_and_jerrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tom_and_jerry.n.wn.food"
        string rdf:definition = "hot rum toddy with a beaten egg"
    }

    class "_class_tomatillonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tomatillo.n.wn.food"
        string rdf:definition = "small edible yellow to purple tomato-like fruit enclosed in a bladderlike husk"
    }

    class "_class_tomato_juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tomato_juice.n.wn.food"
        string rdf:definition = "the juice of tomatoes (usually bottled or canned)"
    }

    class "_class_tortenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "torte.n.wn.food"
        string rdf:definition = "rich cake usually covered with cream and fruit or nuts; originated in Austria"
    }

    class "_class_tortillanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tortilla.n.wn.food"
        string rdf:definition = "thin unleavened pancake made from cornmeal or wheat flour"
    }

    class "_class_tostadanwnfoodtortilla" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tostada.n.wn.food..tortilla"
        string rdf:definition = "a crisp flat tortilla"
    }

    class "_class_tourtierenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tourtiere.n.wn.food"
        string rdf:definition = "a meat pie that is usually eaten at Christmas in Quebec"
    }

    class "_class_trap_doornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "trap_door.n.wn.artifact"
        string rdf:definition = "a hinged or sliding door in a floor or ceiling"
    }

    class "_class_travel_ironnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "travel_iron.n.wn.artifact"
        string rdf:definition = "a small lightweight iron that can be carried while traveling"
    }

    class "_class_trestle_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "trestle_table.n.wn.artifact"
        string rdf:definition = "a table supported on trestles"
    }

    class "_class_tricliniumnwnartifacttable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "triclinium.n.wn.artifact..table"
        string rdf:definition = "a dining table with couches along three sides in ancient Rome"
    }

    class "_class_triple_secnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "triple_sec.n.wn.food"
        string rdf:definition = "type of curacao having higher alcoholic content"
    }

    class "_class_trouser_pressnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "trouser_press.n.wn.artifact"
        string rdf:definition = "a home appliance in which trousers can be hung and the wrinkles pressed out"
    }

    class "_class_trufflenwnfoodvegetable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "truffle.n.wn.food..vegetable"
        string rdf:definition = "edible subterranean fungus of the genus Tuber"
    }

    class "_class_trundle_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "trundle_bed.n.wn.artifact"
        string rdf:definition = "a low bed to be slid under a higher bed"
    }

    class "_class_tumble_dryernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tumble_dryer.n.wn.artifact"
        string rdf:definition = "a clothes dryer that spins wet clothes inside a cylinder with heated air"
    }

    class "_class_tumblernwnartifactglass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tumbler.n.wn.artifact..glass"
        string rdf:definition = "a glass with a flat bottom but no handle or stem; originally had a round bottom"
    }

    class "_class_tunaburgernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tunaburger.n.wn.food"
        string rdf:definition = "a sandwich that resembles a hamburger but made with tuna instead of beef"
    }

    class "_class_tureennwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tureen.n.wn.artifact"
        string rdf:definition = "large deep serving dish with a cover; for serving soups and stews"
    }

    class "_class_turkish_coffeenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turkish_coffee.n.wn.food"
        string rdf:definition = "a drink made from pulverized coffee beans; usually sweetened"
    }

    class "_class_turnip_greensnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turnip_greens.n.wn.food"
        string rdf:definition = "tender leaves of young white turnips"
    }

    class "_class_twin_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "twin_bed.n.wn.artifact"
        string rdf:definition = "one of a pair of identical beds"
    }

    class "_class_twinkienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "twinkie.n.wn.food"
        string rdf:definition = "a small sponge cake with a synthetic cream filling"
    }

    class "_class_upper_berthnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "upper_berth.n.wn.artifact"
        string rdf:definition = "the higher of two berths"
    }

    class "_class_upside_down_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "upside_down_cake.n.wn.food"
        string rdf:definition = "batter baked atop a layer of sweetened fruit then turned upside down so fruit is on top"
    }

    class "_class_urnnwnartifactvase" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "urn.n.wn.artifact..vase"
        string rdf:definition = "a large vase that usually has a pedestal or feet"
    }

    class "_class_vasenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vase.n.wn.artifact"
        string rdf:definition = "an open jar of glass or porcelain used as an ornament or to hold flowers"
    }

    class "_class_uruguay_potatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "uruguay_potato.n.wn.food"
        string rdf:definition = "similar to the common potato"
    }

    class "_class_v__juicenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "v_8_juice.n.wn.food"
        string rdf:definition = "brand name for canned mixed vegetable juices"
    }

    class "_class_vacuumnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vacuum.n.wn.artifact"
        string rdf:definition = "an electrical home appliance that cleans by suction"
    }

    class "_class_valencia_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "valencia_orange.n.wn.food"
        string rdf:definition = "variety of sweet orange cultivated extensively in Florida and California"
    }

    class "_class_varietal_winenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "varietal_wine.n.wn.food"
        string rdf:definition = "a wine made principally from one grape and carrying the name of that grape"
    }

    class "_class_vehicle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vehicle"
    }

    class "_class_vehiclenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vehicle.n.wn.artifact"
    }

    class "_class_venetian_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "venetian_glass.n.wn.artifact"
        string rdf:definition = "fine glassware made near Venice"
    }

    class "_class_verdicchionwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "verdicchio.n.wn.food"
        string rdf:definition = "a dry white Italian wine made from Verdicchio grapes"
    }

    class "_class_vertical_filenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vertical_file.n.wn.artifact"
        string rdf:definition = "a file in which records are stored upright on one edge"
    }

    class "_class_vichy_waternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vichy_water.n.wn.food"
        string rdf:definition = "sparkling mineral water from springs at Vichy, France or water similar to it"
    }

    class "_class_victoria_plumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "victoria_plum.n.wn.food"
        string rdf:definition = "a large red plum served as dessert"
    }

    class "_class_victoria_sandwichnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "victoria_sandwich.n.wn.food"
        string rdf:definition = "a cake consisting of two layers of sponge cake with a jelly filling in between"
    }

    class "_class_vidalia_onionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vidalia_onion.n.wn.food"
        string rdf:definition = "sweet-flavored onion grown in Georgia"
    }

    class "_class_vin_ordinairenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vin_ordinaire.n.wn.food"
        string rdf:definition = "cheap French table wine of unspecified origin"
    }

    class "_class_vintagenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vintage.n.wn.food"
        string rdf:definition = "a season's yield of wine from a vineyard"
    }

    class "_class_virgin_marynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "virgin_mary.n.wn.food"
        string rdf:definition = "a Bloody Mary made without alcohol"
    }

    class "_class_vodka_martininwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vodka_martini.n.wn.food"
        string rdf:definition = "martini made with vodka rather than gin"
    }

    class "_class_vol_au_ventnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vol_au_vent.n.wn.food"
        string rdf:definition = "puff paste shell filled with a savory meat mixture usually with a sauce"
    }

    class "_class_vouvraynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vouvray.n.wn.food"
        string rdf:definition = "a dry white French wine (either still or sparkling) made in the Loire valley"
    }

    class "_class_wafernwnfoodbread" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wafer.n.wn.food..bread"
        string rdf:definition = "thin disk of unleavened bread used in a religious service (especially in the celebration of the Eucharist)"
    }

    class "_class_wafernwnfoodcookie" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wafer.n.wn.food..cookie"
        string rdf:definition = "a small thin crisp cake or cookie"
    }

    class "_class_waffle_ironnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "waffle_iron.n.wn.artifact"
        string rdf:definition = "a kitchen appliance for baking waffles; the appliance usually consists of two indented metal pans hinged together so that they create a pattern on the waffle"
    }

    class "_class_wainscotingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wainscoting.n.wn.artifact"
        string rdf:definition = "a wainscoted wall (or wainscoted walls collectively)"
    }

    class "_class_washernwnartifactappliance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "washer.n.wn.artifact..appliance"
        string rdf:definition = "a home appliance for washing clothes and linens automatically"
    }

    class "_class_washing_machinenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "washing_machine.n.wn.artifact"
        string rdf:definition = "a home appliance for washing clothes and linens automatically"
    }

    class "_class_washstandnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "washstand.n.wn.artifact"
        string rdf:definition = "furniture consisting of a table or stand to hold a basin and pitcher of water for washing: `wash-hand stand' is a British term"
    }

    class "_class_wassailnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wassail.n.wn.food"
        string rdf:definition = "a punch made of sweetened ale or wine heated with spices and roasted apples; especially at Christmas"
    }

    class "_class_watch_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "watch_glass.n.wn.artifact"
        string rdf:definition = "laboratory glassware; a shallow glass dish used as an evaporating surface or to cover a beaker"
    }

    class "_class_water_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "water_bed.n.wn.artifact"
        string rdf:definition = "a bed with a mattress made of strong plastic that is filled with water"
    }

    class "_class_water_biscuitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "water_biscuit.n.wn.food"
        string rdf:definition = "a thin flour-and-water biscuit usually made without shortening; often served with cheese"
    }

    class "_class_water_faucetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "water_faucet.n.wn.artifact"
        string rdf:definition = "a faucet for drawing water from a pipe or cask"
    }

    class "_class_water_jugnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "water_jug.n.wn.artifact"
        string rdf:definition = "a jug that holds water"
    }

    class "_class_watercressnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "watercress.n.wn.food"
        string rdf:definition = "cresses that grow in clear ponds and streams"
    }

    class "_class_watermelonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "watermelon.n.wn.food"
        string rdf:definition = "large oblong or roundish melon with a hard green rind and sweet watery red or occasionally yellowish pulp"
    }

    class "_class_wax_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wax_bean.n.wn.food"
        string rdf:definition = "snap beans with yellow pods"
    }

    class "_class_wedding_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wedding_cake.n.wn.food"
        string rdf:definition = "a rich cake with two or more tiers and covered with frosting and decorations; served at a wedding reception"
    }

    class "_class_weissbiernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "weissbier.n.wn.food"
        string rdf:definition = "a general name for beers made from wheat by top fermentation; usually very pale and cloudy and effervescent"
    }

    class "_class_weizenbiernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "weizenbier.n.wn.food"
        string rdf:definition = "a general name in southern Germany for wheat beers"
    }

    class "_class_weizenbocknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "weizenbock.n.wn.food"
        string rdf:definition = "a German wheat beer of bock strength"
    }

    class "_class_westernnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "western.n.wn.food"
        string rdf:definition = "a sandwich made from a western omelet"
    }

    class "_class_wet_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wet_bar.n.wn.artifact"
        string rdf:definition = "a bar for mixing drinks that has a sink with running water"
    }

    class "_class_wheatflakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wheatflake.n.wn.food"
        string rdf:definition = "crisp flake made from wheat"
    }

    class "_class_whiskey_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "whiskey_bottle.n.wn.artifact"
        string rdf:definition = "a bottle for holding whiskey"
    }

    class "_class_whiskey_jugnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "whiskey_jug.n.wn.artifact"
        string rdf:definition = "a jug that contains whiskey"
    }

    class "_class_whiskey_sournwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "whiskey_sour.n.wn.food"
        string rdf:definition = "a sour made with whiskey"
    }

    class "_class_white_cakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "white_cake.n.wn.food"
        string rdf:definition = "cake made without egg yolks"
    }

    class "_class_white_russiannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "white_russian.n.wn.food"
        string rdf:definition = "a cocktail made with vodka, coffee liqueur, and milk or cream"
    }

    class "_class_white_turnipnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "white_turnip.n.wn.food"
        string rdf:definition = "white root of a turnip plant"
    }

    class "_class_whole_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "whole_milk.n.wn.food"
        string rdf:definition = "milk from which no constituent (such as fat) has been removed"
    }

    class "_class_wild_spinachnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wild_spinach.n.wn.food"
        string rdf:definition = "leafy greens collected from the wild and used as a substitute for spinach"
    }

    class "_class_willowwarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "willowware.n.wn.artifact"
        string rdf:definition = "chinaware decorated with a blue Chinese design on a white background depicting a willow tree and often a river"
    }

    class "_class_windfallnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "windfall.n.wn.food"
        string rdf:definition = "fruit that has fallen from the tree"
    }

    class "_class_window_seatnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "window_seat.n.wn.artifact"
        string rdf:definition = "a bench or similar seat built into a window recess"
    }

    class "_class_windsor_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "windsor_chair.n.wn.artifact"
        string rdf:definition = "straight chair having a shaped seat and a back of many spindles"
    }

    class "_class_wine_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wine_bar.n.wn.artifact"
        string rdf:definition = "a bar that serves only wine"
    }

    class "_class_winesapnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "winesap.n.wn.food"
        string rdf:definition = "crisp apple with dark red skin"
    }

    class "_class_wing_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wing_chair.n.wn.artifact"
        string rdf:definition = "easy chair having wings on each side of a high back"
    }

    class "_class_winter_cressnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "winter_cress.n.wn.food"
        string rdf:definition = "cress cultivated for winter salads"
    }

    class "_class_winter_crookneck_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "winter_crookneck_squash.n.wn.food"
        string rdf:definition = "a squash with a hard rind and an elongated curved neck"
    }

    class "_class_wintergreennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wintergreen.n.wn.food"
        string rdf:definition = "spicy red berrylike fruit; source of wintergreen oil"
    }

    class "_class_wish_washnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wish_wash.n.wn.food"
        string rdf:definition = "any thin watery drink"
    }

    class "_class_woknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wok.n.wn.artifact"
        string rdf:definition = "pan with a convex bottom; used for frying in Chinese cooking"
    }

    class "_class_wooden_spoonnwnartifactspoon" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wooden_spoon.n.wn.artifact..spoon"
        string rdf:definition = "a spoon made of wood"
    }

    class "_class_woodenwarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "woodenware.n.wn.artifact"
        string rdf:definition = "ware for domestic use made of wood"
    }

    class "_class_wrapnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wrap.n.wn.food"
        string rdf:definition = "a sandwich in which the filling is rolled up in a soft tortilla"
    }

    class "_class_wringernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wringer.n.wn.artifact"
        string rdf:definition = "a clothes dryer consisting of two rollers between which the wet clothes are squeezed"
    }

    class "_class_writing_desknwnartifactdesk" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "writing_desk.n.wn.artifact..desk"
        string rdf:definition = "a desk for writing (usually with a sloping top)"
    }

    class "_class_yacht_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "yacht_chair.n.wn.artifact"
        string rdf:definition = "a light folding armchair for outdoor use"
    }

    class "_class_yak_ZZ_s_milknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "yak_ZZ_s_milk.n.wn.food"
        string rdf:definition = "the milk of a yak"
    }

    class "_class_yamnwnfoodroot_vegetable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "yam.n.wn.food..root_vegetable"
        string rdf:definition = "edible tuberous root of various yam plants of the genus Dioscorea grown in the tropics world-wide for food"
    }

    class "_class_yamnwnfoodsweet_potato" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "yam.n.wn.food..sweet_potato"
        string rdf:definition = "sweet potato with deep orange flesh that remains moist when baked"
    }

    class "_class_yorkshire_puddingnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "yorkshire_pudding.n.wn.food"
        string rdf:definition = "light puffy bread made of a puff batter and traditionally baked in the pan with roast beef"
    }

    class "_class_yquemnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "yquem.n.wn.food"
        string rdf:definition = "a sweet white French wine"
    }

    class "_class_zinfandelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "zinfandel.n.wn.food"
        string rdf:definition = "dry fruity red wine from California"
    }

    class "_class_zombienwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "zombie.n.wn.food"
        string rdf:definition = "several kinds of rum with fruit juice and usually apricot liqueur"
    }

    class "_class_zucchininwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "zucchini.n.wn.food"
        string rdf:definition = "small cucumber-shaped vegetable marrow; typically dark green"
    }

    class "_class_zwiebacknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "zwieback.n.wn.food"
        string rdf:definition = "slice of sweet raised bread baked again until it is brown and hard and crisp"
    }
}

